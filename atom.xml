<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>打工人的博客</title>
  
  
  <link href="https://michael-d-666.github.io/atom.xml" rel="self"/>
  
  <link href="https://michael-d-666.github.io/"/>
  <updated>2021-12-07T10:29:15.633Z</updated>
  <id>https://michael-d-666.github.io/</id>
  
  <author>
    <name>早八打工人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人工智能课程复习</title>
    <link href="https://michael-d-666.github.io/2021/12/07/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E8%AF%BE%E7%A8%8B%E5%A4%8D%E4%B9%A0/"/>
    <id>https://michael-d-666.github.io/2021/12/07/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E8%AF%BE%E7%A8%8B%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-12-07T01:25:16.000Z</published>
    <updated>2021-12-07T10:29:15.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-人工智能概述"><a href="#第一章-人工智能概述" class="headerlink" title="第一章      人工智能概述"></a>第一章      人工智能概述</h2><ol><li><p>什么是智能？智能包含哪几种能力</p><p>智能是对自然智能的简称。从生理角度看，智能是中枢神经系统的信号加工过程及其产物；从心理角度看，智能是智力和能力的总称。<br>智能包含感知能力、记忆和思维能力、学习和自适应能力、行为能力等 。</p></li><li><p>什么是人工智能，它的研究目标是什么？</p><p>从能力的角度看，人工智能是指用人工的方法在机器上实现的智能。从学科的角度看，人工智能是一门研究如何构造智能机器或智能系统，使其能够模拟、延申和拓展人类智能的学科。</p><p>研究目标：①、对智能行为有效解释的理论分析    ②、解释人类智能    ③、构造具有智能的人工制品。</p></li><li><p>什么是图灵实验？图灵实验说明了什么？</p><p>图灵实验：通过一系列智能问题，让超过30%的主持人认为和自己对话的是人而不是机器。</p><p>图灵实验用来衡量一个机器是否具有智能。</p></li><li><p>人工智能主要有哪几个学派，各自的特点是什么？</p><p>主要有：符号主义学派、连接主义学派、行为主义学派。</p></li></ol><p>   符号主义学派：人工智能的研究应该采用功能模拟的方法。通过研究人类认知系统的功能，再用计算机模拟，从而实现人工智能。</p><p>   连接主义学派：人工智能的研究应该采用结构模拟的方法。着重模拟人类神经网络的生理结构。</p><p>   行为主义学派：人工智能的研究应该采用行为模拟的方法。不同的行为表现出不同的功能和不同的控制结构。</p><ol><li><p>人工智能有哪些主要研究和应用领域？其中哪些是新的研究热点？</p><p>主要研究和应用领域：机器思维、机器学习、机器感知、机器行为、计算智能、分布智能、智能系统、人工心理和人工情感。</p></li></ol><hr><h2 id="第二章-确定性知识系统"><a href="#第二章-确定性知识系统" class="headerlink" title="第二章         确定性知识系统"></a>第二章         确定性知识系统</h2><ol><li><p>什么是知识？有哪几种主要的知识分类方法？</p><p>知识是经过消减、塑造、解释、选择、和转换的信息。</p><p>知识分类方法：按适用范围分类；按作用效果分类；按确定性分类</p></li><li><p>什么是知识表示？知识表示有哪些要求？</p><p>知识表示：用一组约定的符号把知识编码成一组可以被计算机直接识别，便于系统使用的数据结构。</p><p>知识表示要求：知识表示的表示能力、知识表示的可利用性、知识表示的可组织性和可维护性、知识表示的可理解性和可实现性。</p></li><li><p>什么是推理？它有哪些分类方法？</p><p>推理是由具体实例归纳出一般规律，或者是根据已有知识推出新的理论的思维过程。</p><p>分类方法：按推理的逻辑基础分类；按所用知识的确定性分类。</p></li></ol><ol><li><pre><code>设有如下语句，请用相应的谓词公式分别把他们表示出来（1）有的人喜欢梅花，有的人喜欢菊花，有的人既喜欢梅花，又喜欢菊花（2） 有的人每天下午都去打篮球（3） 新型计算机速度又快，存储容量又大（4）不是每个计算机系的学生都喜欢在计算机上编程序（5）凡是喜欢编程序的人都喜欢计算机<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   （1） ① 定义谓词     P(x)：x是人        L(x，y)：x喜欢y           </span><br><span class="line">     ②用知识谓词表示       </span><br><span class="line">   $$</span><br><span class="line">   (\exists x)( P(x)\Rightarrow L(x,梅花)\vee L(x,菊花)\vee L(x,梅花)\wedge L(x,菊花) )</span><br><span class="line">   $$</span><br><span class="line">   （2） ①定义谓词     P(x)：x是人      B(x)：B打篮球      A(y) ：y是下午  </span><br><span class="line"></span><br><span class="line">   ​  ②用知识谓词表示 </span><br><span class="line">   $$</span><br><span class="line">   (\exists x)(\forall y)(A(y)\Rightarrow P(x)\wedge B(x))</span><br><span class="line">   $$</span><br><span class="line">      (3)    ①定义谓词       Nc(x)：x是计算机     F(x)：x速度快       B(x)：x存储容量大</span><br><span class="line"></span><br><span class="line">   ​   ②用知识谓词表示 </span><br><span class="line">   $$</span><br><span class="line">   (\forall (x))(Nc(x)\Rightarrow F(x)\wedge B(x))</span><br><span class="line">   $$</span><br><span class="line">      (4)      ①定义谓词    S(x)：x是学生        L(x,p)：x喜欢编程       U(x,c)：x使用计算机</span><br><span class="line">    ②用知识谓词表示 </span><br><span class="line">   $$</span><br><span class="line">   \neg(\forall (x))(S(x)\Rightarrow L(x,p)\wedge U(x,c))</span><br><span class="line">   $$</span><br><span class="line">      (5)      ①定义谓词  P(x)：x是人      L(x,y)：x喜欢y</span><br><span class="line"></span><br><span class="line">   ​  ②用知识谓词表示 </span><br><span class="line">   $$</span><br><span class="line">   (\forall (x))(P(x)\wedge L(x,pragramming) \Rightarrow L(x,computer))</span><br><span class="line">   $$</span><br><span class="line">   </span><br><span class="line">5.  用谓词表示法求解机器人摞积木问题。设机器人有一只机械手，要处理的世界有一张桌子，桌上可堆放若干相同的方积木块。机械手个操作积木的典型动作:从桌上拣起一块积木;将手中的积木放到桌之上;在积木上再摞上一块积木;从积木上面拣起一块积木。积木世界的布局如下图所示。</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://s2.loli.net/2021/12/07/d1HVTRc8bxqurjE.png&quot; alt=&quot;image-20211207132651450&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">​①  定义状态谓词     CLEAR(x)：x上方为空       ON(x，y)：x在y的上面      ONTABLE(x)：x在桌上面       HOLDING(x):机械手抓住x       HANDEMPTY：机械手是空的</span><br><span class="line">​问题的初始状态：CLEAR(C)CLEAR(B)ON(C,A)ONTABLE(A)ONTABLE(B)HANDEMPTY</span><br><span class="line"></span><br><span class="line">​问题的目标状态：ONTABLE(C)ON(B,C)ON(A,B)HANDEMPTYCLEAR(A)</span><br><span class="line"></span><br><span class="line">​②   定义描述操作的谓词PickUp(x)：从桌面上PutDown(x)：把x放到桌面上Stack(x,y)：把x放到y上</span><br><span class="line">​   UpStack(x,y)：把x从y上拿起来</span><br><span class="line"></span><br><span class="line">​   PutUp(x)：条件：ONTABLE(x)，HANDEMPTY，CLEAR(x)</span><br><span class="line">​ 动作：删除表ONTABLE(x),HANDEMPTY添加表HANDHOLDING(x)</span><br><span class="line">​   PutDown(x)：条件：HOLDING(x)</span><br><span class="line">​  动作：删除表HOLDING(x)</span><br><span class="line">​ 添加表ONTABLE(x)，CLEAR(x)，HANDEMPTY</span><br><span class="line"></span><br><span class="line">​   Stack(x,y)：条件： CLEAR(y)，HANDHOLDING(x)，</span><br><span class="line">​   动作：删除表CLEAR(y)，HANDHOLDING(x）</span><br><span class="line">​  添加表ON(x,y)，HANDEMPTY，CLEAR(x)</span><br><span class="line">​   UpStack(x,y)：条件：ON(x,y)HANDEMPTY，CLEAR(x)</span><br><span class="line">​动作：删除表：ON(x,y)，HANDEMPTY</span><br><span class="line">​   添加表：HANDHOLDING(x)，CLEAR(y)</span><br><span class="line"></span><br><span class="line">​    ③  问题的求解过程</span><br><span class="line"></span><br><span class="line">​&lt;img src=&quot;https://s2.loli.net/2021/12/07/HkaYBfUzbdIiOKG.png&quot; alt=&quot;image-20211207161537384&quot; style=&quot;zoom: 50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">6. 用谓词表示法求解农夫、狼、山羊、白菜问题。农夫、狼、山羊、白菜全部卜在一河的左岸，现在要把他们全部送到河的右岸去，农夫有一条船，过河时，除农夫外船上至多能载狼、山羊、白菜中的一种。狼要吃山羊，山羊要吃白菜，除非农夫在那里。似规划出一个确保全部安全过河的计划。请写出所用谓词的定义，并给出每个谓词的功能及变量的个体域。</span><br><span class="line"></span><br><span class="line">   ①  定义状态谓词     AL(x)：x在左岸      AR(x)：x在右岸</span><br><span class="line"></span><br><span class="line">   ​  问题的初始状态：AL(农夫)    AL(船)     AL(狼)      AL(羊)     AL(白菜)</span><br><span class="line"></span><br><span class="line">   ​  问题的目标状态：AR(农夫)AR(船)AR(狼)AR(羊)AR(白菜)</span><br><span class="line"></span><br><span class="line">   ②   定义描述操作的谓词L-R(x)：农夫带着x划船从左岸到右岸</span><br><span class="line">      R-L：农夫自己划船从左岸到右岸</span><br><span class="line">      R-L(x)：农夫带着x划船从左岸到右岸</span><br><span class="line"></span><br><span class="line">   ​   L-R(x)：条件：AL(x)</span><br><span class="line"></span><br><span class="line">7. 判断下列公式是否为可合一，若可合一，则求出其最一般合一</span><br><span class="line"></span><br></pre></td></tr></table></figure>（1）P(a,b), P(x,y)（2）P(f(x),b)，P(y,z)（3）P(f(x),y)，P(y,f(b))（4）P(f(y),y,x)，P(x,f(a),f(b))（5）P(x,y)，P(y,x)</code></pre><p>(1)可合一，最一般合一为{a/x,b/y}</p><p>(2)</p></li><li><p>什么是谓词公式的可满足性？什么是谓词公式的不可满足性？</p><p>对于谓词公式P，如果至少存在D上的一个解释，使公式P在此解释下的真值为T，则公式P在D上是可满足的。<br>对于谓词公式P，如果对于D上的任意一解释都去真值F，则称P在D上不可满足。若在任何非空域上都是永假，则称P不可满足</p></li><li><p>什么是谓词公式的前束范式？什么是Skolem范式？</p><p>如果谓词公式的所有两次都非否定地出现在公式的最前面，且辖域都为整个公式，则这个公式是前束范式</p><p>若前束范式中的存在量词都在全称两次之前，则这种形式的谓词公式为Skolem范式</p></li><li><p>将下列谓词公式转化为子句集</p><p><img src="https://s2.loli.net/2021/12/07/f34tYKNMr9P7e6G.png" alt="image-20211207180237431" style="zoom:50%;"/></p><p>因为已经是前束范式，所以直接开始消去存在量词。但式子中没有存在量词，所以开始变为Skolem标准型，即：将母式变为子句的合取，本例中已经完成。接着，消去全称量词，之前删去。消去合取，每一个元素就是一个子句。最后更换变元：两个子句变元不能相同</p><p>答案：{P(x,y),Q(u,v)}</p></li></ol><script type="math/tex; mode=display">(\forall (x))(\forall (y))(P(x)\Rightarrow Q(x,y))</script><p>​       因为已经是前束范式且没有存在量词，所以化为Skolem标准型，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章-人工智能概述&quot;&gt;&lt;a href=&quot;#第一章-人工智能概述&quot; class=&quot;headerlink&quot; title=&quot;第一章      人工智能概述&quot;&gt;&lt;/a&gt;第一章      人工智能概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是智能？智能包含哪几种能力&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="大三课程" scheme="https://michael-d-666.github.io/tags/%E5%A4%A7%E4%B8%89%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>NuistOJ</title>
    <link href="https://michael-d-666.github.io/2021/12/06/NuistOJ/"/>
    <id>https://michael-d-666.github.io/2021/12/06/NuistOJ/</id>
    <published>2021-12-06T09:17:31.000Z</published>
    <updated>2021-12-08T14:59:08.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="P1029-滑雪"><a href="#P1029-滑雪" class="headerlink" title="P1029 滑雪"></a>P1029 滑雪</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">小明喜欢滑雪，为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。小明想知道在一个区域中最长底滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子:</span><br><span class="line">1  2  3  4 5</span><br><span class="line">16 17 18 19 6</span><br><span class="line">15 24 25 20 7</span><br><span class="line">14 23 22 21 8</span><br><span class="line">13 12 11 10 9</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入描述：<br>输入的第一行表示区域的行数 R 和列数 C(1≤<em>R</em>,<em>C</em>≤100). 下面是 <em>R</em> 行，每行有 <em>C</em> 个整数，代表高度 <em>h</em> , 0≤<em>h</em>≤10000.<br>5 5<br>1 2 3 4 5<br>16 17 18 19 6<br>15 24 25 20 7<br>14 23 22 21 8<br>13 12 11 10 9</p><p>输出：<br>输出最长区域的长度.<br>25</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>小明假如在某一个点，他可以朝四个方向中的任意一个方向滑行，所以肯定要有一个循环次数为4的for循环来遍历四个方向。<br>这里就用两个长度为4的数组xi、yi来简化四个方向。<br>ma_p中存的是原地图,vis用来保存当前点的最长所求路径</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;<span class="number">4</span>;p++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x+xi[p]&gt;r<span class="number">-1</span>||x+xi[p]&lt;<span class="number">0</span>||y+yi[p]&lt;<span class="number">0</span>||y+yi[i]&gt;c<span class="number">-1</span>)&#123; <span class="comment">//不能滑到地图外面去</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ma_p[x][y]&gt;ma_p[x+xi[p]][y+yi[p]])&#123;<span class="comment">//找到了比当前高度低的点</span></span><br><span class="line">            vis[x][y]=<span class="built_in">max</span>(vis[x][y],<span class="built_in">dp</span>(x+xi[p],y+yi[p])+<span class="number">1</span>);<span class="comment">//不知道当前点的最长路径和下一个点的最长路径哪一个长，下一个点要加上到当前点的距离</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    k=<span class="built_in">max</span>(k,vis[x][y]);<span class="comment">//要求出四个方向上的最长路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>技巧：可以加一个记忆化操作来减少计算时间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(visited[x][y]!=<span class="number">1</span>)       <span class="comment">//判断该点是否计算过，实现记忆化过程</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> visited[x][y];</span><br><span class="line">    &#125;   </span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> tu[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> xi[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> yi[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> r,c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[x][y]!=<span class="number">1</span>) <span class="comment">//记忆化操作</span></span><br><span class="line">        <span class="keyword">return</span> vis[x][y];</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;<span class="number">4</span>;p++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x+xi[p]&gt;r<span class="number">-1</span>||x+xi[p]&lt;<span class="number">0</span>||y+yi[p]&gt;c<span class="number">-1</span>||y+yi[p]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(tu[x][y]&lt;tu[x+xi[p]][y+yi[p]])<span class="comment">//这里大于或者小于都可以</span></span><br><span class="line">            vis[x][y]=<span class="built_in">max</span>(vis[x][y],<span class="built_in">dp</span>(x+xi[p],y+yi[p])+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        k=<span class="built_in">max</span>(k,vis[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;r&gt;&gt;c)&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c;j++)&#123;</span><br><span class="line">                cin&gt;&gt;tu[i][j];</span><br><span class="line">                vis[i][j]=<span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c;j++)&#123;</span><br><span class="line">                count=<span class="built_in">max</span>(count,<span class="built_in">dp</span>(i,j)); <span class="comment">//dp(i,j)表示从某一个点出发的最长路径，所以count每次都要取最大值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1138-前中求后"><a href="#P1138-前中求后" class="headerlink" title="P1138 前中求后"></a>P1138 前中求后</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给出一棵二叉树的中序遍历 (inorder)和前序遍历 (preorder)，求它的后序遍历 (postorder)。</span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>套用模板，在后序遍历位置输出字符，就会得到后序遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 二叉树遍历框架 */</span><br><span class="line">void traverse(TreeNode root) &#123;</span><br><span class="line">    // 前序遍历</span><br><span class="line">    traverse(root.left)</span><br><span class="line">    // 中序遍历</span><br><span class="line">    traverse(root.right)</span><br><span class="line">    // 后序遍历</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bianli</span><span class="params">(string inorder,string preorder)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preorder.<span class="built_in">empty</span>())<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">char</span> root=preorder[<span class="number">0</span>];</span><br><span class="line">    preorder.<span class="built_in">erase</span>(preorder.<span class="built_in">begin</span>());<span class="comment">//获取根节点并删除，相当于inorder.substr(0,k),但实际上不行，因为有可能inorder为0</span></span><br><span class="line">    <span class="keyword">int</span> k=inorder.<span class="built_in">find</span>(root); <span class="comment">//找到根节点的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    string inorder_left=inorder.<span class="built_in">substr</span>(<span class="number">0</span>,k);</span><br><span class="line">    string inorder_right=inorder.<span class="built_in">substr</span>(k+<span class="number">1</span>);</span><br><span class="line">       </span><br><span class="line">    string preorder_left=preorder.<span class="built_in">substr</span>(<span class="number">0</span>,k);</span><br><span class="line">    string preorder_right=preorder.<span class="built_in">substr</span>(k);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bianli</span>(inorder_left,preorder_left);</span><br><span class="line">    <span class="built_in">bianli</span>(inorder_right,preorder_right);</span><br><span class="line">    cout&lt;&lt;root;<span class="comment">//在后序位置输出</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string inorder;</span><br><span class="line">    string preorder;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;inorder&gt;&gt;preorder)</span><br><span class="line">    <span class="built_in">bianli</span>(inorder,preorder);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1204-电池寿命"><a href="#P1204-电池寿命" class="headerlink" title="P1204 电池寿命"></a>P1204 电池寿命</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Steven 买了一个模型直升机，这架飞机由两节 5 号电池供电。为了保证能够长时间飞行，他买了很多 5 号电池。这些电池的生产商不同，质量也有差异，因而使用寿命也有所不同。有的能使用 5 个小时，有的可能就只能使用 3 个小时。显然如果他只有两个电池，一个能用 5 小时一个能用 3 小时，那么他只能进行 3 个小时的驾驶飞行，有一个电池剩下的电量无法使用。但是如果他有更多的电池，就可以更加充分地利用它们。比如他有三个电池分别能用 3、3、5 小时，他可以先使用两节能用 3 个小时的电池，使用半个小时后再把其中一个换成能使用 5 个小时的电池，两个半小时后再把剩下的一节电池换成刚才换下的电池（那个电池还能用 2.5 个小时），这样总共就可以使用 5.5 个小时，没有一点浪费。</span><br><span class="line"></span><br><span class="line">现在已知电池的数量和电池能够使用的时间，请你帮 Steven 找一种方案使得使用时间尽可能的长。</span><br></pre></td></tr></table></figure><p>输入描述<br>输入包含多组数据。每组数据包括两行，第一行是一个整数 N (2 &lt;= N &lt;= 1000)，表示电池的数目，接下来一行 (请 Java 和 python 注意，不止一行) 是 N 个正整数表示电池能使用的时间<br>2<br>3 5</p><p>3<br>3 3 5</p><p>输出描述<br>3.0<br>5.0</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>先攘外再安内</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(sum-maxV&gt;maxV)  <span class="comment">//如果其他电池比得过最大的</span></span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>,maxV+(sum-maxV-maxV)*<span class="number">1.0</span>/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span><span class="comment">//如果其他所有电池加起来都比不过最大的</span></span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>,(sum-maxV)*<span class="number">1.0</span>);<span class="comment">//注意要乘以1.0</span></span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> maxV=<span class="number">-1111</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i];</span><br><span class="line">            maxV=<span class="built_in">max</span>(maxV,a[i]);</span><br><span class="line">            sum+=a[i];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum-maxV&gt;maxV)</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>,maxV+(sum-maxV-maxV)*<span class="number">1.0</span>/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>,(sum-maxV)*<span class="number">1.0</span>);<span class="comment">//注意要乘以1.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1439-简单的0-1背包"><a href="#P1439-简单的0-1背包" class="headerlink" title="P1439    简单的0-1背包"></a>P1439    简单的0-1背包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有一个箱子容量为 V（正整数，0＜＝V＜＝20000），同时有 n 个物品（0＜n＜＝30），每个物品有一定的体积和价值。要求 n 个物品中，任取若干个装入箱内，在箱子能放得下的前提下，满足箱子内部的价值最大。</span><br></pre></td></tr></table></figure><p>输入描述</p><p>一个整数 v，表示箱子容量<br>一个整数 n，表示有 n 个物品<br>接下来 n 个整数，分别表示这 n 个物品的各自体积和价值</p><p>3<br>2<br>2 100<br>4 200</p><p>输出描述<br>一个整数，表示箱子能装下的最大价值。<br>100</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>0-1背包只要考虑对当前物品要不要拿（当然放不下肯定不拿）。放得下的话就要判断当前物品值不值了，所以要比较==当前背包容量下==拿了这件物品的总价值和不拿这件物品时当前背包容量下的总价值哪个更大</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=v;j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(a[i].wei&gt;j)&#123;</span><br><span class="line">             dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-a[i].wei]+a[i].val);</span><br><span class="line">          &#125;      </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,v;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thing</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> wei;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;a[<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;v&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[n+<span class="number">1</span>][v+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;a[i].wei&gt;&gt;a[i].val;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=v;i++)</span><br><span class="line">            dp[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=v;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i].wei&gt;j)&#123;</span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-a[i].wei]+a[i].val);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;dp[n][v]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1474-数列操作"><a href="#P1474-数列操作" class="headerlink" title="P1474    数列操作"></a>P1474    数列操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个由 n 个正整数组成的数列，对数列进行一次操作：去除其中两项 a、b，然后添加一项 a×b+1。每操作一次数列减少一项，经 n−1 次操作后该数列只剩一个数。试求在 n-1 次操作后最后得数的最大值。</span><br></pre></td></tr></table></figure><p>输入描述<br>多组输入，每组两行，第一行输入正整数 n，第二行输入 n 个正整数 n&lt;20<br>6<br>8 9 3 6 5 4</p><p>输出描述<br>对每组输入，输出最后剩下的一个<br>29493</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>每次取数列中的最小的两个数，每次调用sort函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">sort</span>(a+i,a+n);            </span><br><span class="line">            a[<span class="number">1</span>+i]=a[<span class="number">0</span>+i]*a[<span class="number">1</span>+i]+<span class="number">1</span>;</span><br><span class="line">            a[<span class="number">0</span>+i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a[n];<span class="comment">//一定要是unsigned longlong才能过</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">sort</span>(a+i,a+n);            </span><br><span class="line">            a[<span class="number">1</span>+i]=a[<span class="number">0</span>+i]*a[<span class="number">1</span>+i]+<span class="number">1</span>;</span><br><span class="line">            a[<span class="number">0</span>+i]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;a[n<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1472-智力大冲浪"><a href="#P1472-智力大冲浪" class="headerlink" title="P1472     智力大冲浪"></a>P1472     智力大冲浪</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小伟报名参加中央电视台的智力大冲浪节目。本次挑战赛吸引了众多参赛者，主持人为了表彰大家的勇气，先奖励每个参赛者 m 元。先不要太高兴！因为这些钱还不一定都是你的？！接下来主持人宣布了比赛规则：首先，比赛时间分为 n 个时段 (n≤500)，它又给出了很多小游戏，每个小游戏都必须在规定期限 ti 前完成 (1≤ti≤n)。如果一个游戏没能在规定期限前完成，则要从奖励费 m 元中扣去一部分钱 wi，wi 为自然数，不同的游戏扣去的钱是不一样的。当然，每个游戏本身都很简单，保证每个参赛者都能在一个时段内完成，而且都必须从整时段开始。主持人只是想考考每个参赛者如何安排组织自己做游戏的顺序。作为参赛者，小伟很想赢得冠军，当然更想赢取最多的钱！注意：比赛绝对不会让参赛者赔钱！</span><br></pre></td></tr></table></figure><p>输入描述<br>多组输入，每组共 4 行，<br>第 1 行为 m，表示一开始奖励给每位参赛者的钱；<br>第 2 行为 n，表示有 n 个小游戏；<br>第 3 行有 n 个数，分别表示游戏 1 到 n 的规定完成期限；<br>第 4 行有 n 个数，分别表示游戏 1 到 n 不能在规定期限前完成的扣款数。<br>10000<br>7<br>4 2 4 3 1 4 6<br>70 60 50 40 30 20 10</p><p>输出描述<br>对于每组输入，仅 1 行，表示小伟能赢取最多的钱<br>9950</p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>首先按任务价值从大到小排序，因为肯定希望钱多的任务先完成。于是从这个任务的截止时间开始往前找有无空闲时间，有时间就做，并且把这一时间置为忙碌。若没有时间，就放到最后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=a[i].time;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j]==<span class="number">0</span>)&#123;</span><br><span class="line">vis[j]=<span class="number">1</span>;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=n;k&gt;<span class="number">0</span>;k--)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[k]==<span class="number">0</span>)&#123;</span><br><span class="line">vis[k]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">found+=a[i].val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">game</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> time;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;a[<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> game &amp; x,<span class="keyword">const</span> game &amp; y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.val&gt;y.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;m&gt;&gt;n)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i].time;</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> found=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=a[i].time;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j]==<span class="number">0</span>)&#123;</span><br><span class="line">vis[j]=<span class="number">1</span>;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=n;k&gt;<span class="number">0</span>;k--)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[k]==<span class="number">0</span>)&#123;</span><br><span class="line">vis[k]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">found+=a[i].val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;m-found&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="P1476-加工生产调度"><a href="#P1476-加工生产调度" class="headerlink" title="P1476     加工生产调度"></a>P1476     加工生产调度</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">某工厂收到了 n 个产品的订单，这 n 个产品分别在 A,B 两个车间加工，并且必须先在 A 车间加工后才可以到 B 车间加工。某个产品 i 在 A,B 两车间加工的时间分别为A_i,B_i  。怎样安排这 n 个产品的加工顺序，才能使总的加工时间最短。这里所说的加工时间是指：从开始加工第一个产品到最后所有的产品都已在A,B 两车间加工完毕的时间。</span><br></pre></td></tr></table></figure><p>输入描述：<br>多组输入，每组数据的第一行仅一个正整数 n(0&lt;n&lt;1000) ，表示产品的数量。接下来 n个数据是表示这 n个产品在 A车间加工各自所要的时间 (都是整数)。最后的 n个数据是表示这 n个产品在 B<em>B</em> 车间加工各自所要的时间 (都是整数)。<br>5<br>3 5 8 7 10<br>6 2 1 4 9</p><p>输出描述：对于每组输入一个数据，表示最少的加工时间<br>34</p><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><p>在A上加工时间的短的先做(尽量让B忙碌)，在B上加工时间短的放最后（尽量让A和B一起忙碌）</p><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//在A机器上加工时间短的放前面，B机器加工时间短的放后面</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qwe</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> c,id;<span class="comment">//a和b不可以写在一个结构体里，因为按照c排完序后a,b的id就改变了 </span></span><br><span class="line">&#125;a[<span class="number">1234</span>];</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1234</span>],y[<span class="number">1234</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">1234</span>];<span class="comment">//储存顺序 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">panduan</span><span class="params">(qwe x,qwe y)</span><span class="comment">//从小到大排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.c&lt;y.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j;</span><br><span class="line"> <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">         cin&gt;&gt;x[i];</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> &#123;</span><br><span class="line">  cin&gt;&gt;y[i];</span><br><span class="line">  a[i].c=<span class="built_in">min</span>(x[i],y[i]);<span class="comment">//a[i].c就是a和b两者最小的 </span></span><br><span class="line">  a[i].id=i;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n,panduan);<span class="comment">//a[i]重新排序,id存储了原来的顺序</span></span><br><span class="line"> <span class="keyword">int</span> l=<span class="number">0</span>,r=n+<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(x[a[i].id]==a[i].c)<span class="comment">//不是x[i]而是x[a[i].id],因为id和c是对应的 ，相等就表示A的时间小于B的时间</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//如果和x相等，就说明a的时间短，就放前面</span></span><br><span class="line"> ans[++l]=a[i].id;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span><span class="comment">//否则就放后面</span></span><br><span class="line"> ans[--r]=a[i].id;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">int</span> s1=<span class="number">0</span>,s2=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//排完序后求时间 </span></span><br><span class="line"> &#123;</span><br><span class="line"> s1+=x[ans[i]];<span class="comment">//ans[i]中存的是id</span></span><br><span class="line"> <span class="keyword">if</span>(s1&gt;s2)<span class="comment">//a在工作时b也在工作</span></span><br><span class="line"> s2=s1;<span class="comment">//a工作的时间长，a加入总时长，否则b加入总时长</span></span><br><span class="line"> s2+=y[ans[i]];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s2);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="P1477-部分背包问题"><a href="#P1477-部分背包问题" class="headerlink" title="P1477      部分背包问题"></a>P1477      部分背包问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">阿里巴巴走进了装满宝藏的藏宝洞。藏宝洞里面有 N(N≤100) 堆金币，第 i 堆金币的总重量和总价值分别是 m_i,v_i,1&lt;=m,v≤100)。阿里巴巴有一个承重量为 T(T≤1000) 的背包，但并不一定有办法将全部的金币都装进去。他想装走尽可能多价值的金币。所有金币都可以随意分割，分割完的金币重量价值比（也就是单位价格）不变。请问阿里巴巴最多可以拿走多少价值的金币？</span><br></pre></td></tr></table></figure><p>输入描述：第一行两个整数 N,T<em>N</em>,<em>T</em>。<br>接下来 N行，每行两个整数 m_i,v_i。<br>4 50<br>10 60<br>20 100<br>30 120<br>15 45</p><p>输出描述：<br>一个实数表示答案，输出两位小数<br>240.00</p><h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><p>既然每一个物品都可以取任意部分，那么就按性价比来算，每次都取性价比最大的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">&#125;a[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.v*b.m&gt;b.v*a.m;<span class="comment">//交叉相乘，避免精度问题</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,T;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;N&gt;&gt;T)&#123;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i].m&gt;&gt;a[i].v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(a,a+N,cmp);<span class="comment">//按价值从高到低排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(T&gt;a[i].m)&#123;</span><br><span class="line">                ans+=a[i].v;</span><br><span class="line">                T=T-a[i].m;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans+=T*<span class="number">1.0</span>*a[i].v/a[i].m;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B1631-CowParty"><a href="#B1631-CowParty" class="headerlink" title="B1631      CowParty"></a>B1631      CowParty</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">寒假到了，n头牛都要去参加一场在编号为 x的牛的农场举行的派对，农场之间有 m条有向路，每条路都有一定的长度。</span><br><span class="line"></span><br><span class="line">每头牛参加完派对后都必须回家，无论是去参加派对还是回家，每头牛都会选择最短路径，求这 n头牛的最短路径（一个来回）中最长的一条路径长度。</span><br></pre></td></tr></table></figure><p>输入格式：<br>第一行有三个整数，分别表示牛的数量 n，道路数 m和派对农场编号 x。<br>接下来 m行，每行三个整数 u, v, w 表示存在一条由 u通向 v 的长度为 w的道路。<br>对于全部的测试点，保证 1≤<em>x</em>≤<em>n</em>≤103，1≤<em>m</em>≤105，1≤<em>u</em>,<em>v</em>≤<em>n</em>，1≤<em>w</em>≤102，保证从任何一个结点出发都能到达 x号结点，且从 x出发可以到达其他所有节点。<br>4 8 2<br>1 2 4<br>1 3 2<br>1 4 7<br>2 1 1<br>2 3 5<br>3 1 2<br>3 4 4<br>4 2 3</p><p>输出格式：<br>输出一行一个整数表示答案<br>10</p><h2 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h2><p>相当于两次最短路径，，但边是反的。第一次是正向建图，第二次是反向见图。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;u[i]&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">        <span class="built_in">addedge</span>(u[i],v[i],w[i]);</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">addedge</span>(v[i],u[i],w[i]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>利用前向星存图</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;e[maxm];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    e[cnt].to=v;</span><br><span class="line">    e[cnt].weight=w;</span><br><span class="line">    e[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="comment">// 做题的好习惯 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>; <span class="comment">//点数 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">100005</span>; <span class="comment">//边数 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, ans[maxn], sum;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> nxt, to, w;</span><br><span class="line">&#125;e[maxm];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">e[++cnt].nxt = head[u];</span><br><span class="line">e[cnt].w = w;</span><br><span class="line">e[cnt].to = v;</span><br><span class="line">head[u] = cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn], vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dis[i] = <span class="number">0x3f3f3f3f</span>;  </span><br><span class="line">priority_queue&lt; pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, s));</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = q.<span class="built_in">top</span>().second;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt) &#123;</span><br><span class="line"><span class="keyword">int</span> v = e[i].to;</span><br><span class="line"><span class="keyword">if</span> (dis[v] &gt; dis[u] + e[i].w) &#123;</span><br><span class="line">dis[v] = dis[u] + e[i].w;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-dis[v], v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> u[maxm], v[maxm], w[maxm];</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123; <span class="comment">//注意要从1开始，因为等会存边是从1开始</span></span><br><span class="line">cin &gt;&gt; u[i] &gt;&gt; v[i] &gt;&gt; w[i]; <span class="comment">//先存下数据，便于以后反向建边 </span></span><br><span class="line"><span class="built_in">addEdge</span>(u[i], v[i], w[i]); <span class="comment">//正向建边 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dijkstra</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans[i] = dis[i]; <span class="comment">//回家的最短路径  </span></span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(head));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">addEdge</span>(v[i], u[i], w[i]); <span class="comment">//反向建边</span></span><br><span class="line"><span class="built_in">dijkstra</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans[i] += dis[i]; <span class="comment">//回家的最短路+去派对的最短路=全程的最短路 </span></span><br><span class="line">sum = <span class="built_in">max</span>(sum, ans[i]); <span class="comment">//求最大值 </span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; sum;<span class="comment">//输出 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;P1029-滑雪&quot;&gt;&lt;a href=&quot;#P1029-滑雪&quot; class=&quot;headerlink&quot; title=&quot;P1029 滑雪&quot;&gt;&lt;/a&gt;P1029 滑雪&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
    <category term="OJ/ACM" scheme="https://michael-d-666.github.io/tags/OJ-ACM/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言知识整理</title>
    <link href="https://michael-d-666.github.io/2021/12/06/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://michael-d-666.github.io/2021/12/06/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</id>
    <published>2021-12-06T02:10:57.000Z</published>
    <updated>2021-12-06T03:29:03.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol><li><p>AX的寄存器值若是0304，则AH是03，AL是04<br><img src="https://s2.loli.net/2021/12/06/ETUWopzN6V5IrhJ.png" alt="image-20211206101919971"></p></li><li><p>给某一地址存入字形数据<br>（在文本文件中写的时候，mov word ptr [bx],0405h和mov [bx],0405h两者等价，但在dos中无法mov [bx],0405）<br><img src="https://s2.loli.net/2021/12/06/BDkXSfFOb5TQmyu.png" alt="image-20211206102230606"></p></li><li><p>不能直接通过寄存器寻址来赋值立即数，要通过寄存器当中转<br><img src="https://s2.loli.net/2021/12/06/3NdjWp5SF8ugI1c.png" alt="image-20211206102654027"></p></li><li><p>在8086之中，只有四个寄存器可以在【】中进行内存单元的寻址：BX，BP，SI，DI。若中括号中出现AX，则会报错。并且这四个中间，BX和SI一起出现、BX和DI可一起出现，BP和SI可以一起出现，BP和DI一起出现。其余组合不能出现。<br><a href="https://blog.csdn.net/qq_42282258/article/details/82795286">中括号，寻址寄存器的使用</a></p></li><li><p>80*25彩色模式</p><p>DOS窗口一行可以显示80个字符，一行160个字节。总共有25行，这被当作一页。每个字符两个字节，总共4000B，近似4KB。</p><p>显存总共32KB，从B8000H—-BFFFFH。</p><p>显示器默认显示第0页。</p><p>每个字符占两个字节，高位字节表示颜色属性，地位字节表示字符的ASCII码。</p><p>颜色属性总共有8位</p><p><img src="https://s2.loli.net/2021/12/06/f7OjAnSswTyB3ie.png" alt="image-20211206110912459"></p></li><li><p>内中断 int 21h</p><p>| AH   | 功能         | 调用参数    |<br>| —— | —————— | —————- |<br>| 02   | 显示输出     | DL=输出字符 |<br>| 4C   | 带返回码结束 | AL=返回码   |</p><p><a href="https://www.cnblogs.com/ynwlgh/archive/2011/12/12/2285017.html">INT 21H 指令说明</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;AX的寄存器值若是0304，则AH是03，AL是04&lt;br&gt;&lt;img src=&quot;https://s2.lo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://michael-d-666.github.io/2021/12/05/hello-world/"/>
    <id>https://michael-d-666.github.io/2021/12/05/hello-world/</id>
    <published>2021-12-05T14:59:02.219Z</published>
    <updated>2021-12-06T08:52:44.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二次踩坑"><a href="#第二次踩坑" class="headerlink" title="第二次踩坑"></a>第二次踩坑</h3><p>网站的背景想要改成渐变的颜色，可是怎么该也仍然是纯白的背景，而且网站打开检查发现也是可以接收的。在本地浏览是可以成功看到的。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><img src="https://s2.loli.net/2021/12/06/QWTzrOiGNvSkyeb.png" alt="image-20211206165112039"></p><p>在hexo的config配置文件下将url修改成网页地址。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第二次踩坑&quot;&gt;&lt;a href=&quot;#第二次踩坑&quot; class=&quot;headerlink&quot; title=&quot;第二次踩坑&quot;&gt;&lt;/a&gt;第二次踩坑&lt;/h3&gt;&lt;p&gt;网站的背景想要改成渐变的颜色，可是怎么该也仍然是纯白的背景，而且网站打开检查发现也是可以接收的。在本地浏览是可以成功</summary>
      
    
    
    
    
  </entry>
  
</feed>
