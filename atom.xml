<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>打工人的博客</title>
  
  
  <link href="https://michael-d-666.github.io/atom.xml" rel="self"/>
  
  <link href="https://michael-d-666.github.io/"/>
  <updated>2022-02-22T08:32:39.383Z</updated>
  <id>https://michael-d-666.github.io/</id>
  
  <author>
    <name>早八打工人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day2-MySQL.存储引擎-索引-事务</title>
    <link href="https://michael-d-666.github.io/2022/02/21/Day2-MySQL-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    <id>https://michael-d-666.github.io/2022/02/21/Day2-MySQL-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</id>
    <published>2022-02-21T14:18:13.000Z</published>
    <updated>2022-02-22T08:32:39.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-存储引擎"><a href="#1-存储引擎" class="headerlink" title="1. 存储引擎"></a>1. 存储引擎</h2><p><code>存储引擎</code>代表了一个数据库如何存储数据、如何为存储的数据建立索引、如何更新、查询数据等</p><h3 id="1-1-查看存储引擎"><a href="#1-1-查看存储引擎" class="headerlink" title="1.1 查看存储引擎"></a>1.1 查看存储引擎</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/21/grJ8PRzH75Dm19L.png" alt="image-20220221221947688"></p><h3 id="1-2-查看与修改默认的存储引擎"><a href="#1-2-查看与修改默认的存储引擎" class="headerlink" title="1.2 查看与修改默认的存储引擎"></a>1.2 查看与修改默认的存储引擎</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%storage_engine%&#x27;;</span><br><span class="line">#或</span><br><span class="line">SELECT @@default_storage_engine;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/21/NHUlKGfVgBJYTzX.png" alt="image-20220221222227324"></p><blockquote><p>默认的存储引擎是<code>InnoDB</code>,但可以通过下列语句修改</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET DEFAULT_STORAGE_ENGINE=MyISAM; # 无需重启服务</span><br><span class="line">default-storage-engine=MyISAM  # 修改配置文件（需要重启服务）</span><br></pre></td></tr></table></figure><h3 id="1-3-设置某一张表的存储引擎"><a href="#1-3-设置某一张表的存储引擎" class="headerlink" title="1.3 设置某一张表的存储引擎"></a>1.3 设置某一张表的存储引擎</h3><p><code>存储引擎是</code>负责对表中的数据进行提取和写入工作的，我们可以为 不同的表设置不同的<code>存储引擎</code> ，也就是说不同的表可以有不同的物理存储结构，不同的提取和写入方式。</p><h4 id="1-3-1-在创建表时指定引擎"><a href="#1-3-1-在创建表时指定引擎" class="headerlink" title="1.3.1 在创建表时指定引擎"></a>1.3.1 在创建表时指定引擎</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line"> 建表语句;</span><br><span class="line">) ENGINE = 存储引擎名称;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-3-2-修改某一张表的存储引擎"><a href="#1-3-2-修改某一张表的存储引擎" class="headerlink" title="1.3.2 修改某一张表的存储引擎"></a>1.3.2 修改某一张表的存储引擎</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ENGINE = 存储引擎名称;</span><br></pre></td></tr></table></figure><h2 id="1-4-存储引擎介绍"><a href="#1-4-存储引擎介绍" class="headerlink" title="1.4 存储引擎介绍"></a>1.4 存储引擎介绍</h2><h3 id="1-4-1-InnoDB引擎（事务性引擎）"><a href="#1-4-1-InnoDB引擎（事务性引擎）" class="headerlink" title="1.4.1 InnoDB引擎（事务性引擎）"></a>1.4.1 InnoDB引擎（事务性引擎）</h3><ul><li>除非有非常特别的原因，否则应该默认优先使用InnoDB引擎</li><li>它被设计用来处理大量 <strong>短期的事务</strong> ，可以确保事务的完整提交和回滚。</li><li>对比 <code>MyISAM</code>，<code>InnoDb</code>的写的处理效率差一些，并且会占用更多的磁盘空间来保证数据和索引</li><li><code>MyISAM</code>只缓存索引，不缓存真实数据；<code>InnoDB</code>既缓存索引，也缓存真实数据 </li></ul><h4 id="1-4-2-MyISAM引擎（非事务处理引擎）"><a href="#1-4-2-MyISAM引擎（非事务处理引擎）" class="headerlink" title="1.4.2 MyISAM引擎（非事务处理引擎）"></a>1.4.2 MyISAM引擎（非事务处理引擎）</h4><ul><li>是老版本的默认引擎</li><li>优点是速度快</li><li>应用场景是对事务完整性没有要求的<code>SELECT</code>和<code>INSERT</code>为主,一般以读业务为主</li></ul><h2 id="2-索引"><a href="#2-索引" class="headerlink" title="2. 索引"></a>2. 索引</h2><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。</p><p><code>索引</code>的本质：索引是数据结构。你可以简单理解为“排好序的快速查找数据结构”，满足特定查找算法。这些数据结构以某种方式指向数据， 这样就可以在这些数据结构的基础上实现 <code>高级查找算法</code>。</p><h3 id="2-1-索引的优点和缺点"><a href="#2-1-索引的优点和缺点" class="headerlink" title="2.1 索引的优点和缺点"></a>2.1 索引的优点和缺点</h3><p>优点：</p><ul><li>提高数据检索的效率，降低数据库的<code>IO</code>成本</li><li>通过创建唯一索引，可以保证数据库表中每一行数据的唯一性</li><li>对于有依赖关系的子表和父表进行联合查询时，可以提高查询速度</li></ul><p>缺点：</p><ul><li>创建和维护索引都要耗费时间，并且数据量越大，耗费的时间就越多</li><li>索引也会占据物理空间</li><li>索引可以大大提高查询速度，但会降低更新表的速度；当删除、修改表时，索引也要动态地修改</li></ul><h3 id="2-1-InnoDB的索引结构的推演"><a href="#2-1-InnoDB的索引结构的推演" class="headerlink" title="2.1 InnoDB的索引结构的推演"></a>2.1 InnoDB的索引结构的推演</h3><p>当表中的数据非常多时，就需要多个数据页来存储这些记录。于是查找某一条记录的步骤便分为</p><ul><li>定位到记录所在的页</li><li>从所在的页内查找相应的记录</li></ul><p>此时，如果没有索引，则不论是根据主键还是其他列查找，我们都不能快速定位到记录所在的页，只能沿着双向链表寻找，这是非常耗时的。</p><h4 id="2-1-1-记录的行格式"><a href="#2-1-1-记录的行格式" class="headerlink" title="2.1.1 记录的行格式"></a>2.1.1 记录的行格式</h4><p><img src="https://s2.loli.net/2022/02/22/yptcjFbK5rNQ8xk.png" alt="image-20220222083050236" style="zoom:25%;" /></p><p><code>record_type</code>：记录头信息的一项属性，表示记录的类型，<code>0</code>表示普通记录，<code>2</code>表示最小记录、<code>3</code>表示最大记录<br><code>next_record</code>：记录头信息的一项属性，表示下一条地址相对于本条记录的偏移地址量</p><h4 id="2-1-2-最基本的数据页模型"><a href="#2-1-2-最基本的数据页模型" class="headerlink" title="2.1.2 最基本的数据页模型"></a>2.1.2 最基本的数据页模型</h4><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220222083515742.png" alt="image-20220222083515742" style="zoom:25%;" /></p><h4 id="2-1-2简单的索引"><a href="#2-1-2简单的索引" class="headerlink" title="2.1.2简单的索引"></a>2.1.2简单的索引</h4><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220222084049694.png" alt="image-20220222084049694" style="zoom: 33%;" /></p><p>将某一页中的最小值和页号拿出来作为目录、</p><h4 id="2-1-3简单的索引的升级版"><a href="#2-1-3简单的索引的升级版" class="headerlink" title="2.1.3简单的索引的升级版"></a>2.1.3简单的索引的升级版</h4><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220222084733298.png" alt="image-20220222084733298" style="zoom: 33%;" /></p><p>将目录项页组成一个数据页，但注意区别，目录项的<code>record_type</code>的值是1，用来区别这是一条普通的记录，还是目录项记录。</p><h4 id="2-1-4-简单的索引的升级版的升级版"><a href="#2-1-4-简单的索引的升级版的升级版" class="headerlink" title="2.1.4 简单的索引的升级版的升级版"></a>2.1.4 简单的索引的升级版的升级版</h4><p><img src="https://s2.loli.net/2022/02/22/gkTK6Mt4EZixWm8.png" alt="image-20220222085524366" style="zoom: 33%;" /></p><p>如果表中的数据很多，则会产生很多的目录项，这些目录项也是不连续的，查找相率也比较低，所以设计了目录项的目录项</p><h4 id="2-1-5-B-树"><a href="#2-1-5-B-树" class="headerlink" title="2.1.5 B+树"></a>2.1.5 B+树</h4><p>不论是存放用户记录的数据页，还是存放目录项记录的数据页，我们都把它们存放到<code>B+树</code>这个数据结构中了，所以我们也称这些数据页为节点。从图中可以看出，我们的实际用户记录其实都存放在<code>B+树</code>的最底层的节点上，这些节点也被称为叶子节点，其余用来存放目录项的节点称为非叶子节点或者内节点，其中B+树最上边的那个节点也称为根节点。</p><p><code>B+树</code>的高度一般不会超过4层。因为高度越高，<code>IO</code>次数越多,并且记录条数急剧增长</p><h3 id="2-2-常见的索引的概念"><a href="#2-2-常见的索引的概念" class="headerlink" title="2.2 常见的索引的概念"></a>2.2 常见的索引的概念</h3><h4 id="2-2-1-聚簇索引"><a href="#2-2-1-聚簇索引" class="headerlink" title="2.2.1 聚簇索引"></a>2.2.1 聚簇索引</h4><p>聚簇索引并不是一种单独的索引类型，而是一种数据存储方式（<strong>所有的用户记录都存储在了叶子节点</strong>）。索引即数据，数据即索引</p><p>我们把具有这两种特性的<code>B+树</code>称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种簇索引并不需要我们在MysQL语句中显式的使用INDEX语句去创建,InnoDB存储引擎会自动的为我们创建聚索引。 </p><blockquote><p>在添加数据的过程中，聚簇索引就已经被添加了</p></blockquote><p>优点：</p><ul><li>数据访问更快，因为数据和索引都在同一棵<code>B+树</code>中</li><li>聚簇索引对主键的排序查找和范围查找速度更快</li><li>数据库不用从多个数据块中提取数据，所以节省了大量的<code>IO</code>操作</li></ul><p>缺点：</p><ul><li>插入速度严重依赖插入顺序，最好按照主键的顺序插入，否则严重影响性能</li><li>更新主键的代价很高</li><li>如果没有定义主键，<code>InnoDB</code>会选择非空的唯一索引代替。如果没有这样的索引，InnoDB会隐式的定义一个主键来作为聚簇索引</li></ul><h4 id="2-2-2-非聚簇索引（二级索引）"><a href="#2-2-2-非聚簇索引（二级索引）" class="headerlink" title="2.2.2 非聚簇索引（二级索引）"></a>2.2.2 非聚簇索引（二级索引）</h4><p>上边介绍的聚簇索引只能在搜索条件是主键值时才能发挥作用，因为<code>B+树</code>中的数据都是按照主键进行排序的。<br>我们可以多建几棵<code>B+树</code>，不同的<code>B+树中</code>的数据采用不同的排序规则。比方说我们用c2列的大小作为数据页、页中记录的排序规则，再建一棵B+树。</p><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220222092214156.png" alt="image-20220222092214156" style="zoom:33%;" /></p><blockquote><p>概念:回表<br>我们根据这个以c2列大小排序的B+树只能确定我们要查找记录的主键值，所以如果我们想根据c2列的值查找到<br>完整的用户记录的话;仍然需要到聚簇索引中再查一遍。这个过程称为回表。也就是根据c2列的值查询一条完整的<br>用户记录需要使用到2棵B+树!</p><p>聚簇索引只能有一个，二级索引可以有多个</p></blockquote><h4 id="2-2-3-联合索引"><a href="#2-2-3-联合索引" class="headerlink" title="2.2.3 联合索引"></a>2.2.3 联合索引</h4><p>先按照<code>c2</code>排序，再按照<code>c3</code>排序</p><p><img src="https://s2.loli.net/2022/02/22/26j9ZXSKUIRYTnk.png" alt="image-20220222092700727"></p><h5 id="2-2-4-自适应hash索引"><a href="#2-2-4-自适应hash索引" class="headerlink" title="2.2.4 自适应hash索引"></a>2.2.4 自适应hash索引</h5><p><code>InnoDB</code>本身不支持 Hash索引，但是提供自适应Hash索引(Adaptive Hash lndex)。什么情况下才会使用自适应Hash索引呢?如果某个数据经常被访问，当满足一定条件的时候，就会将这个数据页的地址存放到Hash表中。这样下次查询的时候，就可以直接找到这个页面的所在位置。这样让B+树也具备了Hash索引的优点。</p><h3 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h3><h4 id="2-3-1-根页面的位置万年不动"><a href="#2-3-1-根页面的位置万年不动" class="headerlink" title="2.3.1 根页面的位置万年不动"></a>2.3.1 根页面的位置万年不动</h4><p>这个过程特别注意的是:一个B+树索引的根节点自诞生之日起，便不会再移动。这样只要我们对某个表建立一个索引，那么它的根节点的页号便会被记录到某个地方，然后凡是InnoDB存储引擎需要用到这个索引的时候,都会从那个固定的地方取出根节点的页号，从而来访问这个索引。</p><h4 id="2-3-2-内节点中目录项记录的唯一性"><a href="#2-3-2-内节点中目录项记录的唯一性" class="headerlink" title="2.3.2 内节点中目录项记录的唯一性"></a>2.3.2 内节点中目录项记录的唯一性</h4><p><img src="https://s2.loli.net/2022/02/22/yB5Mm7OXvf3T4J9.png" alt="image-20220222101205810" style="zoom:33%;" /></p><p>当索引列都相同时，此时便不知道要往哪一棵子树上走。</p><blockquote><p>此时最好的办法是引入主键</p></blockquote><h4 id="2-3-3-一个页面至少存储2条记录"><a href="#2-3-3-一个页面至少存储2条记录" class="headerlink" title="2.3.3 一个页面至少存储2条记录"></a>2.3.3 一个页面至少存储2条记录</h4><p>至少要保证形成一个二叉树的结构</p><h3 id="2-4-MySQL数据结构选择的合理性"><a href="#2-4-MySQL数据结构选择的合理性" class="headerlink" title="2.4 MySQL数据结构选择的合理性"></a>2.4 MySQL数据结构选择的合理性</h3><p>从<code>MySQL</code>的角度讲，磁盘的<code>IO</code>操作对索引的使用效率至关重要。因为当数据量比较大时，数据库的索引一般都存纯在外部的磁盘上，不可能把整个索引全部加载到内存中。</p><h4 id="2-4-1-全表遍历"><a href="#2-4-1-全表遍历" class="headerlink" title="2.4.1 全表遍历"></a>2.4.1 全表遍历</h4><h4 id="2-4-2-哈希查找"><a href="#2-4-2-哈希查找" class="headerlink" title="2.4.2 哈希查找"></a>2.4.2 哈希查找</h4><ul><li>哈希索引不适合范围查找，而树是有序的特性，依然能保持高效率</li><li>哈希索引的存储是没有顺序的，当需要<code>order by</code>的情况下，还要重新排序</li><li>当某一列重复的值很多的时候，效率很低</li></ul><h2 id="3-事务"><a href="#3-事务" class="headerlink" title="3. 事务"></a>3. 事务</h2><h3 id="3-1-MySQL支持事务情况"><a href="#3-1-MySQL支持事务情况" class="headerlink" title="3.1 MySQL支持事务情况"></a>3.1 MySQL支持事务情况</h3><p><img src="https://s2.loli.net/2022/02/22/qdiIzrR9LWjQseK.png" alt="image-20220222103747968"></p><blockquote><p>在MySQL中，只有<code>InnoDB</code>支持事务</p></blockquote><h3 id="3-2、基本概念"><a href="#3-2、基本概念" class="headerlink" title="3.2、基本概念"></a>3.2、基本概念</h3><p><code>事务</code>：一组逻辑操作单元，使数据从一种状态变换到另一种状态。</p><p><code>事务处理</code>的原则：保证所有事务都作为 一个工作单元 来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交( commit )，那么这些修改就 永久 地保存下来；要么数据库管理系统将 放弃 所作的所有 修改 ，整个事务回滚( rollback )到最初状态。</p><h3 id="3-3-事务的ACID"><a href="#3-3-事务的ACID" class="headerlink" title="3.3 事务的ACID"></a>3.3 事务的ACID</h3><ul><li><p>原子性（atomicity）<br>原子性是指事务是 一个不可分割的工作单位，要么全部提交，要么全部失败回滚。</p></li><li><p>一致性（consistency）<br>可以理解为现实世界中的质量守恒</p></li><li><p>隔离型（isolation）<br>事务的隔离性是指一个事务的执行 不能被其他事务干扰 ，即一个事务内部的操作及使用的数据对 并发 的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p>持久性（durability）</p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是 <code>永久性的</code> ，接下来的其他操作和数据库故障不应该对其有任何影响。</p><p>持久性是通过 <code>事务日志</code> 来保证的。日志包括了 <code>重做日志</code> 和 <code>回滚日志</code> 。当我们通过事务对数据进行修改的时候，首先会将数据库的变化信息记录到重做日志中，然后再对数据库中对应的行进行修改。</p></li></ul><h3 id="3-4-事务的状态"><a href="#3-4-事务的状态" class="headerlink" title="3.4 事务的状态"></a>3.4 事务的状态</h3><p>我们现在知道 <code>事务</code>是一个抽象的概念，它其实对应着一个或多个数据库操作，MySQL根据这些操作所执行的不同阶段把 事务 大致划分成几个状态：</p><ul><li><p>活动的（active）<br>事务对应的数据库操作正在执行过程中时，我们就说该事务处在 活动的 状态。</p></li><li><p>部分提交的（partially committed）<br>当事务中的最后一个操作执行完成，但由于操作都在内存中执行，所造成的影响并 没有刷新到磁盘时，我们就说该事务处在 部分提交的 状态。</p></li><li><p>失败的（failed）<br>当事务处在 活动的 或者 部分提交的 状态时，可能遇到了某些错误（数据库自身的错误、操作系统错误或者直接断电等）而无法继续执行，或者人为的停止当前事务的执行，我们就说该事务处在 失败的 状态。</p></li><li><p>中止的（aborted）<br>如果事务执行了一部分而变为 失败的状态，那么就需要把已经修改的事务中的操作还原到事务执行前的状态。换句话说，就是要撤销失败事务对当前数据库造成的影响。我们把这个撤销的过程称之为回滚 。当 回滚 操作执行完毕时，也就是数据库恢复到了执行事务之前的状态，我们就说该事务处在了 中止的 状态。</p></li><li><p>提交的（committed）<br>当一个处在 部分提交的 状态的事务将修改过的数据都 同步到磁盘 上之后，我们就可以说该事务处在了 提交的 状态。</p></li></ul><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220222104214889.png" alt="image-20220222104214889" style="zoom:33%;" /></p><h3 id="3-5-使用事务"><a href="#3-5-使用事务" class="headerlink" title="3.5 使用事务"></a>3.5 使用事务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; BEGIN;</span><br><span class="line">#或者</span><br><span class="line">mysql&gt; START TRANSACTION;=</span><br></pre></td></tr></table></figure><p><code>START TRANSACTION</code>语句相较于 <code>BEGIN</code> 特别之处在于，后边能跟随几个 修饰符 ：</p><ul><li><code>READ ONLY</code>：标识当前事务是一个 只读事务 ，也就是属于该事务的数据库操作只能读取数据，而不能修改数据。</li><li><code>READ WRITE</code>：标识当前事务是一个 读写事务 ，也就是属于该事务的数据库操作既可以读取数据，也可以修改数据。</li><li><code>WITH CONSISTENT SNAPSHOT</code> ：启动一致性读。</li></ul><h3 id="3-6-事务的隔离级别"><a href="#3-6-事务的隔离级别" class="headerlink" title="3.6 事务的隔离级别"></a>3.6 事务的隔离级别</h3><p>隔离级别越高，数据的一致性越好，但并发性越弱</p><p><img src="https://img-blog.csdnimg.cn/746a97589258488bbf4662dc1c0c8253.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_5piM5Zac5qyi5ZCD6buE5qGD,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p><code>MySQL</code>的默认隔离级别为<code>REPEATABLE READ</code></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-存储引擎&quot;&gt;&lt;a href=&quot;#1-存储引擎&quot; class=&quot;headerlink&quot; title=&quot;1. 存储引擎&quot;&gt;&lt;/a&gt;1. 存储引擎&lt;/h2&gt;&lt;p&gt;&lt;code&gt;存储引擎&lt;/code&gt;代表了一个数据库如何存储数据、如何为存储的数据建立索引、如何更新、查询</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Day1-MySQL.变量—定义条件和处理程序-游标</title>
    <link href="https://michael-d-666.github.io/2022/02/21/Day1-MySQL/"/>
    <id>https://michael-d-666.github.io/2022/02/21/Day1-MySQL/</id>
    <published>2022-02-21T09:27:29.000Z</published>
    <updated>2022-02-21T11:47:05.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><p>MySQL中的变量分为两大类：系统变量和用户变量</p><h3 id="1-1-系统变量"><a href="#1-1-系统变量" class="headerlink" title="1.1  系统变量"></a>1.1  系统变量</h3><p>由系统定义，一般为配置文件中的默认值或者是编译MySQL时参数的默认值。</p><h4 id="1-1-1-系统变量的分类"><a href="#1-1-1-系统变量的分类" class="headerlink" title="1.1.1 系统变量的分类"></a>1.1.1 系统变量的分类</h4><p><code>系统变量</code>又分为全局变量（global）和会话变量（session）。</p><ul><li>全局变量修改之后对每个会话（连接）都起作用，但不能跨重启</li><li>会话变量只在一次连接中有效，在一次连接中对其修改不会影响它在另一个会话中的值。</li></ul><blockquote><p>但有些变量可能既是全局变量，也是会话变量，需要在修改的时候指明是哪一种。</p></blockquote><h4 id="1-1-2-查看系统变量"><a href="#1-1-2-查看系统变量" class="headerlink" title="1.1.2 查看系统变量"></a>1.1.2 查看系统变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#查看所有全局变量</span><br><span class="line">SHOW GLOBAL VARIABLES;</span><br><span class="line"></span><br><span class="line">#查看所有会话变量</span><br><span class="line">SHOW SESSION VARIABLES;</span><br><span class="line">SHOW VARIABLES;</span><br><span class="line"></span><br><span class="line">#查看满足条件的部分系统变量。</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#x27;%标识符%&#x27;;</span><br><span class="line"></span><br><span class="line">#查看满足条件的部分会话变量</span><br><span class="line">SHOW SESSION VARIABLES LIKE &#x27;%标识符%&#x27;;</span><br></pre></td></tr></table></figure><h4 id="1-1-3-修改系统变量"><a href="#1-1-3-修改系统变量" class="headerlink" title="1.1.3 修改系统变量"></a>1.1.3 修改系统变量</h4><ul><li>在MySQL配置文件中直接修改系统变脸的值（需要重启MySQL）</li><li>或者用 <strong>set</strong> 命令修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#为某个系统变量赋值</span><br><span class="line">#方式1：</span><br><span class="line">SET @@global.变量名=变量值; ## 两个@ 表示系统变量</span><br><span class="line">#方式2：</span><br><span class="line">SET GLOBAL 变量名=变量值;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#为某个会话变量赋值</span><br><span class="line">#方式1：</span><br><span class="line">SET @@session.变量名=变量值;</span><br><span class="line">#方式2：</span><br><span class="line">SET SESSION 变量名=变量值;</span><br></pre></td></tr></table></figure><h3 id="1-2用户变量"><a href="#1-2用户变量" class="headerlink" title="1.2用户变量"></a>1.2用户变量</h3><p><code>用户变量</code>是用户自己定义的变量。</p><h4 id="1-2-1-用户变量的分类"><a href="#1-2-1-用户变量的分类" class="headerlink" title="1.2.1 用户变量的分类"></a>1.2.1 用户变量的分类</h4><p>一般分为会话用户变量和局部变量。</p><ul><li>会话变量的作用范围也是一次连接</li><li>局部变量的作用范围只在 <strong>BEGIN</strong>和 <strong>END</strong> 语句块中有效</li></ul><h4 id="1-2-2-定义并查看用户变量"><a href="#1-2-2-定义并查看用户变量" class="headerlink" title="1.2.2 定义并查看用户变量"></a>1.2.2 定义并查看用户变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看会话用户变量</span><br><span class="line">SELECT @用户变量</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#定义局部变量</span><br><span class="line">DECLARE 变量名 类型 [default 值];  # 如果没有DEFAULT子句，初始值为NULL</span><br><span class="line"># 查看局部变量</span><br><span class="line">SELECT 局部变量名</span><br></pre></td></tr></table></figure><h4 id="1-2-3-修改用户变量"><a href="#1-2-3-修改用户变量" class="headerlink" title="1.2.3 修改用户变量"></a>1.2.3 修改用户变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#修改会话变量</span><br><span class="line">#方式1：“=”或“:=”</span><br><span class="line">SET @用户变量 = 值;</span><br><span class="line">SET @用户变量 := 值;</span><br><span class="line">#方式2：“:=” 或 INTO关键字</span><br><span class="line">SELECT @用户变量 := 表达式 [FROM 等子句];</span><br><span class="line">SELECT 表达式 INTO @用户变量  [FROM 等子句];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#修改局部变量</span><br><span class="line">#修改简单的局部变量</span><br><span class="line">SET 变量名=值;</span><br><span class="line">SET 变量名:=值;</span><br><span class="line"></span><br><span class="line">#将表中的字段值给局部变量</span><br><span class="line">SELECT 字段名或表达式 INTO 变量名 FROM 表;</span><br></pre></td></tr></table></figure><h2 id="2-定义条件与处理程序"><a href="#2-定义条件与处理程序" class="headerlink" title="2.  定义条件与处理程序"></a>2.  定义条件与处理程序</h2><p><code>定义条件</code>是事先定义程序执行过程中可能遇到的问题，<code>处理程序</code>定义了在遇到问题时应当采取的处理方式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能力，避免程序异常停止运行。</p><h3 id="2-1-案例解析"><a href="#2-1-案例解析" class="headerlink" title="2.1 案例解析"></a>2.1 案例解析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //  #告诉编译器遇到分号别停止，遇到//再停止</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE UpdateDataNoCondition()</span><br><span class="line">BEGIN</span><br><span class="line">SET @x = 1;</span><br><span class="line">UPDATE employees SET email = NULL WHERE last_name = &#x27;Abel&#x27;;</span><br><span class="line">SET @x = 2;</span><br><span class="line">UPDATE employees SET email = &#x27;aabbel&#x27; WHERE last_name = &#x27;Abel&#x27;;</span><br><span class="line">SET @x = 3;</span><br><span class="line">END //</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CALL UpdateDataNoCondition();</span><br><span class="line">ERROR 1048 (23000): Column &#x27;email&#x27; cannot be null</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @x;</span><br><span class="line">+------+</span><br><span class="line">| @x   |</span><br><span class="line">+------+</span><br><span class="line">|   1  |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><code>解释</code>：当存储过程抛出一场之后，之后的操作就没有继续进行，所以值仍然为1</p><h4 id="2-1-1-定义条件"><a href="#2-1-1-定义条件" class="headerlink" title="2.1.1 定义条件"></a>2.1.1 定义条件</h4><p>定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个<code>错误名字</code>和<code>指定的错误条件</code>关联起来。</p><h4 id="2-1-2-语法格式"><a href="#2-1-2-语法格式" class="headerlink" title="2.1.2  语法格式"></a>2.1.2  语法格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DECLARE 错误名称 CONDITION FOR 错误码（或错误条件）</span><br><span class="line"># DECLARE Field_Not_Be_NULL CONDITION FOR 1048;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-处理程序"><a href="#2-2-1-处理程序" class="headerlink" title="2.2.1 处理程序"></a>2.2.1 处理程序</h4><p>可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。</p><h4 id="2-2-2-定义处理程序"><a href="#2-2-2-定义处理程序" class="headerlink" title="2.2.2 定义处理程序"></a>2.2.2 定义处理程序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE 处理方式 HANDLER FOR 错误类型 处理语句</span><br></pre></td></tr></table></figure><ul><li>处理方式：处理方式有3个取值：CONTINUE、EXIT、UNDO。<br><code>CONTINUE</code>：表示遇到错误不处理，继续执行。<br><code>EXIT</code>：表示遇到错误马上退出。<br><code>UNDO</code>：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。</li><li>错误类型（即条件）可以有如下取值：<br><code>SQLSTATE &#39;字符串错误码&#39;</code>：表示长度为5的sqlstate_value类型的错误代码；<br><code>MySQL_error_code</code>  ：匹配数值类型错误代码；<br><code>错误名称</code>：表示DECLARE … CONDITION定义的错误条件名称。<br><code>SQLWARNING</code>：匹配所有以01开头的SQLSTATE错误代码；<br><code>NOT FOUND</code>：匹配所有以02开头的SQLSTATE错误代码；<br><code>SQLEXCEPTION</code>：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；</li><li>处理语句：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是像“SET 变量 = 值”这样的简单语句，也可以是使用BEGIN … END编写的复合语句。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#方法1：捕获sqlstate_value</span><br><span class="line">DECLARE CONTINUE HANDLER FOR SQLSTATE &#x27;42S02&#x27; SET @info = &#x27;NO_SUCH_TABLE&#x27;;</span><br><span class="line"></span><br><span class="line">#方法2：捕获mysql_error_value</span><br><span class="line">DECLARE CONTINUE HANDLER FOR 1146 SET @info = &#x27;NO_SUCH_TABLE&#x27;;</span><br><span class="line"></span><br><span class="line">#方法3：先定义条件，再调用</span><br><span class="line">DECLARE no_such_table CONDITION FOR 1146;</span><br><span class="line">DECLARE CONTINUE HANDLER FOR NO_SUCH_TABLE SET @info = &#x27;NO_SUCH_TABLE&#x27;;</span><br><span class="line"></span><br><span class="line">#方法4：使用SQLWARNING</span><br><span class="line">DECLARE EXIT HANDLER FOR SQLWARNING SET @info = &#x27;ERROR&#x27;;</span><br><span class="line"></span><br><span class="line">#方法5：使用NOT FOUND</span><br><span class="line">DECLARE EXIT HANDLER FOR NOT FOUND SET @info = &#x27;NO_SUCH_TABLE&#x27;;</span><br><span class="line"></span><br><span class="line">#方法6：使用SQLEXCEPTION</span><br><span class="line">DECLARE EXIT HANDLER FOR SQLEXCEPTION SET @info = &#x27;ERROR&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-游标"><a href="#3-游标" class="headerlink" title="3. 游标"></a>3. 游标</h2><p>虽然我们也可以通过筛选条件 <code>WHERE</code>和 <code>HAVING</code>，或者是限定返回记录的关键字 <code>LIMIT</code>返回一条记录，但是，却无法在结果集中像指针一样，向前定位一条记录、向后定位一条记录，或者是随意定位到某一条记录，并对记录的数据进行处理。</p><p>这个时候，就可以用到游标。游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作的数据结构。</p><h3 id="3-1-使用步骤"><a href="#3-1-使用步骤" class="headerlink" title="3.1 使用步骤"></a>3.1 使用步骤</h3><h4 id="3-1-1-声明游标"><a href="#3-1-1-声明游标" class="headerlink" title="3.1.1 声明游标"></a>3.1.1 声明游标</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DECLARE cursor_name CURSOR FOR select_statement; </span><br><span class="line"># DECLARE cur_emp CURSOR FOR SELECT employee_id,salary FROM employees;</span><br></pre></td></tr></table></figure><blockquote><p>因为游标的作用对象是结果集，所以要包含SELECT查询语句</p></blockquote><h4 id="3-1-2-打开游标"><a href="#3-1-2-打开游标" class="headerlink" title="3.1.2 打开游标"></a>3.1.2 打开游标</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OPEN cursor_name</span><br><span class="line">#OPEN　cur_emp ;</span><br></pre></td></tr></table></figure><h4 id="3-1-3-使用游标"><a href="#3-1-3-使用游标" class="headerlink" title="3.1.3 使用游标"></a>3.1.3 使用游标</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FETCH cursor_name INTO var_name [, var_name] ...</span><br><span class="line"># FETCH　cur_emp INTO emp_id, emp_sal ;</span><br></pre></td></tr></table></figure><p>用 <code>cursor_name</code>这个游标来读取当前行，并将数据保存到<code>var_name</code>这个变量中，游标指向下一行</p><h4 id="3-1-4-关闭游标"><a href="#3-1-4-关闭游标" class="headerlink" title="3.1.4 关闭游标"></a>3.1.4 关闭游标</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLOSE cursor_name</span><br></pre></td></tr></table></figure><blockquote><p>游标会占用系统资源，如果不及时关闭，会一直保持到存储工程解释</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-变量&quot;&gt;&lt;a href=&quot;#1-变量&quot; class=&quot;headerlink&quot; title=&quot;1. 变量&quot;&gt;&lt;/a&gt;1. 变量&lt;/h2&gt;&lt;p&gt;MySQL中的变量分为两大类：系统变量和用户变量&lt;/p&gt;
&lt;h3 id=&quot;1-1-系统变量&quot;&gt;&lt;a href=&quot;#1-1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu中下载的软件位置</title>
    <link href="https://michael-d-666.github.io/2022/02/15/Ubuntu%E4%B8%AD%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%BD%8D%E7%BD%AE/"/>
    <id>https://michael-d-666.github.io/2022/02/15/Ubuntu%E4%B8%AD%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%BD%8D%E7%BD%AE/</id>
    <published>2022-02-15T12:58:23.000Z</published>
    <updated>2022-02-16T02:53:08.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近买了个阿里云的服务器，想捣鼓捣鼓ubuntu中的一些东西。弄着弄着发现自己只会<strong>sudo apt-get</strong>，其他啥都不知道，于是决定研究一下这一个句子背后代表了什么.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>apt-get（Advanced Package Tool）</strong>，是一款应用程序管理程序。能出色地解决软件之间的依赖问题。它会自动寻找并安装依赖，因此基本不会出现文件缺失或者严重的bug。与windows不一样的是，apt安装的软件一般分开在多个目录172.</p><p>有时候需要配置ubuntu安装的软件，一般安装软件都是使用apt-get install。那么安装完后，软件的安装目录在哪里呢，可执行文件又放在哪里呢。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">下载的软件的存放位置：/var/cache/apt/archives</span><br><span class="line">安装后软件的默认位置：/usr/share</span><br><span class="line">可执行文件位置：/usr/bin</span><br><span class="line">配置文件位置：/etc</span><br><span class="line">lib文件位置：/usr/lib</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近买了个阿里云的服务器，想捣鼓捣鼓ubuntu中的一些东西。弄着弄着发现自己只会&lt;strong&gt;sudo apt-get&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java源码</title>
    <link href="https://michael-d-666.github.io/2022/02/11/Java%E6%BA%90%E7%A0%81/"/>
    <id>https://michael-d-666.github.io/2022/02/11/Java%E6%BA%90%E7%A0%81/</id>
    <published>2022-02-11T04:37:22.000Z</published>
    <updated>2022-02-12T02:24:42.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList源码"><a href="#ArrayList源码" class="headerlink" title="ArrayList源码"></a>ArrayList源码</h2><h3 id="继承变量"><a href="#继承变量" class="headerlink" title="继承变量"></a>继承变量</h3><p><img src="https://s2.loli.net/2022/02/11/NVOmpwBruv7JERC.png" alt="image-20220211135354197"></p><blockquote><p>作用：保证线程安全。我们知道 java.util.HashMap 不是线程安全的，因此如果在使用迭代器的过程中有其他线程修改了map，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。这一策略在源码中的实现是通过 modCount 域，modCount 顾名思义就是修改次数，对HashMap 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。在迭代过程中，判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 Map：注意到 modCount 声明为 volatile，保证线程之间修改的可见性。</p></blockquote><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p><img src="https://s2.loli.net/2022/02/11/ObSgZxtq3rCHsoL.png" alt="image-20220211130203819"></p><blockquote><p>SerialVersionUID：因为ArrayList实现了可序列化接口，所以指定了ID，以免计算<br>DEFAULT_CAPACITY：默认容量是10<br>EMPTY_ELEMENTDATA：代表一个真正的空数组，容量为0，实际size也为0<br>DEFAULTCAPACITY_EMPTY_ELEMENTDATA：是一个空数组，但容量初始默认为10，但不是初始化的时候为10，而是第一次add才变为10<br>elementData：ArrayList的缓冲区<br>size：ArrayList的空间大小</p></blockquote><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p><img src="https://s2.loli.net/2022/02/11/zIXPkmxiytnR2HU.png" alt="image-20220211125439429"></p><blockquote><p>三个构造函数，注意第一个的第二种情况，初始化了一个真正容量为0，size也为0的数组：EMPTY_ELEMENTDATA</p></blockquote><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><p><img src="https://s2.loli.net/2022/02/11/G1hnvTQAxubEfNg.png" alt="image-20220211130634873"></p><blockquote><p>当调用add方法时，判断是否需要扩容，调用<strong>grow()</strong>方法扩容</p></blockquote><p><img src="https://s2.loli.net/2022/02/11/vSfCkED4wmiTnM3.png" alt="image-20220211132622582"></p><blockquote><p>调用<strong>grow()</strong>后，如果原来不是真正的空数组，则初始化至少为10。如果原来已经有容量，则扩容为约1.5倍（右移一位相当于0.5）</p></blockquote><p><img src="https://s2.loli.net/2022/02/11/aGbO1q97tfE6rWe.png" alt="image-20220211134239026"></p><blockquote><p>立刻将容量调整为指定大小，而不是每次判断扩容</p></blockquote><p><img src="https://s2.loli.net/2022/02/11/QxvZRpVDwFGUuYj.png" alt="image-20220211134632788"></p><blockquote><p>判断是否包含某一元素，是看调用<strong>indexof()</strong>返回的下标是否大于等于0。而<strong>indexof()</strong>底层也是通过for循环遍历</p></blockquote><h2 id="HashMap源码"><a href="#HashMap源码" class="headerlink" title="HashMap源码"></a>HashMap源码</h2><p><img src="https://s2.loli.net/2022/02/12/4IQp9btjDdy5xFT.png" alt="image-20220212094341756"></p><h3 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a>成员变量</h3><p><img src="https://s2.loli.net/2022/02/11/gitLfkoq9nGwsDp.png" alt="image-20220211154834693"></p><blockquote><p>DEFAULT_INITIAL_CAPACITY：默认容量，太小容易触发扩容。太大遍历哈希表会较慢<br>TREEIFY_THRESHOLD：链表转化为红黑树的阈值（一个node节点下的值得个数大于8）<br>UNTREEIFY_THRESHOLD：红黑树退回链表的阈值（单个node节点下的值的个数小于6）<br>MIN_TREEITY_CAPACITY：转化为树前，还要进行一次键值对的数量判断（所有节点总共的值超过64个 ）</p><p>HashMap 的默认初始容量（capacity）是 16，capacity 必须为 2 的幂次方；默认负载因子（load factor）是 0.75；实际能存放的节点个数（threshold，即触发扩容的阈值）= capacity * load factor。</p></blockquote><h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h3><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220211164856372.png" alt="image-20220211164856372"></p><h3 id="成员函数-1"><a href="#成员函数-1" class="headerlink" title="成员函数"></a>成员函数</h3><p><img src="https://s2.loli.net/2022/02/11/7sVFCeiYQODpbKz.png" alt="image-20220211165820842"></p><blockquote><p>找到大于等于cap的最小的2的幂</p></blockquote><p><img src="https://s2.loli.net/2022/02/12/KoPsif7jlATg6zx.png" alt="image-20220212101036270"></p><p><img src="https://s2.loli.net/2022/02/12/seL5dak9lPzgTXf.png" alt="image-20220212101325090"></p><blockquote><p>用于定位哈希桶数组。<br>首先得到key的hashcode，再和hashcode 的高16位进行异或操作，作为key的新的hash值<br>最后将hash和table的长度-1相与，得到最后的存放的位置</p><p>使用&amp;运算是来代替%运算的。相比而言，&amp;运算更加高效<br><img src="https://s2.loli.net/2022/02/12/bxU2HFzEjlgprXv.png" alt="image-20220212101909067" style="zoom:33%;" /></p><p>HashMap 在触发扩容后，阈值会变为原来的 2 倍，并且会对所有节点进行重 hash 分布，重 hash 分布后节点的新分布位置只可能有两个：“原索引位置” 或 “原索引+oldCap位置”。例如 capacity 为16，索引位置 5 的节点扩容后，只可能分布在新表 “索引位置5” 和 “索引位置21（5+16）”。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ArrayList源码&quot;&gt;&lt;a href=&quot;#ArrayList源码&quot; class=&quot;headerlink&quot; title=&quot;ArrayList源码&quot;&gt;&lt;/a&gt;ArrayList源码&lt;/h2&gt;&lt;h3 id=&quot;继承变量&quot;&gt;&lt;a href=&quot;#继承变量&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot入门</title>
    <link href="https://michael-d-666.github.io/2022/02/03/SpringBoot%E5%85%A5%E9%97%A8/"/>
    <id>https://michael-d-666.github.io/2022/02/03/SpringBoot%E5%85%A5%E9%97%A8/</id>
    <published>2022-02-03T01:31:31.000Z</published>
    <updated>2022-02-07T01:51:33.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot核心技术"><a href="#SpringBoot核心技术" class="headerlink" title="SpringBoot核心技术"></a>SpringBoot核心技术</h1><p><img src="https://s2.loli.net/2022/02/03/ueYzEi69PpKBgN4.png" alt="image-20220203093255976" style="zoom: 33%;" /></p><h2 id="创建一个SpringBoot程序"><a href="#创建一个SpringBoot程序" class="headerlink" title="创建一个SpringBoot程序"></a>创建一个SpringBoot程序</h2><ol><li><p>创建一个Maven项目<br><img src="https://s2.loli.net/2022/02/03/C8AYHKlX27JvFsx.png" alt="image-20220203103200673"></p></li><li><p>在 <em>pom.xml</em> 中添加依赖<br><img src="https://s2.loli.net/2022/02/03/dYUzv8pLqVJEKhM.png" alt="image-20220203103256362"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent 作用：管理所有的依赖，子项目的版本继承父项目的版本，所以子项目不再需要version。常见的jar包父项目中几乎都有响应的版本</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/07/dp19ViLbPjCNuf8.png" alt="image-20220207095121665"></p><p>如果对它提供的版本不满意，也可以在 <em>pom.xml</em> 中修改<br><img src="https://s2.loli.net/2022/02/03/P8yxurVt6ZKw5vJ.png" alt="image-20220203105516040"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">官方的Starter-XX都对应了相应场景所有的jar包，如starter-web就包含了web开发的几乎所有的jar包</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>创建 主类<br><img src="https://s2.loli.net/2022/02/03/6aOEk2H1CBhUIsg.png" alt="image-20220203103326319"></p></li><li><p>创建一个控制器<br><img src="https://s2.loli.net/2022/02/03/ORE7DCZzomILsB6.png" alt="image-20220203103856119"></p><blockquote><p>注意，要在主程序的包或其子包中才能被组件扫描到<br><img src="https://s2.loli.net/2022/02/03/ltcio2xeQIm18VL.png" alt="image-20220203152729118"></p><p>也可以加个注解，扩大组件扫描的范围</p></blockquote></li><li><p>直接启动main方法（不用再配置Tomcat服务器），并访问日志中 的默认端口<br><img src="https://s2.loli.net/2022/02/03/oM5FUgKAlj7vtwV.png" alt="image-20220203104014198"></p></li><li><p>修改默认配置<br><img src="https://s2.loli.net/2022/02/03/hpYmKsC2n47Zrld.png" alt="image-20220203104233278"></p></li></ol><h2 id="底层注解"><a href="#底层注解" class="headerlink" title="底层注解"></a>底层注解</h2><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p><img src="https://s2.loli.net/2022/02/06/J3aowtyGQqMszAF.png" alt="image-20220206210822949" style="zoom:33%;" /></p><blockquote><p>告诉Spring 这个类的所有方法返回的字符串直接返回给读者，而不是解析为模板</p></blockquote><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p><img src="https://s2.loli.net/2022/02/03/Qgp3UCY1GWMv8KD.png" alt="image-20220203161718485"></p><blockquote><p>@configuration告诉Spring这是一个配置类，@Bean 注册组件，默认是单例模式</p><p>当 <em>proxyBeanMethods</em> 为True时，外部每次调用 <em>user01</em> 方法，都会在容器中检查是否已经存在。存在，则返回这个实例。</p><p>当 <em>proxyBeanMethods</em> 为 false时，每次调用，都会产生一个新的实例</p></blockquote><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><blockquote><p>满足一定条件下再进行组件注入</p></blockquote><p><img src="https://s2.loli.net/2022/02/03/QYOGzfMnkBWAVIc.png" alt="image-20220203182630201"></p><blockquote><p>当有<em>tom</em>这个组件后，才注册<em>user01</em></p></blockquote><h3 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h3><p><img src="https://s2.loli.net/2022/02/03/luX9TAaMRBWpbwg.png" alt="image-20220203183210652"></p><blockquote><p>用于导入XML等配置文件，可以对老式配置进行维护</p></blockquote><h3 id="ConfigurationPropertier-prefix-”mycar”"><a href="#ConfigurationPropertier-prefix-”mycar”" class="headerlink" title="@ConfigurationPropertier(prefix=”mycar”)"></a>@ConfigurationPropertier(prefix=”mycar”)</h3><p><img src="https://s2.loli.net/2022/02/03/QYGazDimkIROfyc.png" alt="image-20220203183802045" style="zoom:33%;" /></p><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220203183828797.png" alt="image-20220203183828797" style="zoom:33%;" /></p><blockquote><p>将JavaBean和配置文件中定义的数据绑定（prefix表示配置文件中的前缀）</p></blockquote><h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h3><blockquote><p>里面包含了三个注解<br>@SpringBootConfiguration表示是个SpringBoot的核心配置类<br>@CopmnentScan指定了组件扫描范围</p></blockquote><p><img src="https://s2.loli.net/2022/02/04/PnFO3RftrGbEAqJ.png" alt="image-20220204132215315"></p><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>如下所示</p><p><img src="https://s2.loli.net/2022/02/04/GJ1ex4ZnK2FUuts.png" alt="image-20220204132610471"></p><h5 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h5><p>如下所示，利用Registrar给容器中导入一系列组件</p><p><img src="https://s2.loli.net/2022/02/04/cOvAeqKHfzThYpa.png" alt="image-20220204132743256"></p><h6 id="Registrar"><a href="#Registrar" class="headerlink" title="Registrar"></a>Registrar</h6><p>如下所示，getPackageNames就能获取到当前类的包名，所以@SpringBootConfiguration可以将主类同包下的所有组件导入</p><p><img src="https://s2.loli.net/2022/02/04/Qr5ASXoJCBz7xif.png" alt="image-20220204133138132"></p><h5 id="AutoConfigurationImportselector"><a href="#AutoConfigurationImportselector" class="headerlink" title="@AutoConfigurationImportselector"></a>@AutoConfigurationImportselector</h5><p><img src="https://s2.loli.net/2022/02/04/bjSuVwOTdXEWnYZ.png" alt="image-20220204134226917" style="zoom: 25%;" /></p><blockquote><p>会调用getAutoConfigurationEntry批量导入配置，并去除一些重复的配置</p></blockquote><h2 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h2><h3 id="开启debug模式"><a href="#开启debug模式" class="headerlink" title="开启debug模式"></a>开启debug模式</h3><p><img src="https://s2.loli.net/2022/02/04/kBw4hblJigouaZy.png" alt="image-20220204135250177" style="zoom:33%;" /></p><blockquote><p>当开启debug之后，SpringBoot会告诉你哪些配置类开启，哪些没开启</p></blockquote><h3 id="静态资源规则"><a href="#静态资源规则" class="headerlink" title="静态资源规则"></a>静态资源规则</h3><p><img src="https://s2.loli.net/2022/02/05/87aLWeObiAV4JkQ.png" alt="image-20220205091336395"></p><blockquote><p>在resources目录下的这几个文件夹中都可以放静态资源，但若此时有个相同的请求名，此时动态请求优先级更高。一般先回去Controller中找，再去静态资源目录中去找</p></blockquote><p><img src="https://s2.loli.net/2022/02/05/QlZdgOKqIWVfpYt.png" alt="image-20220205091618974"></p><blockquote><p>默认静态资源前不需要访问前缀，但为了区分静态资源，可以在yaml中设置访问的前缀，如下所示，只能通过 localhost:8080/res/bug.jpg 访问。</p></blockquote><p><img src="https://s2.loli.net/2022/02/05/clEpsyMGrku9Sw2.png" alt="image-20220205093323622"></p><blockquote><p>也可以指定存放静态资源的位置（默认只能是/static 、/public 的几个）</p></blockquote><p><img src="https://s2.loli.net/2022/02/05/OHxQLd3RwPsaXpo.png" alt="image-20220205093734393"></p><h3 id="欢迎页面的编写"><a href="#欢迎页面的编写" class="headerlink" title="欢迎页面的编写"></a>欢迎页面的编写</h3><blockquote><p>在静态资源文件目录下编写 index.html</p></blockquote><p><img src="https://s2.loli.net/2022/02/05/VQnY5eAGIHErKb6.png" alt="image-20220205094638535"></p><h3 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h3><blockquote><p>只要把网站图标放到静态资源目录下就行，但名称要匹配</p></blockquote><p><img src="https://s2.loli.net/2022/02/05/z4to5PqZESsRQCy.png" alt="image-20220205095243995"></p><h3 id="防止登陆表单重复提交"><a href="#防止登陆表单重复提交" class="headerlink" title="防止登陆表单重复提交"></a>防止登陆表单重复提交</h3><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220206102926610.png" alt="image-20220206102926610"></p><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><h4 id="Pathvariable"><a href="#Pathvariable" class="headerlink" title="@Pathvariable"></a>@Pathvariable</h4><blockquote><p>用于匹配路径参数</p></blockquote><p><img src="https://s2.loli.net/2022/02/05/bYNFifslRuwc7OJ.png" alt="image-20220205100730922"></p><p><img src="https://s2.loli.net/2022/02/05/lPSphFX4NoTKVtn.png" alt="image-20220205100748589"></p><h4 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h4><blockquote><p>用于找到请求头</p></blockquote><p><img src="https://s2.loli.net/2022/02/05/OUBQ2yt9IjirS5N.png" alt="image-20220205101627709"></p><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@ RequestParam"></a>@ RequestParam</h3><blockquote><p>用于获取附带的参数</p></blockquote><p><img src="https://s2.loli.net/2022/02/05/iXM7JDHuwvV58Io.png" alt="image-20220205102154400"></p><h4 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h4><blockquote><p>获取cookie的值</p></blockquote><p><img src="https://s2.loli.net/2022/02/05/1lYzU9hGaWCgwrO.png" alt="image-20220205102528173"></p><h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><blockquote><p>快速获取请求体中的内容</p></blockquote><p><img src="https://s2.loli.net/2022/02/05/P4zwOoJVdqT3k6c.png" alt="image-20220205102918931"></p><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p><img src="https://s2.loli.net/2022/02/06/PeQzaxpmJoNk4jb.png" alt="image-20220206112410170"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot核心技术&quot;&gt;&lt;a href=&quot;#SpringBoot核心技术&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot核心技术&quot;&gt;&lt;/a&gt;SpringBoot核心技术&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简单的c#基本知识</title>
    <link href="https://michael-d-666.github.io/2021/12/21/%E7%AE%80%E5%8D%95%E7%9A%84c-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>https://michael-d-666.github.io/2021/12/21/%E7%AE%80%E5%8D%95%E7%9A%84c-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</id>
    <published>2021-12-21T04:04:56.000Z</published>
    <updated>2021-12-21T05:00:58.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-基本知识"><a href="#C-基本知识" class="headerlink" title="C#基本知识"></a>C#基本知识</h2><h3 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C#数据类型"></a>C#数据类型</h3><p><img src="https://s2.loli.net/2021/12/21/cHpzXjNFB1C3sAy.png" alt="image-20211221121503428"></p><blockquote><p>注意它们都是Object类型，都能使用Tostring()方法，都能用于字符串的拼接（+）</p><p>boolean 数据类型只能取true或false，不可以用0或非0的整数来代替。</p><p>字符串之前可以使用@来使引号中的字符串不进行转义</p><p>C#中数组在初始化时不能指定其长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//一维数组</span><br><span class="line">int a[5]; //非法</span><br><span class="line">int []a = new int [3] &#123;3,9,8&#125;; //正确</span><br><span class="line">int []a=&#123;3,9,8&#125; //正确</span><br><span class="line">---</span><br><span class="line">//多维数组</span><br><span class="line">int [,]a=&#123;&#123;1,2&#125;,&#123;3,4,0&#125;,&#123;5,6,7&#125;&#125;</span><br><span class="line">a.GetLength(0)//获取第0行的长度</span><br><span class="line">---</span><br><span class="line">//不规则数组</span><br><span class="line">int [][] t=new int [2][];</span><br><span class="line">t[0]=new int[2];//第0行长度为2</span><br><span class="line">t[1]=new int[3];//第1行长度为3；</span><br></pre></td></tr></table></figure></blockquote><h3 id="三种基本流程"><a href="#三种基本流程" class="headerlink" title="三种基本流程"></a>三种基本流程</h3><p><strong>顺序</strong><br><strong>分支</strong><br><strong>循环</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C-基本知识&quot;&gt;&lt;a href=&quot;#C-基本知识&quot; class=&quot;headerlink&quot; title=&quot;C#基本知识&quot;&gt;&lt;/a&gt;C#基本知识&lt;/h2&gt;&lt;h3 id=&quot;C-数据类型&quot;&gt;&lt;a href=&quot;#C-数据类型&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="大三课程" scheme="https://michael-d-666.github.io/tags/%E5%A4%A7%E4%B8%89%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>有点来不及的J2EE</title>
    <link href="https://michael-d-666.github.io/2021/12/17/%E6%9C%89%E7%82%B9%E6%9D%A5%E4%B8%8D%E5%8F%8A%E7%9A%84J2EE/"/>
    <id>https://michael-d-666.github.io/2021/12/17/%E6%9C%89%E7%82%B9%E6%9D%A5%E4%B8%8D%E5%8F%8A%E7%9A%84J2EE/</id>
    <published>2021-12-17T14:17:40.000Z</published>
    <updated>2021-12-23T02:11:47.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring整合mybatis"><a href="#Spring整合mybatis" class="headerlink" title="Spring整合mybatis"></a>Spring整合mybatis</h2><p>1、实现MyBatis与Spring的整合，需要导入相关JAR包，包括MyBatis、Spring以及其他JAR包：<br>        1）MyBatis框架所需的JAR包；<br>        2）Spring框架所需的JAR包；<br>        3）MyBatis与Spring整合的中间JAR包；<br>        4）数据库驱动JAR包；<br>        5）数据源所需的JAR包。</p><p>2、在Spring中配置MyBatis工厂。</p><p>3、使用Spring管理MyBatis的数据操作接口。</p><p><strong>mybatis-config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;</span>&lt;! DOCTYPE configuration</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--告诉MyBatis到哪里去找映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/mybatis/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>UserDao.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dao;</span><br><span class="line"><span class="keyword">import</span> java.util .List;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> com.po.MyUser;</span><br><span class="line"><span class="meta">@Repository</span> (<span class="string">&quot;userDao&quot;</span>)  <span class="comment">//跟后面的autowire配合</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="comment">/*使用Spring自动扫描MyBatis的接口并装配</span></span><br><span class="line"><span class="comment">(Spring将指定包中所有被eMapper 注解标注的接口自动装配为MyBatis的映射接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*接口方法对应SQL映射文件UserMapper.xml中的id*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyUser <span class="title">selectUserById</span><span class="params">(Integer uid)</span> </span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;MyUser&gt;selectAl10ser();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(MyUser user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span> <span class="params">(MyUser user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>SQL映射文件</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;</span>&lt;! DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据uid查询一个用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.po.MyUser&quot;</span>&gt;</span></span><br><span class="line">select* from user where uid= #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--查询所有用户信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.po.MyUser&quot;</span>&gt;</span></span><br><span class="line">select* from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加一个用户，#&#123;uname&#125;为 com.po.MyUser的属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.po.MyUser&quot;</span>&gt;</span></span><br><span class="line">insert into user (uname,usex) values(#&#123;uname&#125;,#&#123;usex&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--修改一个用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.po.MyUser&quot;</span>&gt;</span></span><br><span class="line">update user set uname = # &#123;uname) ,usex = #&#123;usex) where uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--删除一个用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>= <span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">delete from user where uid =#&#123;uid&#125;</span><br><span class="line">&lt;/ delete&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>UserController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.controller;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> com.dao.UserDao;<span class="keyword">import</span> com.po.MyUser;</span><br><span class="line"><span class="meta">@Controller</span> (<span class="string">&quot;usercontroller&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Usercontroller</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//查询一个用户</span></span><br><span class="line">MyUser auser=userDao.selectUserById(<span class="number">1</span>);</span><br><span class="line">         System.out.println(auser);</span><br><span class="line">System.out.println (<span class="string">&quot;===============&quot;</span>);<span class="comment">//添加一个用户</span></span><br><span class="line">MyUser addmu=<span class="keyword">new</span> MyUser</span><br><span class="line">         addmu.setUname(<span class="string">&quot;陈恒&quot;</span>)</span><br><span class="line">addmu .setUsex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> add-userDao.addUser (addmu);</span><br><span class="line">System.out.println(<span class="string">&quot;添加了&quot;</span>+add+<span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">         System.out.println ( <span class="string">&quot;================&quot;</span>);</span><br><span class="line"><span class="comment">//修改一个用户</span></span><br><span class="line">MyUser updatemu=<span class="keyword">new</span> MyUser(o;updatemu.setUid(<span class="number">1</span>);</span><br><span class="line">updatemu .setUname(<span class="string">&quot;张三&quot;</span>);updatemu.setUsex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> up=userDao.updateUser (updatemu);</span><br><span class="line">System.out.println(<span class="string">&quot;修改了&quot;</span>+up +<span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">         System.out.println( <span class="string">&quot;==========&quot;</span>);<span class="comment">//删除一个用户</span></span><br><span class="line"><span class="keyword">int</span> dl=userDao.deleteUser(<span class="number">9</span>);</span><br><span class="line">System.out.println(删除了<span class="string">&quot;+dl+&quot;</span>条记录<span class="string">&quot;);System.out.println( &quot;</span>===<span class="string">&quot;);</span></span><br><span class="line"><span class="string">//查询所有用户</span></span><br><span class="line"><span class="string">List&lt;MyUser&gt; list-userDao.selectAl1User();</span></span><br><span class="line"><span class="string">         for (MyUser myUser : list) &#123;</span></span><br><span class="line"><span class="string">System.out.println (myUser);</span></span><br><span class="line"><span class="string">         &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><blockquote><p>问：在MVC框架中，为什么要进行类型转换</p></blockquote><p>答：在MVC框架中，需要收集用户请求参数，并将请求参数传递给应用的控制器组件。此时存在一个问题，所有的请求参数类型只能是字符串数据类型，但Java是强类型语言，所以，MVC框架必须将这些字符串请求参数转换成相应的数据类型。</p><blockquote><p>问：Converter与Formatter的区别是什么？</p></blockquote><p>答：Spring MVC框架的Formatter\<T\>与Converter\<S, T\>一样，也是一个可以将一种数据类型转换成另一种数据类型的接口。但不同的是，Formatter\<T\>的源数据类型必须是String类型，而Converter\<S, T\>的源数据类型是任意数据类型。在Web应用中，由HTTP发送的请求数据到控制器中都是以String类型获取。因此，在Web应用中选择Formatter\<T\>比选择Converter\<S, T\>更加合理。</p><blockquote><p>在Spring MVC框架中，如何自定义格式化转换器类，又如何注册格式化转换器？</p></blockquote><p>答：自定义格式化转换器，就是编写一个实现org.springframework.format.Formatter接口的Java类。该接口声明如下：<br>             public interface Formatter\<T\><br>       这里的T表示由字符串转换的目标数据类型。该接口有parse和print两个接口方法，自定义格式化转换器类必须覆盖它们。</p><p>​             public T parse(String s, java.util.Locale locale)<br>​             public String print(T object, java.util.Locale locale)</p><p>​       parse方法的功能是利用指定的Locale将一个String类型转换成目标类型，print方法与之相反，返回目标对象的字符串表示。</p><p>​       在配置文件springmvc-servlet.xml中注册格式化转换器，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册MyFormatter--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span><span class="attr">class</span>=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;formatters&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;formatter.MyFormatter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WEB-xml"><a href="#WEB-xml" class="headerlink" title="WEB.xml"></a>WEB.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!--welcome pages--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!--applicationContext.xml是全局的，应用于多个serverlet，配合listener一起使用--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果是监听多个文件，可用‘，’隔开 --&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>配置Spring配置文件路径<span class="tag">&lt;/<span class="name">description</span>&gt;</span>  <span class="comment">&lt;!--存放了如数据库连接等的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- 定义SPRING监听器，加载spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">      org.springframework.web.context.request.RequestContextListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!--log4j配置文件加载--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--启动一个watchdog线程每1800秒扫描一下log4j配置文件的变化--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jRefreshInterval<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>1800000<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- 配置Spring字符编码过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- Spring MVC 核心控制器 DispatcherServlet 配置开始 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--配置springmvc DispatcherServlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--Sources标注的文件夹下需要新建一个spring文件夹--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果是监听多个文件，可用‘，’隔开 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- 拦截设置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处可以可以配置成*.do，对应struts的后缀习惯 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Spring MVC 核心配置结束 --&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- 激活Tomcat的defaultServlet来处理静态文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/static/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- session 时间 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="控制器接受请求参数"><a href="#控制器接受请求参数" class="headerlink" title="控制器接受请求参数"></a>控制器接受请求参数</h2><ol><li><p>控制器接受请求参数的常见方式有哪几种？<br>答：</p><p>​        （1）通过一个实体bean来接收请求参数，适用于get和post提交请求方式。需要注意的是，bean的属性名称必须与请求参数名称相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> pojo.UserForm;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="comment">//得到一个用来记录日志的对象，这样在打印信息的时候能够标记打印的是哪个类的信息private static final Log logger = LogFactory.getLog(UserController.class);</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*处理登录</span></span><br><span class="line"><span class="comment">*使用UserForm对象（实体Bean) user接收注册页面提交的请求参数*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> string <span class="title">login</span><span class="params">(UserForm user,HttpSession session,Model model)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;zhangsan&quot;</span>.equals(user.getUname ())&amp;&amp; <span class="string">&quot;123456&quot;</span>.equals (user.getUpass())) </span><br><span class="line">         &#123;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;u&quot;</span>,user);</span><br><span class="line">   logger.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;<span class="comment">//登录成功，跳转到main.jsp</span></span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   logger.info(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">                model.addAttribute ( <span class="string">&quot;messageError&quot;</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*处理注册</span></span><br><span class="line"><span class="comment">*使用 UserForm对象(实体Bean) user接收注册页面提交的请求参数*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span> (<span class="string">&quot; /register&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(UserForm user,Model model)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;zhangsan&quot;</span> .equals(user.getUname())&amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(user.getUpass())) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;<span class="comment">//注册成功,跳转到login.jsp</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line"><span class="comment">//在register.jsp页面上可以使用EL表达式取出model的uname值model.addAttribute ( &quot;uname&quot;,user.getUname());</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;<span class="comment">//返回register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>   ​        （2）通过处理方法的形参接收请求参数，也就是直接把表单参数写在控制器类相应方法的形参中，即形参名称与请求参数名称完全相同。该接收参数方式适用于get和post提交请求方式。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ReguestMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*通过形参接收请求参数,形参名称与请求参数名称完全相同*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(String uname,String upass,Model model)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;zhangsan&quot;</span> .equals(uname)&amp;&amp;<span class="string">&quot;123456&quot;</span> .equals(upass)) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;<span class="comment">//注册成功,跳转到login.jsp</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">logger.info(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line"><span class="comment">//在register.jsp页面上可以使用EL表达式取出 model 的uname值</span></span><br><span class="line">         model.addAttribute( <span class="string">&quot;uname&quot;</span>, uname);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;<span class="comment">//!返回register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   ​        （3）通过HttpServletRequest接收请求参数，适用于get和post提交请求方式。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*通过HttpServletRequest接收请求参数*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(HttpServletRequest request,Model model)</span></span>&#123;</span><br><span class="line">String uname=request.getParameter ( <span class="string">&quot;uname&quot;</span>);</span><br><span class="line">String upass=request.getParameter ( <span class="string">&quot;upass&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;zhangsan&quot;</span> .equals (uname)&amp;&amp;<span class="string">&quot;123456&quot;</span>.equals (upass)) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;<span class="comment">//注册成功，跳转到1ogin.jsp</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">logger.info(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line"><span class="comment">//在register.jsp页面上可以使用EL表达式取出model的uname值model.addAttribute( &quot;uname&quot;, uname);</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;<span class="comment">//返回register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   ​        （4）通过@PathVariable获取URL中的参数。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.pathvariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping( &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span> (value=<span class="string">&quot;/register/&#123;uname)/[upass&#125;&quot;</span>,method=Request Method. GET)<span class="comment">//必须加 method属性</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*通过<span class="doctag">@Pathvariable</span>获取 URL中的参数*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(<span class="meta">@PathVariable</span> String uname,(Pathvariable Stringupass, Model model)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;zhangsan&quot;</span>.equals (uname)&amp;&amp;<span class="string">&quot;123456&quot;</span> .equals(upass))</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;<span class="comment">//注册成功,跳转到login.jsp</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//在 register.jsp页面上可以使用EL表达式取出model的uname 值</span></span><br><span class="line">         model.addAttribute ( <span class="string">&quot;uname&quot;</span>, uname);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;<span class="comment">//返回register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   ​        （5）通过@RequestParam接收请求参数，适用于get和post提交请求方式。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*通过<span class="doctag">@RequestParam</span>接收请求参数*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(<span class="meta">@RequestParam</span> String uname，<span class="meta">@RequestParam</span> Stringupass, Model model)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;zhangsan&quot;</span>.equals (uname)&amp;&amp;<span class="string">&quot;123456&quot;</span>.equals (upass))&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>; <span class="comment">//注册成功，跳转到login.jsp</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">logger.info(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line"><span class="comment">//在 register.jsp页面上可以使用EL表达式取出model的uname值</span></span><br><span class="line">        model.addAttribute ( <span class="string">&quot;uname&quot;</span>, uname);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;<span class="comment">//返回register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   ​        （6）通过@ModelAttribute注解接收请求参数，适用于get和post提交请求方式。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span> <span class="params">(<span class="meta">@ModelAttribute</span> ( <span class="string">&quot;user&quot;</span>)</span> UserForm user)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;zhangsan&quot;</span> .equals (user.getUname())&amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(user.getUpass()))&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;<span class="comment">//注册成功,跳转到login.jsp</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">logger.info(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line"><span class="comment">//使用@ModelAttribute ( &quot;user&quot;)与model.addAttribute ( &quot;user&quot;,user)的功能相同</span></span><br><span class="line">        <span class="comment">//在register.jsp页面上可以使用E表达式s(user. uname&#125;取出ModelAttribute的uname值</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;<span class="comment">//返回register.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><blockquote><p>请简述单个拦截器和多个拦截器的执行流程。</p></blockquote><p>答：在配置文件中，如果只定义了一个拦截器，程序首先将执行拦截器类中的preHandle()方法，如果该方法返回true，程序将继续执行控制器中处理请求的方法，否则中断执行。如果preHandle()方法返回true，并且控制器中处理请求的方法执行后返回视图前，将执行postHandle()方法。返回视图后，才执行afterCompletion()方法。</p><p>在需要Web应用中，通常有多个拦截器同时工作，这时它们的preHandle()方法将按照配置文件中拦截器的配置顺序执行，而它们的postHandle()方法和afterCompletion()方法则按照配置顺序的反序执行。</p><h2 id="使用注解实现统一异常处理"><a href="#使用注解实现统一异常处理" class="headerlink" title="使用注解实现统一异常处理"></a>使用注解实现统一异常处理</h2><p><strong>实现BaseController类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"><span class="keyword">import</span> java.sql .SQLException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> exception. MyException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"><span class="comment">/**基于<span class="doctag">@ExceptionHandler</span>异常处理*/</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> string <span class="title">exception</span> <span class="params">(HttpServletRequest request, Exception ex)</span></span>&#123;</span><br><span class="line">request.setAttribute(<span class="string">&quot;ex&quot;</span>,ex);</span><br><span class="line"><span class="comment">//根据不同错误转向不同页面,即异常与view的对应关系</span></span><br><span class="line">    <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> SQLException)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;sql-error&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> MyException)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;my-error&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>所有需要异常处理的Controller都继承BaseController</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class TestExceptionController extends BaseController&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="文件的上传与下载"><a href="#文件的上传与下载" class="headerlink" title="文件的上传与下载"></a>文件的上传与下载</h2><h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><ol><li><p>导入commons-fileupload组件相关的JAR包及JSTL相关的JAR包到应用的lib目录</p></li><li><p>在WEB-INF下创建web.xml文件。</p></li><li><p>在WebContent下创建JSP页面，并使用表单上传单个文件。</p><p><strong>重点</strong>：enctype属性一定要设置成==multipart/form-data==</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="meta">@page</span> language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>pageEncoding-<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http:/ /www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$ &#123;pageContext.request.contextPath &#125;/onefile&quot;</span> method=<span class="string">&quot;post&quot;</span>enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">选择文件:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;myfile&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">文件描述:&lt;input type=<span class="string">&quot;text&quot;</span> name= <span class="string">&quot;description&quot;</span>&gt;&lt;br&gt;&lt;input type=<span class="string">&quot; submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建POJO类，用来表上上传的文件对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDomain</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String description;</span><br><span class="line">    <span class="keyword">private</span> MultipartFile myfile;  <span class="comment">//注意属性名要和上面的jsp中的file类型表单的参数名myfile相同</span></span><br><span class="line">    <span class="comment">//省略setter和 getter方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>==创建控制器类==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"><span class="comment">//得到一个用来记录日志的对象,这样在打印信息时能够标记打印的是哪个类的信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger=LogFactory.getLog(FileUploadController.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot; /onefile&quot;)</span><span class="comment">//单文件上传</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">oneFileUpload</span><span class="params">(<span class="meta">@ModelAttribute</span> FileDomain fileDomain,HttpServletRequest request)</span></span>&#123;</span><br><span class="line"><span class="comment">/*文件上传到服务器的位置&quot;/uploadfiles&quot;,该位置是指</span></span><br><span class="line"><span class="comment">workspacel.metadatal.pluginslorg.eclipse.wst.server.coreltmp0wtpwebapps,</span></span><br><span class="line"><span class="comment">发布后使用*/</span></span><br><span class="line">String realpath=request.getServletContext ().getRealPath(<span class="string">&quot;uploadfiles &quot;</span>);</span><br><span class="line">String fileName=fileDomain.getMyfile().getOriginalFilename();</span><br><span class="line">File targetFile=<span class="keyword">new</span> File(realpath, fileName);</span><br><span class="line"><span class="keyword">if</span>(!targetFile.exists())&#123;</span><br><span class="line">targetFile.mkdirs();</span><br><span class="line">)</span><br><span class="line"><span class="comment">//上传</span></span><br><span class="line">     <span class="keyword">try</span>&#123;</span><br><span class="line">fileDomain.getMyfile().transferTo(targetFile);</span><br><span class="line">          logger.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">     &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;showOne&quot;</span> ;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置文件上传的配置文件<br><strong>重点</strong>：配置<strong>multipartResolver</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmins</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www .springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi</span> <span class="attr">:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http:/ /www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">         http:/ / www .springframework.org/schema/context       </span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="comment">&lt;!--使用扫描机制扫描包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;controller&quot;</span>/&gt;</span><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view .InternalResourceviewResolver&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;internalResourceviewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB一INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用 Spring 的 CommosMultipartResolver配置 MultipartResolver用于文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;54000000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;uploadTempDir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fileUpload/temp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- defaultEncoding=&quot;UTF-8&quot;是请求的编码格式，默认为iso-8859-1;maxUploadSize=&quot;5400000&quot;是允许上传文件的最大值,单位为字节;</span></span><br><span class="line"><span class="comment">uploadTempDir=&quot;fileUpload/temp&quot;为上传文件的临时路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><ol><li><p>创建上传文件的JSP页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$ &#123;pageContext.request.contextPath )/multifile&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">选择文件<span class="number">1</span>:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;myfile&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">文件描述<span class="number">1</span>:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;description&quot;</span>&gt;&lt;br&gt;选择文件<span class="number">2</span>:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;myfile&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">文件描述<span class="number">2</span>:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;description&quot;</span>&gt; &lt;br&gt;选择文件<span class="number">3</span>:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;myfile&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">文件描述<span class="number">3</span>:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;description&quot;</span>&gt;&lt;br&gt;&lt;input type=<span class="string">&quot; submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>创建POJO类<br><strong>重点</strong>：用List容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiFileDomain</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;string&gt; description;</span><br><span class="line">    <span class="keyword">private</span> List&lt;MultipartFile&gt; myfile;<span class="comment">//省略setter和 getter方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>==创建控制器类==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot; / multifile&quot;)</span><span class="comment">//多文件上传</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">multiFileUpload</span> <span class="params">(<span class="meta">@ModelAttribute</span> MultiEileDomainmultiFileDomain, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">string realpath=request.getServletContext().getRealPath(<span class="string">&quot;uploadfiles&quot;</span>);</span><br><span class="line"><span class="comment">//String realpath=&quot;D:/spring mvc workspace/ch17/webContent/uploadfiles&quot;;</span></span><br><span class="line">File targetDir=<span class="keyword">new</span> File(realpath);</span><br><span class="line">    <span class="keyword">if</span>(!targetDir.exists())&#123;</span><br><span class="line">targetDir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">List&lt;MultipartFile&gt; files=multiFileDomain.getMyfile();  <span class="comment">//注意是List</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;files.size(); i++)&#123;</span><br><span class="line">MultipartFile file=files.get(i);</span><br><span class="line">String fileName=file.getoriginalFilename();</span><br><span class="line">        File targetFile=<span class="keyword">new</span> File(realpath,fileName);<span class="comment">//上传</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">file.transferTo(targetFile);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">logger.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;showMulti&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="表达式语言（EL）"><a href="#表达式语言（EL）" class="headerlink" title="表达式语言（EL）"></a>表达式语言（EL）</h2><p>基本语法</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;表达式&#125;</span><br></pre></td></tr></table></figure><p>EL表达式类似于JSP表达式&lt;%=表达式%&gt;，EL语句中的表达式值会被直接送到浏览器显示，通过page指令的 isELIgnored 属性来说明是否支持EL表达式。当isELIgnored属性值为false时，JSP页面可以使用EL表达式;当isELIgnored 属性值为true时，JSP页面不能使用EL表达式。isELIgnored属性默认为False</p><p><strong>Empty运算符</strong>：用于检测一个值是否为null。如 变量A不存在，则${empty A}为true<br><strong>隐含对象</strong>：pageScope、requestScope、sessionScope、applicationScope</p><blockquote><p>如果EL在查找隐含对象时没有指定作用范围，则会依次从page、request、session、application中寻找，若找到就返回，找不到最后返回空字符串</p><p>pageContext ：当前jsp页面范围内有效</p><p>request：一次请求内有效</p><p>Session：一次会话范围内有效</p><p>Application：只要服务器不停止，就一直有效</p></blockquote><p><strong>请求参数相关的隐含对象</strong>：</p><p>例1：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;kkk&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;sss&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">&quot;jjj&quot;</span>));</span><br><span class="line">application.setAttribute(<span class="string">&quot;list_1&quot;</span>, list);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;list_1[<span class="number">1</span>].name &#125;</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;param.jsp&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> size=<span class="string">&quot;15&quot;</span>/&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;兴趣:</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;habit&quot;</span> value=<span class="string">&quot;看书&quot;</span>/&gt;看书</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;habit&quot;</span> value=<span class="string">&quot;玩游戏&quot;</span>/&gt;玩游戏</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;habit&quot;</span> value=<span class="string">&quot;旅游&quot;</span>/&gt;旅游</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;&lt;/form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%request.setCharacterEncoding (<span class="string">&quot;GBK&quot;</span>）;%&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;EL隐含对象param、 paramvalues&lt;/h2&gt;</span><br><span class="line">    姓名:$&#123;param.username &#125;&lt;/br&gt;</span><br><span class="line">兴趣:</span><br><span class="line">$&#123;paramvalues.habit[<span class="number">0</span>]&#125;</span><br><span class="line">$&#123;paramvalues.habit[<span class="number">1</span>]]</span><br><span class="line">$&#123;paramvalues.habit[<span class="number">2</span>]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JSTL标准标签库"><a href="#JSTL标准标签库" class="headerlink" title="JSTL标准标签库"></a>JSTL标准标签库</h2><p><strong>通用标签</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:out  value=$&#123;param.username&#125; <span class="keyword">default</span>=<span class="string">&quot;没有数据&quot;</span>/&gt; 用来显示数据的内容</span><br><span class="line">&lt;c:set  value=<span class="string">&quot;dwz&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;userName&quot;</span> scope=<span class="string">&quot;session&quot;</span>/&gt;   用来在session中存放变量</span><br><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;userName&quot;</span> scope=<span class="string">&quot;session&quot;</span>/&gt; 在session中消除变量</span><br></pre></td></tr></table></figure><p><strong>流程控制标签</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;条件表达式1&quot;</span>/&gt;   <span class="comment">//表达式可以为EL表达式，也可以是JSP表达式</span></span><br><span class="line">主体内容</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">---</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;条件表达式1&quot;</span>&gt;</span><br><span class="line">        主体内容<span class="number">1</span></span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">     &lt;c:when test=<span class="string">&quot;条件表达式2&quot;</span>&gt;</span><br><span class="line">        主体内容<span class="number">2</span></span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        主体内容<span class="number">3</span></span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html;charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</span><br><span class="line">&lt;! DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/htm14 /loose.dtd&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:set</span> <span class="attr">value</span>=<span class="string">&quot;if&quot;</span> <span class="attr">var</span>=<span class="string">&quot;firstNumber&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;request&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:set</span> <span class="attr">value</span>=<span class="string">&quot;else&quot;</span> <span class="attr">var</span>=<span class="string">&quot;secondNumber&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;request&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;firstNumber&gt;secondNumber&#125;&quot;</span>&gt;</span></span><br><span class="line">    最大值为$&#123;firstNumber&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;firstNumber&lt;secondNumber&#125; &quot;</span>&gt;</span></span><br><span class="line">        最大值为$ &#123;secondNumber&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;firstNumber&lt;secondNumber&#125; &quot;</span>&gt;</span></span><br><span class="line">        最小值为$&#123;firstNumber&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">        最小值为$ [secondNumber&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>循环迭代标签</strong></p><p>迭代集合中的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;UserBean&gt; users=<span class="keyword">new</span> ArrayEist&lt;UserBean&gt;();</span><br><span class="line">UserBean ub1=<span class="keyword">new</span> UserBean ( <span class="string">&quot;zhao&quot;</span>, <span class="number">20</span>);</span><br><span class="line">UserBean ub2=<span class="keyword">new</span> UserBean ( <span class="string">&quot;qian&quot;</span>, <span class="number">40</span>);</span><br><span class="line">UserBean ub3=<span class="keyword">new</span> UserBean ( <span class="string">&quot;sun&quot;</span>, <span class="number">60</span>);</span><br><span class="line">UserBean ub4=<span class="keyword">new</span> UserBean(<span class="string">&quot;li&quot;</span>,<span class="number">80</span>);</span><br><span class="line">users.add(ub1);</span><br><span class="line">users.add(ub2);</span><br><span class="line">users.add(ub3);</span><br><span class="line">users.add(ub4);</span><br><span class="line">request.setAttribute(<span class="string">&quot;usersKey&quot;</span>,users);</span><br></pre></td></tr></table></figure></li></ol></li></ol><pre><code>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">&lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> items=<span class="string">&quot;$&#123;requestScope.usersKey)&quot;</span>&gt;</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line">&lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;user.age)&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>  迭代字符串中分隔符分隔的成员  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forTokens items=<span class="string">&quot;chenheng1:chenheng2:chenheng3&quot;</span> delims=<span class="string">&quot;:&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">$&#123;name)&lt;br&gt;</span><br><span class="line">&lt;/c:forTokens&gt;</span><br></pre></td></tr></table></figure>  **JSTL中的函数**  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$&#123;fn:contains(<span class="string">&quot;I am studying&quot;</span>,<span class="string">&quot;am&quot;</span>)&#125;    <span class="comment">//返回true   字符串是否包含子串</span></span><br><span class="line">$&#123;fn:containsIgnoreCase(<span class="string">&quot;I AM studing&quot;</span>,<span class="string">&quot;am&quot;</span>)&#125;  <span class="comment">//返回false     不区分大小写地判断是否包含</span></span><br><span class="line">$&#123;fn:endWith(<span class="string">&quot;I AM studing&quot;</span>,<span class="string">&quot;am&quot;</span>)&#125;  <span class="comment">//返回false          是否一某个字串结尾</span></span><br><span class="line">$&#123;fn:startWith(<span class="string">&quot;I AM studing&quot;</span>,<span class="string">&quot;am&quot;</span>)&#125;  <span class="comment">//返回false        是否以某个字串开头</span></span><br><span class="line">$&#123;fn:indexof(<span class="string">&quot;I AM studing&quot;</span>,<span class="string">&quot;am&quot;</span>)&#125;   <span class="comment">//返回2             某个字串开始地下标</span></span><br><span class="line">$&#123;fn:substring(<span class="string">&quot;abcdef&quot;</span>,<span class="number">1</span>,<span class="number">3</span>)&#125;   <span class="comment">//be                     指定索引位置地子串</span></span><br><span class="line">$&#123;fn:trim(<span class="string">&quot;      I am studying         &quot;</span>)&#125;   <span class="comment">//返回 I am studying</span></span><br><span class="line">---</span><br><span class="line">string my=<span class="string">&quot;I am studying&quot;</span></span><br><span class="line">$&#123;fn:join(my,<span class="string">&quot;,&quot;</span>)&#125;    <span class="comment">//返回I,am,studying</span></span><br><span class="line">---</span><br><span class="line">$&#123;fn:length(<span class="string">&quot;aaa&quot;</span>)&#125;    <span class="comment">//返回3</span></span><br><span class="line">$&#123;fn:replace(<span class="string">&quot;I am studying&quot;</span>,<span class="string">&quot;am&quot;</span>,<span class="string">&quot;do&quot;</span>)&#125;    <span class="comment">//返回I do studying</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Spring整合mybatis&quot;&gt;&lt;a href=&quot;#Spring整合mybatis&quot; class=&quot;headerlink&quot; title=&quot;Spring整合mybatis&quot;&gt;&lt;/a&gt;Spring整合mybatis&lt;/h2&gt;&lt;p&gt;1、实现MyBatis与Spring</summary>
      
    
    
    
    
    <category term="大三课程" scheme="https://michael-d-666.github.io/tags/%E5%A4%A7%E4%B8%89%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>记不住的Web技术与应用</title>
    <link href="https://michael-d-666.github.io/2021/12/16/%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84Web%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>https://michael-d-666.github.io/2021/12/16/%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84Web%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/</id>
    <published>2021-12-16T08:17:13.000Z</published>
    <updated>2021-12-22T07:20:56.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>Web服务器 又称 WWW服务器、 网站服务器、站点服务器，是将本地的信息用超文本（Hypertext）组织，为用户在Internet上搜索和浏览信息提供服务。  </p><p>本质上来说Web服务器实际上就是一个==软件系统==。  </p><h3 id="统一资源定位符URL"><a href="#统一资源定位符URL" class="headerlink" title="统一资源定位符URL"></a>统一资源定位符URL</h3><p><img src="https://s2.loli.net/2021/12/20/JTM1dZk2OmSHoyV.png" alt="image-20211220211259202"></p><p><strong>绝对地址</strong>：浏览器地址栏手工输入的url只能是绝对地址</p><p><strong>相对地址</strong>：相对地址用于网页文档内部的链接地址</p><h3 id="浏览器-服务器模式（B-S模式）"><a href="#浏览器-服务器模式（B-S模式）" class="headerlink" title="浏览器/服务器模式（B/S模式）"></a>浏览器/服务器模式（B/S模式）</h3><p>第一层为客户端表示层<br>第二层为业务逻辑处理层<br>第三层为数据访问层</p><p>浏览器的作用</p><blockquote><p>(1) 收集用户输入的数据<br>(2) 将用户数据发送到服务器（向服务器请求该用户对服务器的请求）<br>(3) 接收服务器返回的响应（用浏览器能认识和执行的代码即客户端代码表示，如HTML代码， JavaScript代码等）<br>(4) 解释、执行这些代码，将结果显示在浏览器窗口中  </p></blockquote><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="元信息meta"><a href="#元信息meta" class="headerlink" title="元信息meta"></a>元信息meta</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;程序员,程序猿&quot;</span>/&gt;</span>   <span class="comment">&lt;!--为搜索引擎提供关键字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;meta标签是HTML中的一个重要标签，它位于HTML文档头部的&lt;HEAD&gt;标签和&lt;TITL&gt;标签之间。&quot;</span>/&gt;</span><span class="comment">&lt;!--告诉搜索引擎页面主要内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>/&gt;</span><span class="comment">&lt;!--设定页面使用字符集--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span><span class="attr">content</span>=<span class="string">&quot;5; url=http://www.baidu.com/&quot;</span>/&gt;</span><span class="comment">&lt;!--设定页面刷新时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Wed, 26 Feb 1997 08:21:57 GMT&quot;</span>/&gt;</span><span class="comment">&lt;!--设定网页在缓存中的过期时间--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="易忘标签"><a href="#易忘标签" class="headerlink" title="易忘标签"></a>易忘标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>   <span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="comment">&lt;!--这个标签中的文本会保留换行和空格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>      <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="comment">&lt;!--粗体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>      <span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="comment">&lt;!--斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>      <span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="comment">&lt;!--下划线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>      <span class="tag">&lt;/<span class="name">s</span>&gt;</span><span class="comment">&lt;!--删除线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>    <span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="comment">&lt;!--下标位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>    <span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="comment">&lt;!--上标位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span>&gt;</span><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span><span class="comment">&lt;!--添加滚动文字效果--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>  <span class="attr">multiple</span>&gt;</span>  <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="comment">&lt;!--下拉列表，multiple表示下拉列表多项可选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="comment">&lt;!--文本域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="comment">&lt;!--文件域--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><h3 id="超链接方式"><a href="#超链接方式" class="headerlink" title="超链接方式"></a>超链接方式</h3><p><strong>页内连接</strong>：显示在本页面中可被触发的超链文本或图像（在本页中跳转）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;achor&quot;</span> &gt;</span>Details are in Appendix A <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#achor&quot;</span>&gt;</span>Appendix A<span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>页间连接</strong>：描述当超链接被触发后要链接到的URL信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">A</span> <span class="attr">href</span>=<span class="string">&quot;http://www.nuist.edu.cn&quot;</span> &gt;</span>NUIST<span class="tag">&lt;/<span class="name">A</span>&gt;</span>   <span class="comment">&lt;!--网址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">A</span> <span class="attr">href</span>=<span class="string">&quot;../../topic.html&quot;</span> &gt;</span>NUIST<span class="tag">&lt;/<span class="name">A</span>&gt;</span>   <span class="comment">&lt;!--文件路径--&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若目标页面位于本主机，则可采用相对URL代替绝对URL</p></blockquote><h3 id="超链接属性"><a href="#超链接属性" class="headerlink" title="超链接属性"></a>超链接属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">target：  _blank   在新窗口中打开被链接文档。</span><br><span class="line"> _self    默认。在相同的框架中打开被链接文档</span><br><span class="line">          _parent  在父框架集中打开被链接文档。</span><br><span class="line">          _top     在整个窗口中打开被链接文档</span><br><span class="line">          framename 在指定的框架中打开被链接文档。</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;disc | circle | square&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span>项目名称<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span>项目名称<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span>项目名称<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>= <span class="string">&quot; 1| A | a | I | i&quot;</span> <span class="attr">start</span>= <span class="string">&quot;2&quot;</span>&gt;</span>   <span class="comment">&lt;!--start决定编号的起始顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;n&quot;</span>&gt;</span>项目名称<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  <span class="comment">&lt;!--value改变自身的起始编号，同时改变后续的编号顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;n&quot;</span>&gt;</span>项目名称<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;n&quot;</span>&gt;</span>项目名称<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    ...  </span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>列表标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h3><p><img src="https://s2.loli.net/2021/12/20/FNubenO9WkxZB5C.png" alt="image-20211220092931974" style="zoom: 25%;" /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;left|middle|right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">valign</span>=<span class="string">&quot;top|middle|bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>第一学期<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  <span class="comment">&lt;!--跨三列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>1班<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="comment">&lt;!--跨三行--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">method</span>=<span class="string">&quot;get|post&quot;</span>  <span class="attr">action</span>=<span class="string">&quot;处理程序名&quot;</span>&gt;</span>  <span class="comment">&lt;!--action属性指出了接收表单数据的服务器端程序或动态网页的URL地址。--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--get方式最多传送256byte。--&gt;</span>   </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HEAD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TITLE</span>&gt;</span>框窗实作<span class="tag">&lt;/<span class="name">TITLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FRAMESET</span> <span class="attr">COLS</span>=<span class="string">&quot;120,*&quot;</span> &gt;</span>  <span class="comment">&lt;!--注意不能在body中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FRAME</span> <span class="attr">SRC</span>=<span class="string">&quot;a.htm&quot;</span> <span class="attr">NAME</span>=<span class="string">&quot;1&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">FRAME</span> <span class="attr">SRC</span>=<span class="string">&quot;b.htm&quot;</span> <span class="attr">NAME</span>=<span class="string">&quot;2&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">FRAMESET</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动框架应用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>浮动框架应用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;iframe1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://www.pku.edu.cn&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;10px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><p>伪类最大用处是可以对链接在不同状态下定义不同的样式效果。最常用的是4种超链接(<a>)元素的伪类，它指定动态链接在4种不同的状态：link、visited、hover、active。</p><p><strong>伪类和类不同，是CSS已经定义好的，不能像类选择符一样随意用别的名字。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>&#125; <span class="comment">/* 未被访问的链接红色*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>: <span class="number">#00FF00</span>&#125; <span class="comment">/* 已被访问过的链接绿色*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>: <span class="number">#FFCC00</span>&#125; <span class="comment">/* 鼠标悬浮在上的链接橙色*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;<span class="attribute">color</span>: <span class="number">#0000FF</span>&#125; <span class="comment">/* 鼠标点中激活链接蓝色*/</span></span><br></pre></td></tr></table></figure><h2 id="包含选择符"><a href="#包含选择符" class="headerlink" title="包含选择符"></a>包含选择符</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">a</span>   <span class="comment">/* table标签下面的a标签*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">12px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性选择符"><a href="#属性选择符" class="headerlink" title="属性选择符"></a>属性选择符</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[ title ]</span> &#123;<span class="attribute">color</span>:red; &#125;  <span class="comment">/*带有title属性的所有元素设置样式*/</span></span><br><span class="line"><span class="selector-attr">[title=“p1”]</span>&#123; <span class="attribute">font-size</span>: <span class="number">24px</span>; <span class="attribute">color</span>: red; <span class="attribute">border</span>: <span class="number">5px</span> solid blue; &#125; <span class="comment">/*带有title属性的且值为p1的元素设置样式*/</span></span><br><span class="line"><span class="selector-attr">[attr ~= value]</span> &#123; <span class="attribute">background</span>:<span class="number">#FF00CC</span>; &#125;<span class="comment">/*属性值是以空格分隔的词汇列表，其中一个是value*/</span></span><br><span class="line"><span class="selector-attr">[attr ^= value]</span> &#123; <span class="attribute">background</span>:<span class="number">#FF00CC</span>; &#125;<span class="comment">/*属性值是以value开头的*/</span></span><br><span class="line"><span class="selector-attr">[attr $= value]</span> &#123; <span class="attribute">background</span>:<span class="number">#FF00CC</span>; &#125;<span class="comment">/*属性值是以value结尾的*/</span></span><br><span class="line"><span class="selector-attr">[attr *= value]</span> &#123; <span class="attribute">background</span>:<span class="number">#C3C</span>; &#125;<span class="comment">/*属性值中包含了value*/</span></span><br><span class="line"><span class="selector-attr">[attr |= value]</span> &#123; <span class="attribute">background</span>:<span class="number">#C3C</span>; &#125;<span class="comment">/*属性值是value或者以&quot;value-&quot;开头的值*/</span></span><br></pre></td></tr></table></figure><h2 id="CSS样式的引用"><a href="#CSS样式的引用" class="headerlink" title="CSS样式的引用"></a>CSS样式的引用</h2><h3 id="内联式"><a href="#内联式" class="headerlink" title="内联式"></a>内联式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;font-family:&#x27;隶书&#x27;;color:#ff0000;text-decoration:underline&quot;</span>&gt;</span>标题<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red; background-color:#000000&quot;</span>&gt;</span>......<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        hr&#123;<span class="attribute">color</span>: sienna&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>)&#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="链接式"><a href="#链接式" class="headerlink" title="链接式"></a>链接式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HEAD</span>&gt;</span><span class="tag">&lt;<span class="name">LINK</span> <span class="attr">href</span>=<span class="string">&quot;newsyle.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="导入式"><a href="#导入式" class="headerlink" title="导入式"></a>导入式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HEAD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">TYPE</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">        @ import URL(newstyle.css);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="元素的定位"><a href="#元素的定位" class="headerlink" title="元素的定位"></a>元素的定位</h2><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p><strong>absolute</strong>：绝对位置，原点位于所属块元素的左上角<br><strong>relative</strong>：相对位置，相对HTML文件中本元素前一元素的位置。<br><strong>static</strong>：按照HTML文件中各元素的先后顺序显示，是position的默认值</p><hr><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JavaScript的四个特点"><a href="#JavaScript的四个特点" class="headerlink" title="JavaScript的四个特点"></a>JavaScript的四个特点</h2><ol><li>简单性</li><li>基于对象</li><li>可移植性</li><li>动态性</li></ol><h2 id="Javascript的引用"><a href="#Javascript的引用" class="headerlink" title="Javascript的引用"></a>Javascript的引用</h2><ol><li><p>直接嵌入式</p><p>在网页文件的\<script>\</script>中编写脚本</p></li><li><p>文件调用式<br>将脚本代码放置在一个单独的文件中，在网页中引用这个脚本程序文件</p></li><li><p>事件定义方式</p><p>直接在标签元素的属性事件中写代码</p></li></ol><h2 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">基本类型</span><br><span class="line">Number：数值</span><br><span class="line">String：字符串</span><br><span class="line">Boolean：布尔</span><br><span class="line">特殊类型</span><br><span class="line">Null：空</span><br><span class="line">Undefined：未定义</span><br><span class="line">组合类型</span><br><span class="line">Array：数组</span><br><span class="line">Object：对象</span><br></pre></td></tr></table></figure><h2 id="JavaScript中的事件"><a href="#JavaScript中的事件" class="headerlink" title="JavaScript中的事件"></a>JavaScript中的事件</h2><h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onBlur:  文本框失去焦点</span><br><span class="line">onchange：文本框的值被修改</span><br><span class="line">Onfocus：光标进入文本框中</span><br><span class="line">focus：获得焦点</span><br><span class="line">select：选中文本框内容</span><br><span class="line">readonly：只读，文本框的内容不能修改</span><br></pre></td></tr></table></figure><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onBlur:  文本框失去焦点</span><br><span class="line">onclick：复选框被选定或取消</span><br><span class="line">Onfocus：光标进入文本框中</span><br><span class="line">checked：判断复选框是否被选中</span><br><span class="line">value：设置或获取复选框的值</span><br><span class="line">---</span><br><span class="line">document.myform.mybox[i].checked:同一个name的复选框构成了mybox数组</span><br></pre></td></tr></table></figure><h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onBlur:  文本框失去焦点</span><br><span class="line">onclick：复选框被选定或取消</span><br><span class="line">Onfocus：光标进入文本框中</span><br><span class="line">checked：判断复选框是否被选中</span><br><span class="line">value：设置或获取复选框的值</span><br><span class="line">---</span><br><span class="line">document.myform.myradio[i].checked:同一个name的单选框构成了myradio数组</span><br></pre></td></tr></table></figure><h3 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onBlur:  文本框失去焦点</span><br><span class="line">onchange：文本框的值被修改</span><br><span class="line">Onfocus：光标进入文本框中</span><br><span class="line">value：获取被选中的选项的值</span><br><span class="line">options：所有的选项构成了options数组，第一个选项即option[0]</span><br><span class="line">selectedIndex：返回被选择的选项的索引号</span><br></pre></td></tr></table></figure><h2 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h2><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p><strong>alert</strong>：alert(“您好”); //没有返回值</p><p><strong>confirm</strong>：confirm(“Press a button”); //返回值是true or false</p><p><img src="https://s2.loli.net/2021/12/20/Vw7KeTBPrakEcjS.png" alt="image-20211220142308422" style="zoom: 50%;" /></p><p><strong>prompt</strong>：prompt(“请输入您的名字”,”Bill Gates”)；//返回值是输入的字符串</p><p><img src="https://s2.loli.net/2021/12/20/m312fTR8aHMe4c5.png" alt="image-20211220135346225" style="zoom: 50%;" /></p><p>   <strong>setTimeout()</strong>：每隔多少个毫秒，就循环调用某个函数来执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myclock=<span class="built_in">setTimeout</span>(<span class="string">&quot;move()&quot;</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure><h2 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;元素的ID&quot;</span>)  <span class="comment">//注意加引号</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;元素的ID&quot;</span>).value=<span class="string">&quot;值&quot;</span> </span><br><span class="line">---</span><br><span class="line"><span class="built_in">document</span>.getElementByname(<span class="string">&quot;Name属性&quot;</span>);  <span class="comment">//该方法返回一个数组，必须使用下标引用</span></span><br><span class="line"><span class="built_in">document</span>.getElementByname(<span class="string">&quot;Name属性&quot;</span>)[<span class="number">0</span>].value=<span class="string">&quot;值&quot;</span></span><br><span class="line">---</span><br><span class="line"><span class="built_in">document</span>.getElementByTagName(<span class="string">&quot;标签名称&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;mydiv&quot;</span>).getElementByTagName(<span class="string">&quot;p&quot;</span>);<span class="comment">//查找&quot;mydiv&quot;下的&lt;p&gt;元素 </span></span><br><span class="line">---</span><br><span class="line"><span class="built_in">document</span>.images[<span class="number">0</span>]  <span class="comment">//表示第1个images对象</span></span><br><span class="line"><span class="built_in">document</span>.images.length <span class="comment">//获取页面中images对象（&lt;img&gt;）标签的个数</span></span><br><span class="line"><span class="built_in">document</span>.images.name1; <span class="comment">//通过name属性直接访问节点对象</span></span><br></pre></td></tr></table></figure><h1 id="ASP-NET"><a href="#ASP-NET" class="headerlink" title="ASP.NET"></a>ASP.NET</h1><h2 id="Web标准服务器控件"><a href="#Web标准服务器控件" class="headerlink" title="Web标准服务器控件"></a>Web标准服务器控件</h2><p><strong>产生原因</strong>：HTML只能用于客户端编程。为了能使服务器端能够直接操作HTML网页标记，于是引入了HTML服务器控件。</p><h4 id="几个重要的控件"><a href="#几个重要的控件" class="headerlink" title="几个重要的控件"></a>几个重要的控件</h4><p><strong>TextBox</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AutoPostBack       设置当TextBox的内容改变时是否自动上传到服务器端，需要和事件配合使用，默认false</span><br><span class="line">TextMode   /Single/Multiline/Password       设置文本框的类型</span><br><span class="line">Columns  设置TextBox控件的宽度</span><br><span class="line">Rows               设置TextBox控件的高度（仅适用于Multiline）</span><br><span class="line">MaxLength          设置文本框最多的字符数（不适用于Multiline）</span><br><span class="line">ReadOnly           设置文本框不可更改、</span><br><span class="line">Text               获取文本框的内容</span><br></pre></td></tr></table></figure><p><strong>CheckBox</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Checked            获取或设置当前复选框是否被选中</span><br><span class="line">Text  获取当前控件的内容</span><br><span class="line">TextAlign          设置文本的对齐方式</span><br><span class="line">AutoPostBack       设置当checkBox的状态改变时是否自动上传到服务器端，需要和事件配合使用，默认false</span><br></pre></td></tr></table></figure><p><strong>CheckBoxList(CheckBox组)</strong><br>==注意==：子标签要用<asp:ListItem></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AutoPostBack       设置当checkBox的状态改变时是否自动上传到服务器端</span><br><span class="line">RepeatColumns      设置复选框有几列，默认只有1列</span><br><span class="line">RepeatDirection    复选框的排列方向</span><br><span class="line">Value      每个选项的值</span><br><span class="line">Selected           表示该选项是否被选中</span><br><span class="line">遍历方式：</span><br><span class="line">for(int i=0;i&lt;CheckBoxList1.Items.Count;i++)&#123;</span><br><span class="line">if(CheckBoxList1.Items[i].Selected)</span><br><span class="line">str+=CheckBoxList1.Items[i].Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RadioButton</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GroupName         通过设置相同的GroupName将部分radion分在一组从而实现多选一</span><br></pre></td></tr></table></figure><p><strong>RadioButtonList</strong>(类似CheckBoxList)</p><p><strong>DropDownList</strong>(类似CheckBoxList)</p><p><strong>ListBox</strong>(类似于DropDownBox)，但是能同时展现多个项，而DropDownList只能展示一个项</p><hr><h1 id="Net内置对象"><a href="#Net内置对象" class="headerlink" title=".Net内置对象"></a>.Net内置对象</h1><h2 id="Web窗体代码模型"><a href="#Web窗体代码模型" class="headerlink" title="Web窗体代码模型"></a>Web窗体代码模型</h2><h3 id="单文件页模型"><a href="#单文件页模型" class="headerlink" title="单文件页模型"></a>单文件页模型</h3><p>前端代码和编程代码都位于同一个.aspx文件中</p><p>优点：更容易部署和维护</p><h3 id="代码隐藏页模型"><a href="#代码隐藏页模型" class="headerlink" title="代码隐藏页模型"></a>代码隐藏页模型</h3><p>在.aspx中编写前端代码，在.axpx.cs中编写后端代码</p><p>优点：实现了代码分离，可以有效地保护源码</p><h2 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h2><p>一个.aspx文件就是一个Page类。</p><p><strong>属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IsPostBack(页面提交) //获取一个值，该值表示该页是否正为响应客户端回发而加载(第一次进去是false，其余是true)</span><br><span class="line"></span><br><span class="line">IsValid(验证通过)  //获取一个值，该值表示页面是否通过验证（当验证控件都为真时，IsValid才为true）</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/20/ZIulJ7Aq38YbmhR.png" alt="image-20211220170920774" style="zoom:33%;" /></p><p><strong>事件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Init：只有在页面初始化时被触发一次。</span><br><span class="line">Load事件：Load事件在初次加载及每次回发中都会被触发。</span><br></pre></td></tr></table></figure><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><h3 id="通过Request对象可以获取客户端通过POST方法传送的表单数据"><a href="#通过Request对象可以获取客户端通过POST方法传送的表单数据" class="headerlink" title="通过Request对象可以获取客户端通过POST方法传送的表单数据"></a>通过Request对象可以获取客户端通过POST方法传送的表单数据</h3><p>Default.aspx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;form1&quot; runat=&quot;server&quot; &gt;</span><br><span class="line">&lt;asp:TextBox ID=&quot;TextBox1&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;</span><br><span class="line">&lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; PostBackUrl=&quot;~/Page2.aspx&quot; Text=&quot;提交&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>Page2.aspx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;</span><br><span class="line">&lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; Text=&quot;传过来的值＝&quot;&gt;&lt;/asp:Label&gt;</span><br><span class="line">&lt;%=Request.Form[&quot;TextBox1&quot;]%&gt;    &lt;!--获取之前POST提交的参数--&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="通过Request对象可以获取客户端通过GET方法传送的表单数据"><a href="#通过Request对象可以获取客户端通过GET方法传送的表单数据" class="headerlink" title="通过Request对象可以获取客户端通过GET方法传送的表单数据"></a>通过Request对象可以获取客户端通过GET方法传送的表单数据</h3><p>Default.aspx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;form1&quot; runat=&quot;server&quot; method=&quot;get&quot; &gt;</span><br><span class="line">&lt;asp:TextBox ID=&quot;TextBox1&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;</span><br><span class="line">&lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; PostBackUrl=&quot;~/Page2.aspx&quot; Text=&quot;提交&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>Page2.aspx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;</span><br><span class="line">&lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; Text=&quot;传过来的值＝&quot;&gt;&lt;/asp:Label&gt;</span><br><span class="line">&lt;%=Request.QueryString[&quot;TextBox1&quot;]%&gt;  &lt;!--获取之前GET提交的参数--&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>一次性解决上述两个方法的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Request.Params[&quot;TextBox1&quot;]</span><br><span class="line">Request[&quot;TextBox1&quot;]</span><br></pre></td></tr></table></figure></blockquote><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><p>用于将数据从服务器发送回客户端</p><h3 id="在页面上输出数据"><a href="#在页面上输出数据" class="headerlink" title="在页面上输出数据"></a>在页面上输出数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response.Write(&quot;666&quot;) </span><br></pre></td></tr></table></figure><h3 id="页面重定向"><a href="#页面重定向" class="headerlink" title="页面重定向"></a>页面重定向</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response.Redirect(&quot;login.aspx&quot;)</span><br></pre></td></tr></table></figure><p><strong>带有数据的重定向</strong></p><p>Deafult.aspx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void btnOK_Click(object sender, EventArgs e)</span><br><span class="line">&#123; </span><br><span class="line">string name=this.txtName.Text;</span><br><span class="line">string sex=&quot;先生&quot;;</span><br><span class="line">if (rbtnSex2 .Checked) </span><br><span class="line">sex=&quot;女士&quot;;</span><br><span class="line">Response.Redirect(&quot;~/welcome.aspx?Name=“+name+&quot;&amp;Sex=&quot;+sex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>welcome.aspx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected void Page_Load(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">string name = Request.Params[&quot;Name&quot;];</span><br><span class="line">string sex = Request.Params[&quot;Sex&quot;];</span><br><span class="line">Response.Write(&quot;欢迎&quot;+name+sex+&quot;!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="停止程序运行"><a href="#停止程序运行" class="headerlink" title="停止程序运行"></a>停止程序运行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response.End();</span><br></pre></td></tr></table></figure><h2 id="Server对象"><a href="#Server对象" class="headerlink" title="Server对象"></a>Server对象</h2><p>专门为处理服务器上的特定任务而设计</p><h3 id="设置页面脚本的超时时间"><a href="#设置页面脚本的超时时间" class="headerlink" title="设置页面脚本的超时时间"></a>设置页面脚本的超时时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server.ScriptTimeout=200</span><br></pre></td></tr></table></figure><h3 id="设置在页面上显示HTML代码"><a href="#设置在页面上显示HTML代码" class="headerlink" title="设置在页面上显示HTML代码"></a>设置在页面上显示HTML代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;&lt;h1&gt;123&lt;/h1&gt;&quot;</span><br><span class="line">string res=Server.HtmlEncode（str）</span><br><span class="line">Response.Write(res)</span><br></pre></td></tr></table></figure><h3 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server.Execute(url)  //暂停当前页面的执行，转而去新网页执行代码，执行完后继续执行当前网页代码</span><br></pre></td></tr></table></figure><h3 id="Transfer"><a href="#Transfer" class="headerlink" title="Transfer"></a>Transfer</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server.Transfer(url)  //暂停当前页面的执行，转而去新网页执行代码,并且不会跳转回来</span><br></pre></td></tr></table></figure><h2 id="Session对象"><a href="#Session对象" class="headerlink" title="Session对象"></a>Session对象</h2><p>实现同一个客户端多页面间的数据共享和传递，直到用户关闭浏览器。</p><h3 id="调整Session过期时间"><a href="#调整Session过期时间" class="headerlink" title="调整Session过期时间"></a>调整Session过期时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session.Timeout=时间</span><br></pre></td></tr></table></figure><h3 id="在Session中添加与删除信息"><a href="#在Session中添加与删除信息" class="headerlink" title="在Session中添加与删除信息"></a>在Session中添加与删除信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Session.add(&quot;name&quot;,&quot;user1&quot;);</span><br><span class="line">Session[&quot;name&quot;]=&quot;user1&quot;;</span><br><span class="line">---</span><br><span class="line">Session.Remove(&quot;name&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>注意当使用Session时最好要使用ToString()或强制转换成string。</p></blockquote><h2 id="Applicatioin对象"><a href="#Applicatioin对象" class="headerlink" title="Applicatioin对象"></a>Applicatioin对象</h2><p>在使用当前应用程序的所有用户之间传递信息</p><h3 id="在Application中添加或删除信息"><a href="#在Application中添加或删除信息" class="headerlink" title="在Application中添加或删除信息"></a>在Application中添加或删除信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application[变量名]=值</span><br><span class="line">Application.add(变量名,值);</span><br><span class="line">---</span><br><span class="line">Application.Remove(&quot;name&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>注意当使用Application时最好要使用ToString()或强制转换成string。</p></blockquote><h3 id="页面的同步与互斥"><a href="#页面的同步与互斥" class="headerlink" title="页面的同步与互斥"></a>页面的同步与互斥</h3><p>为了使多个用户不能再同一时刻改变变量</p><p><img src="https://s2.loli.net/2021/12/20/SXnkWAONI2HVYba.png" alt="image-20211220205804019" style="zoom: 50%;" /></p><h2 id="Global-aspx"><a href="#Global-aspx" class="headerlink" title="Global.aspx"></a>Global.aspx</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void Application_Start(object sender, EventArgs e)</span><br><span class="line">&#123; //在应用程序启动时运行的代码 &#125;</span><br><span class="line">void Application_End(object sender, EventArgs e)</span><br><span class="line">&#123; //在应用程序关闭时运行的代码 &#125;</span><br><span class="line">void Session_Start(object sender, EventArgs e)</span><br><span class="line">&#123; //在新会话启动时运行的代码 &#125;</span><br><span class="line">void Session_End(object sender, EventArgs e)</span><br><span class="line">&#123; //在会话结束时运行的代码。 &#125;</span><br></pre></td></tr></table></figure><h2 id="Cookie对象"><a href="#Cookie对象" class="headerlink" title="Cookie对象"></a>Cookie对象</h2><p>Web服务器把少量数据（用户的相关信息）储存在客户端的硬盘或内存</p><h3 id="设置Cookie的过期时间"><a href="#设置Cookie的过期时间" class="headerlink" title="设置Cookie的过期时间"></a>设置Cookie的过期时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response.Cookies(&quot;passtime&quot;).Expires=“31/12/2006&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h3 id=&quot;Web服务器&quot;&gt;&lt;a href=&quot;#Web服务器&quot; class=&quot;headerlink&quot; title=&quot;Web服务器&quot;&gt;&lt;/a&gt;W</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UNIX</title>
    <link href="https://michael-d-666.github.io/2021/12/13/UNIX/"/>
    <id>https://michael-d-666.github.io/2021/12/13/UNIX/</id>
    <published>2021-12-13T00:04:35.000Z</published>
    <updated>2021-12-27T05:54:50.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="UNIX系统的主要特征"><a href="#UNIX系统的主要特征" class="headerlink" title="UNIX系统的主要特征"></a>UNIX系统的主要特征</h3><p>UNIX操作系统,是一个强大的<strong>多用户、 多任务</strong>操作系统，支持多种处理器架构，按照操作系统的分类，属于<strong>分时操作系统</strong>，最早由KenThompson、Dennis Ritchie于1969年在AT&amp;T的贝尔实验室开发。</p><ol><li><p>可移植性强</p><ul><li><p>UNIX操作系统大量代码为C语言编写</p></li><li><p>C语言具有跨平台特性  </p></li></ul></li><li><p>多用户多任务的分时系统</p><ul><li>人机间实时交互数据</li><li>多个用户可同时使用一台主机</li><li>每个用户可同时执行多个任务  </li></ul></li><li><p>文件系统可以随意装卸</p><ul><li>每个程序模块完成单一的功能</li><li>程序模块可按需任意组合</li><li>较高的系统和应用开发效率  </li></ul></li><li><p>与设备独立的输入/输出操作  </p><ul><li>打印机、终端视为文件</li><li>输入/输出操作与设备独立</li></ul></li><li><p>命令功能强大</p></li><li><p>安全机制完善</p><ul><li>口令、权限、加密等措施完善</li><li>误操作的局限和自动恢复功能</li></ul></li><li><p>多国语言支持</p></li><li><p>网络和资源共享</p></li><li><p>系统工具和系统服务</p><ul><li>100多种系统工具（命令），完成各种功能</li></ul></li></ol><h3 id="关键的时间节点，人物xx"><a href="#关键的时间节点，人物xx" class="headerlink" title="关键的时间节点，人物xx"></a>关键的时间节点，人物xx</h3><h3 id="安全性、稳定性为什么突出"><a href="#安全性、稳定性为什么突出" class="headerlink" title="安全性、稳定性为什么突出"></a>安全性、稳定性为什么突出</h3><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="系统关闭"><a href="#系统关闭" class="headerlink" title="系统关闭"></a>系统关闭</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reboot                     重启系统</span><br><span class="line">halt/shutdown/poweroff     系统关闭</span><br></pre></td></tr></table></figure><h4 id="修改系统用户密码"><a href="#修改系统用户密码" class="headerlink" title="修改系统用户密码"></a>修改系统用户密码</h4><p><img src="https://s2.loli.net/2021/12/26/i29RZ3l8azVtJmO.png" alt="image-20211226094518696"></p><h4 id="切换系统用户"><a href="#切换系统用户" class="headerlink" title="切换系统用户"></a>切换系统用户</h4><p><img src="https://s2.loli.net/2021/12/26/IlHZLvM86XqeSpY.png" alt="image-20211226094659507"></p><h4 id="输出指定文件的内容"><a href="#输出指定文件的内容" class="headerlink" title="输出指定文件的内容"></a>输出指定文件的内容</h4><p><img src="https://s2.loli.net/2021/12/26/syHwTvoILhEuQrF.png" alt="image-20211226095435940"></p><blockquote><p>注意 -b 会输出每行的结束标志</p></blockquote><h4 id="将内容输入指定文件"><a href="#将内容输入指定文件" class="headerlink" title="将内容输入指定文件"></a>将内容输入指定文件</h4><p><img src="https://s2.loli.net/2021/12/26/vkDhn5piGjSOqdM.png" alt="image-20211226095903968"></p><blockquote><p>注意会覆盖掉之前的内容</p></blockquote><h4 id="显示当前工作目录"><a href="#显示当前工作目录" class="headerlink" title="显示当前工作目录"></a>显示当前工作目录</h4><p><img src="https://s2.loli.net/2021/12/26/hcFAvSq7nkIO5tm.png" alt="image-20211226100028891"></p><h4 id="列出指定目录的所有文件的信息"><a href="#列出指定目录的所有文件的信息" class="headerlink" title="列出指定目录的所有文件的信息"></a>列出指定目录的所有文件的信息</h4><p><img src="https://s2.loli.net/2021/12/26/tC4Mhc8UEsyxuTN.png" alt="image-20211226100357263"></p><p><img src="https://s2.loli.net/2021/12/26/28IXOwTdlGuvLDQ.png" alt="image-20211226100508168"></p><blockquote><p>-a 命令列出的文件包括隐藏文件</p></blockquote><h4 id="修改文件的访问权限"><a href="#修改文件的访问权限" class="headerlink" title="修改文件的访问权限"></a>修改文件的访问权限</h4><p><img src="https://s2.loli.net/2021/12/26/BVHv8e2RxMyTJi7.png" alt="image-20211226101121567"></p><blockquote><p>+号可以用-和=替代，分别表示减少权限和设定权限<br>u可以用g，o替代，分别表示同组其他用户和其他所有用户</p></blockquote><p><img src="https://s2.loli.net/2021/12/26/VUb547vJTCsrXFD.png" alt="image-20211226101537092"></p><blockquote><p>三个8进制数字分别表示u，g，o<br>每个8进制数字的3位二进制分别表示rwx</p></blockquote><h4 id="文件目录的拷贝"><a href="#文件目录的拷贝" class="headerlink" title="文件目录的拷贝"></a>文件目录的拷贝</h4><p><img src="https://s2.loli.net/2021/12/26/kjpVQKfCImSqHod.png" alt="image-20211226102017499"></p><blockquote><p>-i  会确认是否要覆盖之前的文件<br>-r  拷贝指定目录中的所有内容</p></blockquote><h4 id="查看系统对某个命令的说明"><a href="#查看系统对某个命令的说明" class="headerlink" title="查看系统对某个命令的说明"></a>查看系统对某个命令的说明</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man ls</span><br></pre></td></tr></table></figure><h4 id="列出当前登录系统上用户的信息"><a href="#列出当前登录系统上用户的信息" class="headerlink" title="列出当前登录系统上用户的信息"></a>列出当前登录系统上用户的信息</h4><p><img src="https://s2.loli.net/2021/12/26/auKk1w52FH7TsWD.png" alt="image-20211226102542655"></p><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><p><img src="https://s2.loli.net/2021/12/26/Fkqb7T5G6IYm8DA.png" alt="image-20211226111057129"></p><blockquote><p>如果mkdir之后有 -P参数，则从根目录下开始创建多层目录；否则，从当前路径下创建多层目录。</p></blockquote><h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir china</span><br></pre></td></tr></table></figure><h4 id="改变文件的属组"><a href="#改变文件的属组" class="headerlink" title="改变文件的属组"></a>改变文件的属组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp 组名 文件名</span><br></pre></td></tr></table></figure><blockquote><p>chgrp 即change group</p></blockquote><h4 id="改变文件的所属用户"><a href="#改变文件的所属用户" class="headerlink" title="改变文件的所属用户"></a>改变文件的所属用户</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 用户名 文件名</span><br></pre></td></tr></table></figure><h4 id="建立文件的连接关系"><a href="#建立文件的连接关系" class="headerlink" title="建立文件的连接关系"></a>建立文件的连接关系</h4><p><img src="https://s2.loli.net/2021/12/26/Sr4W6eV8mYy7slQ.png" alt="image-20211226115503006"></p><blockquote><p>-s 表示软链接，和快捷方式是一个意思<br>-f 表示硬链接，创建了一个相同的副本，但不占用内存，也能同步更新</p></blockquote><h3 id="unix启动过程"><a href="#unix启动过程" class="headerlink" title="unix启动过程"></a>unix启动过程</h3><p><img src="https://s2.loli.net/2021/12/26/oMygRimq9ehNv8p.png" alt="image-20211226093020584"></p><h3 id="几种不同的shell"><a href="#几种不同的shell" class="headerlink" title="几种不同的shell"></a>几种不同的shell</h3><h3 id="内部命令、外部命令"><a href="#内部命令、外部命令" class="headerlink" title="内部命令、外部命令"></a>内部命令、外部命令</h3><h3 id="chmod-pwd"><a href="#chmod-pwd" class="headerlink" title="chmod pwd"></a>chmod pwd</h3><h3 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h3><hr><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>Vi编辑器使用9个临时缓冲区，编号从1到9，每次删除或复制的文件都放在这些缓冲区中，用户指定缓冲区号就可以访问任何一个缓冲区。每次新删除或复制的文本替换缓冲区以前的内容  </p><h3 id="找回缓冲区中的内容"><a href="#找回缓冲区中的内容" class="headerlink" title="找回缓冲区中的内容"></a>找回缓冲区中的内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“ + n + p</span><br></pre></td></tr></table></figure><blockquote><p>其中n表示缓冲区号</p></blockquote><h3 id="vi编辑器的基础命令"><a href="#vi编辑器的基础命令" class="headerlink" title="vi编辑器的基础命令"></a>vi编辑器的基础命令</h3><h4 id="删除当前这一行"><a href="#删除当前这一行" class="headerlink" title="删除当前这一行"></a>删除当前这一行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd</span><br></pre></td></tr></table></figure><h4 id="复制当前行"><a href="#复制当前行" class="headerlink" title="复制当前行"></a>复制当前行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yy</span><br></pre></td></tr></table></figure><h3 id="永久改变vi的环境"><a href="#永久改变vi的环境" class="headerlink" title="永久改变vi的环境"></a>永久改变vi的环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi .exrc  #编辑vi的环境</span><br></pre></td></tr></table></figure><hr><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="Shell的功能"><a href="#Shell的功能" class="headerlink" title="Shell的功能"></a>Shell的功能</h3><h4 id="命令解释"><a href="#命令解释" class="headerlink" title="命令解释"></a>命令解释</h4><p>接受用户输入命令并解释分析命令、最后执行用户命令</p><p><img src="https://s2.loli.net/2021/12/13/GsnCgpvM7Q5RcmV.png" alt="image-20211213113346449" style="zoom:50%;" /></p><p>程序设计语言：使用shell脚本语言完成比较复杂的命令执行过程</p><h3 id="系统环境设置"><a href="#系统环境设置" class="headerlink" title="系统环境设置"></a>系统环境设置</h3><p>环境变量分为两类：</p><ol><li>10—30个环境变量与用户登录标识相关联，自动生成、由shell维护、随用户注销而消失；  </li><li>用户私有环境变量,有特殊目的、给用户很大的设置自由度。  </li></ol><h3 id="标准流及重定向方法"><a href="#标准流及重定向方法" class="headerlink" title="标准流及重定向方法"></a>标准流及重定向方法</h3><p>标准输入流的文件描述符是0；标准输出流的文件描述符是1；标准错误流的文件描述符是2</p><h4 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h4><p>命令 <strong>&gt;</strong> file1：将命令的输出内容写入文件file1，但是会覆盖file1中的内容。（<strong>&gt;</strong>左边省略1）<br>命令 <strong>&gt;&gt;</strong> file1：将命令的输出内容写入文件file2，添加在原有文件之后。</p><h4 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h4><p>命令 <strong>&lt;</strong> file1：从文件1读取内容作为参数执行命令。（<strong>&lt;</strong>左边省略0）</p><h4 id="错误流重定向"><a href="#错误流重定向" class="headerlink" title="错误流重定向"></a>错误流重定向</h4><p>命令 2<strong>&gt;</strong>  file1：将文件输出的错误重定向到file1中。<br>命令 <strong>&gt;</strong>  file1  2&gt;&amp;1 ：输出流和错误流的输出位置是一样的</p><h4 id="管道线命令"><a href="#管道线命令" class="headerlink" title="管道线命令"></a>管道线命令</h4><p>命令1 | 命令2 ：将第一个命令的执行结果作为第二个命令的输入</p><h3 id="Shell的种类"><a href="#Shell的种类" class="headerlink" title="Shell的种类"></a>Shell的种类</h3><blockquote><p>K-shell、B-shell：在程序设计中有优势<br>C-shell：在命令使用中有优势，符合C编程习惯</p></blockquote><p>查看当前shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$shell</span></span><br></pre></td></tr></table></figure><hr><h2 id="第五章（重点）"><a href="#第五章（重点）" class="headerlink" title="第五章（重点）"></a>第五章（重点）</h2><h3 id="Shell中的文件类型"><a href="#Shell中的文件类型" class="headerlink" title="Shell中的文件类型"></a>Shell中的文件类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-   普通文件（在长列表形式下以_形式开头）</span><br><span class="line">d   目录文件</span><br><span class="line">l   链接文件</span><br><span class="line">c   字符设备文件</span><br><span class="line">s   Socket文件</span><br><span class="line">p   命名管道文件</span><br><span class="line">b   块设备文件</span><br></pre></td></tr></table></figure><h3 id="Shell程序执行的方式"><a href="#Shell程序执行的方式" class="headerlink" title="Shell程序执行的方式"></a>Shell程序执行的方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh test.sh</span><br><span class="line">sh &lt; test.sh</span><br><span class="line">test.sh  (要保证有可执行权限)</span><br></pre></td></tr></table></figure><h3 id="Shell中变量的使用"><a href="#Shell中变量的使用" class="headerlink" title="Shell中变量的使用"></a>Shell中变量的使用</h3><p>Shell中的变量只有字符类型，在shell程序中出现的数值计算都是基于字符串类型完成的。<br><strong>注意</strong>：B-shell中的“=”两边不能有空格，==在shell中0为真，非0为假==</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误的算术运算</span></span><br><span class="line">count = 9</span><br><span class="line">count = <span class="variable">$count</span> + 11</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$count</span>   <span class="comment"># 显示9+11</span></span><br><span class="line"><span class="comment"># 正确的算术运算</span></span><br><span class="line">count = 9</span><br><span class="line">count = `expr <span class="variable">$count</span> + 11`  <span class="comment"># 使用expr命令对变量进行算数运算操作</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$count</span></span><br></pre></td></tr></table></figure><p>对变量的访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=5</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>    5</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>   5    <span class="comment"># 表示对变量的强调</span></span><br><span class="line"><span class="built_in">echo</span> “<span class="variable">$a</span>”    5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$a is good&#x27;</span>  <span class="comment">#  $a is good    对单引号中的内容保留原样</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> is good&quot;</span>   <span class="comment"># 5 is good   对双引号中的特殊字符用shell中的含义解释</span></span><br><span class="line"><span class="built_in">echo</span> `whoami`  <span class="comment"># 输出whoami 命令执行的结果</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/13/NVxY3JkMvO7ZXS5.png" alt="image-20211213144509189"></p><p><strong>全局变量</strong>：export $a</p><p><strong>位置变量</strong>：在shell中可以使用 $0、$1来代替参数</p><p><img src="https://s2.loli.net/2021/12/13/xL8bOyDn1Se7g9j.png" alt="image-20211213151411186"></p><p>​     特殊的位置变量：$$ 表示当前shell进程的pid值，$#表示位置参数的个数；$?表示上一条结果的返回值</p><p><strong>shell中变量的替换</strong>：当变量还没有被赋值的时候用一个预先定义的字符串来替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;var:-word&#125;  如果var已经被赋值，就取var的值，否则取word的值，但var不改变</span><br><span class="line">&#123;var:=word&#125;  如果var已经被赋值，则取var的值，否则取word的值，且把值给var</span><br><span class="line">&#123;var:+word&#125;  如果var已经被赋值，则取var的值，否则var置空</span><br></pre></td></tr></table></figure><h3 id="shell中test命令的使用"><a href="#shell中test命令的使用" class="headerlink" title="shell中test命令的使用"></a>shell中test命令的使用</h3><p>shell中的test命令就和C语言中的<strong>if</strong>中的判断一样</p><p><strong>对文件类型进行测试</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -d file1  <span class="comment"># file1存在且为目录文件 directory</span></span><br><span class="line"><span class="built_in">test</span> -f file1  <span class="comment"># file1存在且为普通文件  </span></span><br><span class="line"><span class="built_in">test</span> -r file1  <span class="comment"># file1存在且为可读文件 read</span></span><br><span class="line"><span class="built_in">test</span> -w file1  <span class="comment"># file1存在且为可写文件 write</span></span><br><span class="line"><span class="built_in">test</span> -x file1  <span class="comment"># file1存在且为可执行文件 exe</span></span><br><span class="line"><span class="built_in">test</span> -s file1  <span class="comment"># file1存在且文件长度非0</span></span><br></pre></td></tr></table></figure><p><strong>对字符串内容进行测试</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x1=<span class="string">&quot;005&quot;</span>  x2=<span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="built_in">test</span> <span class="string">&quot;<span class="variable">$x1</span>&quot;</span> = <span class="string">&quot;<span class="variable">$x2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> $?   返回前一天命令的结果/系统将显示1，表示x1和x2不相等</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/13/wrcFCMLhgSI14Td.png" alt="image-20211213195455597"></p><p><strong>对整数进行测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> n1 -eq n2   <span class="comment"># equal</span></span><br><span class="line"><span class="built_in">test</span> n1 -ne n2   <span class="comment"># not equal</span></span><br><span class="line"><span class="built_in">test</span> n1 -lt n2   <span class="comment"># less than</span></span><br><span class="line"><span class="built_in">test</span> g1 -gt n2 <span class="comment"># greater than</span></span><br><span class="line"><span class="built_in">test</span> g2 -ge n2   <span class="comment"># greater and equal</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/13/gQ7b2UFScXLq34B.png" alt="image-20211213200118063"></p><h3 id="Shell中的分支语句"><a href="#Shell中的分支语句" class="headerlink" title="Shell中的分支语句"></a>Shell中的分支语句</h3><p><strong>if 语句</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [condition1]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">命令1</span><br><span class="line">命令2</span><br><span class="line"><span class="keyword">elif</span> [condition2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">命令1</span><br><span class="line">命令2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">命令n</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>例题</p><blockquote><p>假 设 一 个 连 续 运 行 系 统 ， 将 建 立 错 误 记 录 文 件errorfile 并不断写入错误信息。 现在要求编写一个shell程序来产生定时错误日志文件datelog,能在datelog 中体现每个时间段中的错误信息  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># checkerr.sh To check error information with time stamp !!!</span></span><br><span class="line">date &gt;&gt; datelog</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> –r errorfile</span><br><span class="line"><span class="keyword">then</span> cat errorfile &gt;&gt; datelog</span><br><span class="line">rm errorfile</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> “No error occurs during this hour!“ &gt;&gt; datelog</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><strong>case 语句</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">模式1 ) 命令1  ;;  <span class="comment">#  ;;相当于break</span></span><br><span class="line">模式2 ) 命令2  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        start | begin)</span><br><span class="line">          <span class="built_in">echo</span> <span class="string">&quot;start something&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        stop | end)</span><br><span class="line">          <span class="built_in">echo</span> <span class="string">&quot;stop something&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">          <span class="built_in">echo</span> <span class="string">&quot;Ignorant&quot;</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>例题</p><blockquote><p>编写一段shell程序， 根据执行时获取的当前时间显示不同的问候信息  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hello.sh</span></span><br><span class="line">hour = `date +%H`</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$hour</span> <span class="keyword">in</span></span><br><span class="line">0[1-9] | 1[01] ) <span class="built_in">echo</span> “Good morining !!” ;;</span><br><span class="line">1[234567] ) <span class="built_in">echo</span> “Good afternoon !!” ;;</span><br><span class="line">•) <span class="built_in">echo</span> “Good evening !! ” ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><blockquote><p>利用shell的位置变量参数编写一个shell， 当只有一个参数时， 从键盘输入文本保存到data.txt中， 当有两个参数时， 将参<br>数1代表的文件内容添加到参数2表示的文件， 其他情况则给出错误提示信息  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># append.sh</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$#</span> <span class="keyword">in</span></span><br><span class="line">1 ) cat &gt;&gt; data.txt;;</span><br><span class="line">2 ) cat <span class="variable">$1</span> &gt;&gt; <span class="variable">$2</span> ;;</span><br><span class="line">* ) <span class="built_in">echo</span> “Incorrect usage ! ” ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="Shell中的循环语句"><a href="#Shell中的循环语句" class="headerlink" title="Shell中的循环语句"></a>Shell中的循环语句</h3><p><strong>for循环</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> list-of-vars </span><br><span class="line"><span class="comment"># shell扫描list-of-vars每次循环拿出一个赋值给var并执行do和done之间的语句。执行次数为list-of-vars中变量的个数</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">命令1</span><br><span class="line">命令2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>while循环</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [condition]  <span class="comment"># 只要循环条件为真，就一直循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">命令1</span><br><span class="line">命令2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>util循环</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">until [condition] <span class="comment"># 只要循环条件为假，就一直执行</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">命令1</span><br><span class="line">命令2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>例题</p><blockquote><p>编写shell程序一次性创建若干个新文件， 如file1, file2,file3. . . . . . file10  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># genfiles.sh</span></span><br><span class="line">NUMBER = 1</span><br><span class="line">While [ <span class="variable">$NUMBER</span> –lt 11]</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">touch file<span class="variable">$NUMBER</span></span><br><span class="line">NUMBER = `expr <span class="variable">$NUMBER</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="Shell程序的调试"><a href="#Shell程序的调试" class="headerlink" title="Shell程序的调试"></a>Shell程序的调试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-v 当输入shell命令时把他们显示出来，再显示要执行的实际内容，最后一直执行下去</span><br><span class="line">-x 执行前把命令和参数显示出来</span><br><span class="line"><span class="built_in">set</span> -v(x)  ... <span class="built_in">set</span> +v(x)    把需要跟踪的部分包起来</span><br></pre></td></tr></table></figure><h3 id="编程示例"><a href="#编程示例" class="headerlink" title="编程示例"></a>编程示例</h3><blockquote><p>使用for循环语句编写Bshell程序， 完成显示用户注册目录下a_sub, b_sub子目录下的所有C程序源文件和目标文件的列表  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># showCfile.sh</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -d <span class="variable">$HOME</span>/a_sub</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- the .c and .obj files in <span class="variable">$HOME</span>/a_sub: －-&quot;</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> `ls <span class="variable">$HOME</span>/a_sub`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$filename</span> <span class="keyword">in</span></span><br><span class="line">*.c) <span class="built_in">echo</span> <span class="variable">$filename</span>;;</span><br><span class="line">*.obj) <span class="built_in">echo</span> <span class="variable">$filename</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$HOME</span>/a_sub does not exist!!&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -d <span class="variable">$HOME</span>/b_sub</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;--- the .c and .obj files in <span class="variable">$HOME</span>/b_sub: ---</span></span><br><span class="line"><span class="string">for filename in `ls <span class="variable">$HOME</span>/b_sub`</span></span><br><span class="line"><span class="string">do</span></span><br><span class="line"><span class="string">case <span class="variable">$filename</span> in</span></span><br><span class="line"><span class="string">*.c) echo <span class="variable">$filename</span> is a C source file!;;</span></span><br><span class="line"><span class="string">*.obj) echo <span class="variable">$filename</span> is an Object file!;;</span></span><br><span class="line"><span class="string">esac</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">echo &quot;</span><span class="variable">$HOME</span>/b_sub does not exist!!<span class="string">&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br></pre></td></tr></table></figure><blockquote><p>持续检测文件abc.txt是否存在  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [<span class="built_in">test</span> -r abc.txt]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;file abc.txt has not beed deleted !“</span></span><br><span class="line"><span class="string">sleep 10</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string">echo &quot;</span>file abc.txt has beed deleted !</span><br></pre></td></tr></table></figure><blockquote><p>统计文件file的行数  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">count=0</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> LINE</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">count=`expr <span class="variable">$count</span> + 1`</span><br><span class="line"><span class="keyword">done</span> &lt; file</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$count</span></span><br><span class="line">或者 cat file | wc -l</span><br></pre></td></tr></table></figure><blockquote><p>编写shell程序files.sh实现如下功能：从命令行输入1到3个文件名,如果只输入一个文件名， 则从键盘录入信息， 保存到该文件中；如果输入两个文件名， 则先显示两个文件的内容， 再将文件1的内容追加到文件2的末尾；如果输入3个文件名， 则将文件1和文件2的内容合并覆盖到文件3上  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$#</span> <span class="keyword">in</span></span><br><span class="line">1) cat &gt;&gt; <span class="variable">$1</span>;;</span><br><span class="line">2) cat &lt;<span class="variable">$1</span> &gt;&gt;<span class="variable">$2</span>;;</span><br><span class="line">3) cat <span class="variable">$1</span> <span class="variable">$2</span> &gt;&gt;<span class="variable">$3</span>;;</span><br><span class="line">*) <span class="built_in">echo</span> <span class="string">&quot;To many param&quot;</span></span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">if</span> [<span class="built_in">test</span> <span class="variable">$#</span> -eq 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">cat&gt;&gt;<span class="variable">$1</span></span><br><span class="line"><span class="keyword">elif</span> <span class="variable">$#</span>=2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">cat &lt;<span class="variable">$1</span> &gt;&gt;<span class="variable">$2</span></span><br><span class="line"><span class="keyword">elif</span> <span class="variable">$#</span>=3</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    cat <span class="variable">$1</span> <span class="variable">$2</span> &gt;&gt;<span class="variable">$3</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> “error”</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><hr><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p><strong>系统调用</strong>：用户程序通过系统调用实现对系统内核功能的使用及各种硬件资源的访问<br><img src="https://s2.loli.net/2021/12/13/ih7QYLCAHTgBnoW.png" alt="image-20211213205936135"></p><h3 id="建立可执行程序的步骤"><a href="#建立可执行程序的步骤" class="headerlink" title="建立可执行程序的步骤"></a>建立可执行程序的步骤</h3><ol><li>建立源文件</li><li>建立目标文件：由编译程序和解释程序把源代码翻译成机器能理解的语言，但此时还无法执行，因为缺少库文件</li><li>建立可执行文件：由链接程序将多个程序代码链接在一起</li></ol><p><img src="https://s2.loli.net/2021/12/13/bPCsRp9HoQUvtL2.png" alt="image-20211213210454586"></p><p><strong>编译程序</strong>：一次编译，在编译完成之前没有任何结果（LINUX中的c/c++的编译程序时gcc）<br><strong>解释程序</strong>：每次执行都要重新解释。（LINUX中shell的解释程序是bash）</p><h3 id="GCC的使用"><a href="#GCC的使用" class="headerlink" title="GCC的使用"></a>GCC的使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -c  file1  <span class="comment"># 只编译并生成目标文件（.o）</span></span><br><span class="line">gcc -g  file1  <span class="comment"># 生成调试信息</span></span><br><span class="line">gcc -o file  file1  <span class="comment"># 编译file1并指定生成的文件名file</span></span><br><span class="line">gcc -0 file file1 file2 file3 <span class="comment"># 编译file1,file2,file3并指定生成的文件名file</span></span><br></pre></td></tr></table></figure><h3 id="make工具的使用"><a href="#make工具的使用" class="headerlink" title="make工具的使用"></a>make工具的使用</h3><p><strong>优点</strong>：如果只修改了某几个源文件，则只需要重新编译这几个源文件，如果某个源文件被修改，只要重新编译包含该头文件的源文件。大大简化了编译工作。</p><p><strong>途径</strong>：Makefile文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.o :test.c test.h  <span class="comment"># 目标文件为test.0 依赖于test.c和test.h</span></span><br><span class="line">g++ -c -g test.c  <span class="comment"># 依赖test.c建立目标文件test.o</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Network: Subrs.o network.o</span><br><span class="line">gcc -o Network Subrs.o network.o</span><br><span class="line">Subrs.o: Subrs.c Netdefs.h</span><br><span class="line">gcc -c Subrs.c</span><br><span class="line">network.o: network.c Netdefs.h</span><br><span class="line">gcc -c network.c</span><br><span class="line">clean:</span><br><span class="line">rm -f *.o</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/13/xWLY1NgBi9qHszr.png" alt="image-20211213211654536"></p><h4 id="make中-变量的宏定义"><a href="#make中-变量的宏定义" class="headerlink" title="make中 变量的宏定义"></a>make中 变量的宏定义</h4><p><strong>目的</strong>：为了不用输入冗长的命令</p><p><strong>后缀规则</strong><br><strong>模式规则</strong></p><hr><h2 id="第七章-文件管理系统"><a href="#第七章-文件管理系统" class="headerlink" title="第七章 文件管理系统"></a>第七章 文件管理系统</h2><p><strong>文件管理</strong>本质上是对文件的各种属性进行管理</p><h3 id="文件的概念、按名存储、透明存储"><a href="#文件的概念、按名存储、透明存储" class="headerlink" title="文件的概念、按名存储、透明存储"></a>文件的概念、按名存储、透明存储</h3><h3 id="文件管理的系统调用"><a href="#文件管理的系统调用" class="headerlink" title="文件管理的系统调用"></a>文件管理的系统调用</h3><h3 id="UNIX中的文件"><a href="#UNIX中的文件" class="headerlink" title="UNIX中的文件"></a>UNIX中的文件</h3><p><strong>UNIX中的文件体系</strong>：文件系统从根目录开始向下延伸组成了文件系统的倒置树形的目录里关系体系<br><strong>UNIX中的文件性质</strong>：对操作系统而言，文件就是一组字节序列的数据而已<br><strong>UNIX中的文件范围</strong>：UNIX中每一个对象都表示为文件（包括硬件设备）。</p><h3 id="UNIX中的文件类型"><a href="#UNIX中的文件类型" class="headerlink" title="UNIX中的文件类型"></a>UNIX中的文件类型</h3><p><strong>普通文件</strong>(用 <strong>-</strong> 表示)：<br>普通文件的基本属性信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文件名</span><br><span class="line">文件的索引号    （文件在系统中的唯一标识）</span><br><span class="line">文件的字节数</span><br><span class="line">最后访问时间</span><br><span class="line">文件存取权限</span><br><span class="line">属主名</span><br><span class="line">属组名</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/14/BmTDaW5pSCFco9s.png" alt="image-20211214104809662"></p><p>上图第5行解释：-表示普通文件，rwx表示属主权限，接着的rwx表示属组权限，接着的r-x表示其他用户的权限，1表示文件的链接数为1。这个文件的属主是dwz，属组也是dwz，文件的大小为52KB。最后的修改日期是15月13号15：13分，文件名是a.sh</p><p>常见的普通文件逻辑结构：<br>堆文件、 顺序文件、 索引顺序文件、 索引文件、 散列文件  。</p><p><strong>目录文件</strong>（用 <strong>d</strong> 表示,相当于文件夹）：<br>目录文件是能够存放任何类型文件的容器。<strong>注意</strong>：和windows的目录树结构有区别，unix的目录树只有一个根节点，而windows通常是一个磁盘分区就有一个对应的根节点。</p><p><strong>特殊/设备文件</strong>：<br>UNIX将硬件设备看作是文件，为了和普通文件区分开来，把这类文件定义为特殊文件。<br>主要有<strong>字符特殊设备文件</strong>（用 <strong>c</strong> 表示）和<strong>块特殊设备文件</strong>（用 <strong>b</strong> 表示）。</p><p><strong>命名管道</strong>（用 <strong>p</strong> 表示，用于两个进程的信息传送）：之后的章节会具体讲</p><p><strong>符号链接</strong>（用 <strong>l</strong> 表示，类似于快捷方式）：通过命令ln -s 创建一个符号链接并存放它所指的文件的路径名。</p><h3 id="文件管理的主要功能"><a href="#文件管理的主要功能" class="headerlink" title="文件管理的主要功能"></a>文件管理的主要功能</h3><p><strong>按名存取</strong>：</p><ol><li><p>将用户的程序或者数据按文件名方式存放在某种存储介质上</p></li><li><p>能完成快速方便的透明存取</p><blockquote><p>透明存取：所有文件的内部操作如空间管理等不需要用户了解，只需要给出文件名和该文件存在的路径就可以快速完成文件的访问与执行。</p></blockquote></li></ol><p><strong>对磁盘及其他存储器的空间进行统一的管理</strong></p><p><strong>制定科学合理的文件存放结构</strong></p><p><strong>完成物理存储上设备上文件的查找、读、写等操作</strong></p><p><strong>提供文件共享和文件保护的功能</strong></p><h3 id="文件系统体系结构"><a href="#文件系统体系结构" class="headerlink" title="文件系统体系结构"></a>文件系统体系结构</h3><p><img src="https://s2.loli.net/2021/12/14/L9AmQtlJ8pkfnKb.png" alt="image-20211214151205647"></p><h3 id="文件系统的安装与卸载"><a href="#文件系统的安装与卸载" class="headerlink" title="文件系统的安装与卸载"></a>文件系统的安装与卸载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount -t msdos /dev/fd0   /mnt/floppy <span class="comment"># 将dos格式的软磁盘安装到/mnt/floppy目录下，分区名称为/dev/fd0</span></span><br><span class="line">unmount /dev/fd0  <span class="comment"># 将文件系统卸载</span></span><br></pre></td></tr></table></figure><h3 id="文件系统的存储结构"><a href="#文件系统的存储结构" class="headerlink" title="文件系统的存储结构"></a>文件系统的存储结构</h3><p><strong>windows系统</strong><br><img src="https://s2.loli.net/2021/12/14/7gBCMHXVoN5b6mh.png" alt="image-20211214161226619"></p><p><strong>UNIX系统</strong><br><img src="https://s2.loli.net/2021/12/14/SDIor6xtZ5kq3Pe.png" alt="image-20211214161334003"><br>优点：提高目录的检索速度</p><h3 id="文件系统的访问"><a href="#文件系统的访问" class="headerlink" title="文件系统的访问"></a>文件系统的访问</h3><p><strong>文件描述符</strong>：表示为int类型的对象。如标准输入对应的文件描述符0</p><p><strong>流</strong>：表示指向结构FILE的指针file*，也被叫做文件指针（流是通过文件描述符实现的）</p><h4 id="低级输入与输出"><a href="#低级输入与输出" class="headerlink" title="低级输入与输出"></a>低级输入与输出</h4><p><strong>文件的打开</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename,<span class="keyword">int</span> flags,<span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line"><span class="comment">//flag取值O_RDONLY (为只 读而 打开文 件 ), O_WRONLY, O_RDWR,O_APPEND(文件位置移至文件尾， 所有write操作写数据至文件尾部）</span></span><br><span class="line"><span class="comment">// 正常返回值是一个非负整数（&gt;=3）,即文件描述符</span></span><br></pre></td></tr></table></figure><p><strong>文件的关闭</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> filedes)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 释放文件描述字filedes，此后仍可以再次open</span></span></span><br><span class="line"><span class="function"><span class="comment">// 正常返回值是0，出错返回值是-1</span></span></span><br></pre></td></tr></table></figure><p><strong>文件的读写</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> filedes,<span class="keyword">void</span> *buffer,<span class="keyword">size_t</span> nbytes)</span></span></span><br><span class="line"><span class="function"><span class="comment">// filedes是文件描述字 buffer是存放到的缓冲区 ，大小为nbytes字节</span></span></span><br><span class="line"><span class="function"><span class="comment">// 正常的返回值是0，出错返回-1</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> filedes,<span class="keyword">void</span> *buffer,<span class="keyword">size_t</span> nbytes)</span></span></span><br><span class="line"><span class="function"><span class="comment">// filedes是文件描述字 buffer是写出的缓冲区 ，大小为nbytes字节</span></span></span><br><span class="line"><span class="function"><span class="comment">// 正常的返回值是实际写出的字节数&lt;=nbytes，出错返回-1</span></span></span><br></pre></td></tr></table></figure><p><strong>文件的随机存取</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">off_t</span> <span class="title">lseek</span><span class="params">(<span class="keyword">int</span> filedes， <span class="keyword">off_t</span> offset,<span class="keyword">int</span> origin)</span></span>;</span><br><span class="line"><span class="comment">// filedes是文件描述字  offset是根据origin的偏移量  origin指名基准点</span></span><br><span class="line"><span class="comment">// 基准点可以在开头，也可以在结尾，甚至大于结尾</span></span><br><span class="line"><span class="comment">// 返回值是当前的文件偏移量</span></span><br><span class="line"><span class="comment">// 若origin是SEEK_SET,则当前偏移量就是offset</span></span><br><span class="line"><span class="comment">// 若origin是SEEK_CUR,则当前偏移量就是之前的文件偏移量加上offset</span></span><br><span class="line"><span class="comment">// 若origin是SEEK_END,则当前偏移量就是文件的字节数加上offset</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">int</span> <span class="title">tell</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"><span class="comment">//报告当前的文件偏移量</span></span></span><br></pre></td></tr></table></figure><p><strong>文件记录的锁定</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lockf</span><span class="params">(<span class="keyword">int</span> filedes， <span class="keyword">int</span> func,<span class="keyword">off_t</span> size)</span></span></span><br><span class="line"><span class="function"><span class="comment">// filedes是将要锁定文件记录 的文件描述符</span></span></span><br><span class="line"><span class="function"><span class="comment">// func取值为0，1，2，3。分别表示</span></span></span><br><span class="line"><span class="function"><span class="comment">// 0 开锁  1 锁定（若已锁定则睡眠）  2 测试是否锁定，若已锁定则返回-1.若为锁定锁定 3 测试是否锁定，若已锁定则返回-1，若为锁定则返回0 </span></span></span><br></pre></td></tr></table></figure><p><strong>重复描述字</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> old,<span class="keyword">int</span> <span class="keyword">new</span>)</span></span></span><br><span class="line"><span class="function"><span class="comment">//old是旧的描述子，new是新的描述字  返回值是新的描述字</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><h3 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h3><h4 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h4><p>看成某种特定任务的程序在一个数据集合上的一次具体的活动（动态的、独立的，并发的）。</p><h4 id="进程的描述"><a href="#进程的描述" class="headerlink" title="进程的描述"></a>进程的描述</h4><p>进程的结构=进程描述信息（PCB）+进程的实体（程序段+数据结构）</p><p><strong>PCB</strong>：包括进程的描述信息、控制信息及进程使用资源信息、处理器现场保护结构等，其中内容是进程动态特征的集中反映 。</p><h4 id="五进程模式"><a href="#五进程模式" class="headerlink" title="五进程模式"></a>五进程模式</h4><p><img src="https://s2.loli.net/2021/12/24/a2qhXJ8ixAltSbf.png" alt="image-20211224154643033"></p><h4 id="进程的控制"><a href="#进程的控制" class="headerlink" title="进程的控制"></a>进程的控制</h4><p><strong>原语</strong>：不可分解，不间断，不可并发执行的程序段</p><p><strong>临界区</strong>：不允许多个并发的程序交叉执行的代码</p><p><strong>信号量</strong>： 描述共享资源使用情况的数据结构</p><h3 id="UNIX中的进程"><a href="#UNIX中的进程" class="headerlink" title="UNIX中的进程"></a>UNIX中的进程</h3><p><img src="https://s2.loli.net/2021/12/24/Qji1BIwcd7Z6Myf.png" alt="image-20211224155046095" style="zoom:33%;" /></p><p>Linux的所有进程都是由init进程开始的，从而构成一个完整的进程树。</p><h4 id="进程调度和管理"><a href="#进程调度和管理" class="headerlink" title="进程调度和管理"></a>进程调度和管理</h4><p><strong>动态优先级多级反馈循环调度法</strong>：</p><h3 id="进程存储技术"><a href="#进程存储技术" class="headerlink" title="进程存储技术"></a>进程存储技术</h3><ol><li><p>连续分配存储技术</p><p>缺点：可能产生碎片，但可以利用内存紧缩技术。</p></li><li><p>覆盖和交换技术</p><p><strong>覆盖</strong>：一个程序的几段代码按调用顺序先后覆盖共享内存区域。</p><p><strong>交换</strong>：将暂不执行的代码放在外存交换区，以获得更大的内存空间。</p></li><li><p>分页存储管理</p><p><strong>静态页式管理</strong>：在执行前将进程的程序段和数据段一次性装入内存。此时会有一张请求表在PCB中，用于描述内存各个页面的分配情况</p><p><img src="https://s2.loli.net/2021/12/24/O9oke4ys13rXUv8.png" alt="image-20211224161132281"></p><p><strong>动态分页管理</strong>：只要将执行部分调入，动态管理各部分在内存中的调入和调出。</p></li><li><p>段式存储管理</p><p>以段为单位分配内存分区，段可以不连续。进程按逻辑内容分段</p><p><strong>特点</strong>：段的长度可以不固定，并且段的划分可以包含逻辑意义；各段内容可以分别编写和分别编译。</p></li></ol><h3 id="虚拟存储技术"><a href="#虚拟存储技术" class="headerlink" title="虚拟存储技术"></a>虚拟存储技术</h3><h4 id="程序的局部性原理"><a href="#程序的局部性原理" class="headerlink" title="程序的局部性原理"></a>程序的局部性原理</h4><p>程序执行过程中，在较短的时间内，所执行的指令地址以及操作数地址分别局限在一个很小的局部中。</p><h4 id="虚存的原理"><a href="#虚存的原理" class="headerlink" title="虚存的原理"></a>虚存的原理</h4><p>只需要将当前要执行的部分页和部分段读入到内存中就可以让程序开始执行。利用缺页和缺段请求，动态实现存储管理。</p><h4 id="进程的存储管理"><a href="#进程的存储管理" class="headerlink" title="进程的存储管理"></a>进程的存储管理</h4><ol><li><p>交换策略</p><p>由0号进程负责调度和交换工作</p><p><strong>特点</strong>：实现过程简单、 系统开销小， 但进程频繁交换也会影响到系统的执行效率  请求掉页策略。</p><p>只保留当前活动进程的某些页面，但不放入整个进程页面。</p><p><strong>特点</strong>：虚拟地址空间技术， 使进程的地址空间可以远大于实际的物理存储空间，并允许较多的进程同时装入内存， 使系统内存管理能力增大。 但是在请求调页式管理中， 从逻辑地址到物理地址的转换比较复杂， 这种复杂度有可能会影响到系统性能 。 </p></li></ol><h3 id="UNIX的系统调用"><a href="#UNIX的系统调用" class="headerlink" title="UNIX的系统调用"></a>UNIX的系统调用</h3><ol><li><p>进程的创建</p><p>如果创建不成功，则返回负数。</p><p>对于子进程来说，返回值为0；对于父进程来说，返回值是大于0的子进程的pid号</p><p><img src="https://s2.loli.net/2021/12/24/VPGyDUKOSkmz8ph.png" alt="image-20211224171332773"></p><p>getpid()获取当前进程的ID;<br>getppid()返回当前进程的父进程ID</p><p><img src="https://s2.loli.net/2021/12/24/A8vmTcaiYs9VU1S.png" alt="image-20211224171456404"></p></li><li><p>进程的退出</p><p><img src="https://s2.loli.net/2021/12/25/Lio2cb8gyr5aEjY.png" alt="image-20211225223959595"></p><p>如果code==0，则以正常方式退出，否则以非正常方式退出。<br><img src="https://s2.loli.net/2021/12/25/KmSpBAzDVGYFT4u.png" alt="image-20211225224429347"></p><p>__exit()函数是exit()函数的核心，直接让程序停止运行。相比而言，exit()函数在调用时会把缓冲区的文件写回文件中并清空。</p></li><li><p>进程中程序的覆盖<br><img src="https://s2.loli.net/2021/12/25/4x3i7vrtLBYAGZR.png" alt="image-20211225231206795"></p><p>当成功执行完函数之后，在原本函数之后的语句就不执行了。</p></li><li><p>进程的终止与僵死进程</p><p>僵死进程：已经终止，但没有由父进程等待的进程。这是的进程放弃了几乎所有的内存空间，没有任何可执行代码，也不能被调度，仅在进程列表中有一个位置。</p><p><strong>注意</strong>：被终止的子进程要通过wait释放掉</p></li><li><p>system函数</p><p><img src="https://s2.loli.net/2021/12/26/jx3OTERhaulYd7c.png" alt="image-20211226082732920"></p><p>参数command为要执行的命令字符串， 它将被直接传送给UNIX的命令解释程序shell， 由shell来执行该命令。  </p></li></ol><h3 id="页"><a href="#页" class="headerlink" title="页"></a>页</h3><p>面置换算法2、3、书上例子</p><hr><h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><h3 id="通信基本概念"><a href="#通信基本概念" class="headerlink" title="通信基本概念"></a>通信基本概念</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p><strong>低级通信</strong>：控制信息的传递<br><strong>高级通信</strong>：大批数据的传递</p><h4 id="基本通信方式"><a href="#基本通信方式" class="headerlink" title="基本通信方式"></a>基本通信方式</h4><p><strong>主从式通信</strong>：通信的双方存在隶属关系<br><strong>会话式通信</strong>：通信进程双方采用请求应答的方式进行通信<br><strong>消息或邮件通信</strong>：通信双方处于同等地位，发的消息通过系统或邮件系统进行大批量数据传递<br><strong>共享存储区通信</strong>：进程之间采用进程通信信息 共享存储区的通信方式来完成进程间的通信。</p><h4 id="UNIX中的通信方式"><a href="#UNIX中的通信方式" class="headerlink" title="UNIX中的通信方式"></a>UNIX中的通信方式</h4><p><strong>基本通信</strong>：简单的信息传递，协调各进程之间的同步和互斥。</p><ol><li><p>锁文件通信</p></li><li><p>记录锁定文件通信</p></li><li><p>信号</p><blockquote><p>信号是传送给进程的一种事件通知。每一个信号有一个信号名，名字均以sig打头。</p><p>生成信号的事件：程序错误（同步信号）、外部事件（异步信号）、显式请求（同步信号）。</p><p>产生信号的三个系统调用：<br><img src="https://s2.loli.net/2021/12/26/mTxJNwusey9nf1h.png" alt="image-20211226084734644"></p><p><strong>信号的屏蔽</strong>：使用信号集<br><img src="https://s2.loli.net/2021/12/26/dEUws6BSp3TqygW.png" alt="image-20211226084903076"></p></blockquote></li></ol><p><strong>管道通信</strong>：大批量的数据传送。其中包括<strong>有名管道</strong>和<strong>无名管道</strong>。</p><p>原理：一个进程向管道中写入数据，因为管道是先入先出，所以另一个进程从管道中读出数据。</p><p>特点：每次写入的内容都在管道的末尾，并且每次都是从头部读出数据。</p><blockquote><p>注意：每次写入都附加在管道的末端（管道不支持指针的移动），并且写入的字节数不能超过系统常量PIPE_BUF</p></blockquote><p>创建方法：</p><ol><li><p>无名管道：使用pipe()函数创建，该管道没有名字，只为了使用一次（一般只用于父子进程之间的通信）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd[<span class="number">2</span>], pid;</span><br><span class="line">  <span class="keyword">char</span>  msgsend[] = “Hi! Kid .\n”;</span><br><span class="line">  <span class="keyword">char</span>  msgrecv[<span class="number">32</span>];</span><br><span class="line">  <span class="keyword">if</span>( pipe( fd ) == <span class="number">-1</span> ) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span>( (pid=fork()) == <span class="number">0</span> ) </span><br><span class="line">   &#123; <span class="comment">//pid ==0 子进程 </span></span><br><span class="line">     close( fd[<span class="number">1</span>] );</span><br><span class="line">     <span class="built_in">printf</span>(“before read data from pipe!\n”);</span><br><span class="line">     read( fd[<span class="number">0</span>], msgrecv, <span class="built_in">strlen</span>(msgsend));</span><br><span class="line">     <span class="built_in">printf</span>(“read [%s] from pipe\n”, msgrecv);</span><br><span class="line">   &#125;  <span class="keyword">else</span> <span class="comment">//父进程</span></span><br><span class="line">  &#123;</span><br><span class="line">    close( fd[<span class="number">0</span>] );</span><br><span class="line">    <span class="built_in">printf</span>(“Parent sleeping ......”);</span><br><span class="line">    sleep(<span class="number">3</span>); <span class="comment">// 迫使子进程先执行</span></span><br><span class="line">    <span class="built_in">printf</span>(“Parent wake up !\n”);</span><br><span class="line">    write( fd[<span class="number">1</span>], msgsend, <span class="built_in">strlen</span>(msgsend) );</span><br><span class="line">    wait();</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><pre><code class="lang-shell">mknod myfifo p # 用于创建有名管道myfifo</code></pre></li></ol><p><strong>IPC</strong>：采用消息方式进行进程之间的通信。</p><ol><li>消息队列</li><li>信号量</li><li>共享内存</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;h3 id=&quot;UNIX系统的主要特征&quot;&gt;&lt;a href=&quot;#UNIX系统的主要特征&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="大三课程" scheme="https://michael-d-666.github.io/tags/%E5%A4%A7%E4%B8%89%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>令人绝望的编译原理</title>
    <link href="https://michael-d-666.github.io/2021/12/12/%E4%BB%A4%E4%BA%BA%E7%BB%9D%E6%9C%9B%E7%9A%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>https://michael-d-666.github.io/2021/12/12/%E4%BB%A4%E4%BA%BA%E7%BB%9D%E6%9C%9B%E7%9A%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
    <published>2021-12-12T06:02:43.000Z</published>
    <updated>2022-01-05T23:10:24.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以下为简答、判断、选择的概念部分"><a href="#以下为简答、判断、选择的概念部分" class="headerlink" title="以下为简答、判断、选择的概念部分"></a>以下为简答、判断、选择的概念部分</h1><ol><li>编译程序是对高级语言程序的解释执行  ×</li><li>语法分析时必须消除文法中的左递归      ×</li><li>LR分析法在自左至右的扫描输入串时就能发现错误，但不能准确的指出错误的地点      √</li><li>静态数组的存储空间在编译时可以确定     ×   <font  color="red"> 任何变量的存储空间都是在运行时刻确定，但静态数组的大小可以在编译时确定</font></li><li>词法分析器的输出结果是单词的种别编码和自身置     √</li><li>如果文法G是无二义的，则它的任何句子<em>a</em> 的最左推导和最右推导的语法树必定相同     √</li><li>四元式之间的联系是通过 <strong>临时变量</strong> 联系的     √</li><li>从优化的范围的角度：优化可以分为哪两类：<strong><em>局部优化</em></strong>和<strong><em>全局优化</em></strong></li><li>针对循环进行的优化方法：<strong><em>强度削弱</em></strong>、<strong><em>删除归纳变量、代码外提</em></strong></li><li>计算机执行高级语言编写的程序主要有两种途径：<strong><em>解释</em></strong>和<strong><em>执行</em></strong></li><li>扫描器是<strong><em>词法分析器</em></strong>，他接受输入的<strong><em>源程序</em></strong>，对源程序进行词法分析，并识别出单词符号</li><li>局部优化是在<strong><em>基本块</em></strong>范围内进行的一种优化</li><li>一个上下文无关文法的开始符，可以是终结符或非终结符     ×    <font  color="red">0、1、2、3文法的概念</font></li><li>一个句型的直接短语是唯一的     ×</li><li>并不是每个文法都可以改写成LL(1)文法的     ×</li><li>3型文法一定是2型文法     √</li><li>编译过程可分为<strong><em>词法分析、语法分析、语义分析、中间代码生成、代码优化、目标代码生成</em></strong></li><li>语法分析器的输入是<strong><em>单词符号</em></strong>、输出是<em>**语法单位</em></li><li>语法分析的方法大致可以分为两类，一类是<strong><em>自上而下</em></strong>分析法，另一类是<strong><em>自下而上</em></strong>分析法</li><li>语法分析是根据语言的<strong><em>语法</em></strong>规则进行的。中间代码生成是根据语言的<strong><em>语义</em></strong>规则进行的。</li><li>常见的中间代码形式不含<strong><em>语法树</em></strong></li><li>自下而上的分析方法：就是从输入串开始，逐步进行规约，直到规约到文法的开始符号；或者说从语法树的末端开始逐步向上规约，知道根节点</li><li>代码优化的目的：在保证变换前后代码执行结果相同的前提下，尽量</li></ol><hr><h1 id="以下为了例题部分"><a href="#以下为了例题部分" class="headerlink" title="以下为了例题部分"></a>以下为了例题部分</h1><h2 id="第三章-词法分析"><a href="#第三章-词法分析" class="headerlink" title="第三章 词法分析"></a>第三章 词法分析</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><img src="https://s2.loli.net/2021/12/30/Xu6Yk2wGiKqRIDo.png" alt="image-20211230090732722" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2021/12/30/nvYo2guaUGkIVLs.png" alt="image-20211230091112540" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2021/12/30/OmuIsGZQVFK3XeR.png" alt="image-20211230091504920" style="zoom:50%;" /></p><h3 id="确定的有穷自动机（DFA）"><a href="#确定的有穷自动机（DFA）" class="headerlink" title="确定的有穷自动机（DFA）"></a>确定的有穷自动机（DFA）</h3><center>形式：M=(S,Σ,δ,s<sub>0</sub>,F)</center><p>S: 有穷的状态集<br>Σ：输入符号的集合<br>δ：将S×Σ映射到<font color="red">S</font>的转换函数。δ(s,a)表示从状态s触发，沿着标记位a的边所能到达的状态。<br>s<sub>0</sub>：开始状态<br>F：终止状态</p><h3 id="非确定的有穷自动机（NFA）"><a href="#非确定的有穷自动机（NFA）" class="headerlink" title="非确定的有穷自动机（NFA）"></a>非确定的有穷自动机（NFA）</h3><p><img src="https://s2.loli.net/2021/12/30/TOsE1NJ6RyBDo35.png" alt="image-20211230092828791" style="zoom:50%;" /></p><center>形式：M=(S,Σ,δ,s<sub>0</sub>,F)</center><p>S: 有穷的状态集<br>Σ：输入符号的集合<br>δ：将S×Σ映射到<font color="red">2<sup>S</sup></font>的转换函数。δ(s,a)表示从状态s触发，沿着标记位a的边所能到达的状态。<br>s<sub>0</sub>：开始状态<br>F：终止状态</p><blockquote><p>DFA和NFA的区别：1、DFA中没有空串。<br>                                2、DFA中对于一个特定符号的输入只能有一个对应的状态，而NFA可能获得一个状态集合。</p></blockquote><h3 id="根据正则表达式构造NFA"><a href="#根据正则表达式构造NFA" class="headerlink" title="根据正则表达式构造NFA"></a>根据正则表达式构造NFA</h3><p><img src="https://s2.loli.net/2021/12/30/y4a9uwpfSkDKgNq.png" alt="image-20211230095515273" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2021/12/30/vauKwtdSYsbQ4CH.png" alt="image-20211230095657974" style="zoom:33%;" /></p><h3 id="从NFA到DFA的转化"><a href="#从NFA到DFA的转化" class="headerlink" title="从NFA到DFA的转化"></a>从NFA到DFA的转化</h3><p>见群里的复习提纲</p><h3 id="词法分析阶段的错误处理"><a href="#词法分析阶段的错误处理" class="headerlink" title="词法分析阶段的错误处理"></a>词法分析阶段的错误处理</h3><p>可以检测到的<strong>错误类型</strong>：</p><ol><li>单词拼写错误</li><li>非法字符</li></ol><p><strong>错误处理</strong>：</p><p>查找已扫描字符串中最后一个对应于某终态的字符</p><p>如果找到了，将该字符与其前面的字符识别成一个单词。然后将输入指针退回到该字符，扫描器重新回到初始状态，继续识别下一个单词</p><p>如果没找到，则确定出错，采用错误恢复策略。</p><p><strong>错误恢复策略</strong>：</p><p>恐慌模式：从剩余的输入中不断删除字符，直到词法分析器能够在剩余输入的开头发现一个正确的字符为止。</p><hr><h2 id="第四章-语法分析"><a href="#第四章-语法分析" class="headerlink" title="第四章 语法分析"></a>第四章 语法分析</h2><h3 id="文法转换"><a href="#文法转换" class="headerlink" title="文法转换"></a>文法转换</h3><p><strong>消除回溯</strong>：提取左公因子</p><p><strong>消除循环</strong>：</p><p><img src="https://s2.loli.net/2021/12/30/DkKBs3jToXFAb8p.png" alt="image-20211230142605084" style="zoom:33%;" /></p><p>例1：</p><p>消除下列文法的间接左递归</p><p>​                                                         （1）    S $\longrightarrow$ A a | b<br>​                                                         （2）    A $\longrightarrow$ A c | S d | ε</p><p><strong>解：</strong>                  将 （1）带入（2）中：        A $\longrightarrow$  A c | A a d | b d | ε<br>                         提取左公因子可得：             A $\longrightarrow$ A ( c | a d) | b d | ε<br>                         此时可以将 (c | a d) 看成 <strong>α</strong> ，将 b d | ε 看成 <strong>β</strong><br>                         代入公式中，可得：     A $\longrightarrow$ b d A’ | A’          A‘ $\longrightarrow$ c A’ | a d A’ | ε</p><h3 id="S-文法"><a href="#S-文法" class="headerlink" title="S_文法"></a>S_文法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每个产生式的右部都以终结符打头</span><br><span class="line">同一非终结符的各产生式的首终结符都不一样</span><br><span class="line">注意：S_文法不包含ε产生式</span><br></pre></td></tr></table></figure><h3 id="q-文法"><a href="#q-文法" class="headerlink" title="q_文法"></a>q_文法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每个产生式的右部要么是 ε，要么以终结符打头</span><br><span class="line">具有相同左部的产生式的可选集互不相交</span><br><span class="line">注意：q_文法不包含右部以非终结符打头的产生式</span><br></pre></td></tr></table></figure><h3 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同一非终结符的各产生式的可选集互不相交</span><br></pre></td></tr></table></figure><h3 id="预测分析法"><a href="#预测分析法" class="headerlink" title="预测分析法"></a>预测分析法</h3><h4 id="递归的预测分析"><a href="#递归的预测分析" class="headerlink" title="递归的预测分析"></a>递归的预测分析</h4><font color="red">不会</font><h4 id="非递归的预测分析"><a href="#非递归的预测分析" class="headerlink" title="非递归的预测分析"></a>非递归的预测分析</h4><p>实现表驱动的预测分析法<br><img src="https://s2.loli.net/2021/12/30/4eRTr8dpHigSfaF.png" alt="image-20211230154025226"></p><h3 id="自底向上分析"><a href="#自底向上分析" class="headerlink" title="自底向上分析"></a>自底向上分析</h3><p><strong>规范句型</strong>：栈内符号串+剩余输入<br><strong>句柄</strong>：每次规约的符号串成为句柄<br><img src="https://s2.loli.net/2021/12/30/sHK68GIEpCXmdBY.png" alt="image-20211230154541999"></p><font color="red">暂时跳过LR分析法</font><h2 id="第五章-语法制导翻译"><a href="#第五章-语法制导翻译" class="headerlink" title="第五章    语法制导翻译"></a>第五章    语法制导翻译</h2><p><strong>终结符具有综合属性，但没有继承属性</strong></p><p><strong>S-属性的SDD</strong>：仅具有综合属性的SDD</p><p><strong>L-属性的SDD</strong>：直观：依赖图的边可以从左到右，但不能从右到左</p><blockquote><p>官方定义：<br><img src="https://s2.loli.net/2021/12/30/CXNdxtejhcnF4if.png" alt="image-20211230160802633"></p></blockquote><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p><img src="https://s2.loli.net/2021/12/12/T1jPBtRoyzpGmEQ.png" alt="image-20211212142631640"></p><p>继承属性在<strong>左边</strong>，综合属性在<strong>右边</strong>。</p><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><p><img src="https://s2.loli.net/2021/12/12/bDwGNQ6Yyqjpma1.png" alt="image-20211212144839456"></p><p>假设top在最下面，top上面是top-1  </p><h2 id="例3-S属性的SDT实现"><a href="#例3-S属性的SDT实现" class="headerlink" title="例3     S属性的SDT实现"></a>例3     S属性的SDT实现</h2><p>输入3*5+4</p><p><img src="https://s2.loli.net/2021/12/12/fUWqDoCAkHETjwh.png" alt="image-20211212160114881" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2021/12/12/GiSkQwWtqpDv6Lx.png" alt="image-20211212160011568"></p><h2 id="例4-非递归的语法制导翻译"><a href="#例4-非递归的语法制导翻译" class="headerlink" title="例4    非递归的语法制导翻译"></a>例4    非递归的语法制导翻译</h2><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20211212195708221.png" alt="image-20211212195708221"></p><p><img src="https://s2.loli.net/2021/12/12/HeaKcJ95SEp7UrP.png" alt="image-20211212195417645"></p><p>综合属性（syn）出栈和继承属性（若有值）时，记得要把值备份给对应的语义动作</p><p><img src="https://s2.loli.net/2022/01/06/Xn1L7WDzBjho6mO.png" alt=""><br>用一个空的产生式替换掉原来的语义动作。继承属性用来存放原来的值，综合属性用来存放计算出来的值</p><hr><h2 id="第七章-运行存储分配策略"><a href="#第七章-运行存储分配策略" class="headerlink" title="第七章 运行存储分配策略"></a>第七章 运行存储分配策略</h2><p><strong>静态存储分配</strong>：在编译时刻就可以确定大小的存储对象，可以在编译时刻就为他们分配存储空间。<br><strong>动态存储分配策略</strong>：在编译时仅产生各种必要信息，在运行时刻，再动态地分配存储空间。主要有：<strong>栈式存储分配</strong>和<strong>堆式存储分配</strong>。</p><p><strong>运行时内存的划分</strong>：</p><p><img src="https://s2.loli.net/2021/12/31/qZwYuyTXLU5ls6B.png" alt="image-20211231132809363" style="zoom:33%;" /></p><blockquote><p>注意上面为低端，下面为高端</p><p>栈中存放的是活动记录</p></blockquote><p><strong>活动记录</strong>：本质上是一块连续的存储区，过程每执行一次，就为他分配一块连续的存储区，用来管理过程一次执行所需要的信息。</p><p><img src="https://s2.loli.net/2021/12/31/HYZIFvBLUgtd26A.png" alt="image-20211231133709415" style="zoom:33%;" /></p><h3 id="静态存储分配方法"><a href="#静态存储分配方法" class="headerlink" title="静态存储分配方法"></a>静态存储分配方法</h3><h4 id="顺序分配方法"><a href="#顺序分配方法" class="headerlink" title="顺序分配方法"></a>顺序分配方法</h4><p><strong>分配原则</strong>：</p><ol><li>按照过程出现的先后顺序逐段进行分配</li><li>各过程的活动记录占用互不相交</li></ol><p><img src="https://s2.loli.net/2021/12/31/Ok2RxIibwcyBaST.png" alt="image-20211231134606028" style="zoom:33%;" /></p><ul><li>优点：处理上简单</li><li>缺点：堆内存的控件使用不够经济合理</li></ul><h4 id="层次分配方法"><a href="#层次分配方法" class="headerlink" title="层次分配方法"></a>层次分配方法</h4><p><strong>分配原则</strong>：凡是无相互调用关系的并列过程，尽量使其局部数据共享存储空间</p><p><img src="https://s2.loli.net/2021/12/31/ixXgTyldU7zpSIC.png" alt="image-20211231135946834" style="zoom:50%;" /></p><p><strong>过程关系调用矩阵</strong>：</p><p>如果第i个过程调用了第j个过程，则B[ i ][ j ]=1，否则B[ i ][ j ]=0</p><p><img src="https://s2.loli.net/2021/12/31/QDXoVLuOkS6MqPj.png" alt="image-20211231140148345" style="zoom:50%;" /></p><h3 id="动态存储分配方法："><a href="#动态存储分配方法：" class="headerlink" title="动态存储分配方法："></a>动态存储分配方法：</h3><h4 id="栈式存储分配"><a href="#栈式存储分配" class="headerlink" title="栈式存储分配"></a>栈式存储分配</h4><p><strong>构建活动树原则</strong>：在表示过程p的某个活动的结点上，其子结点对应于被p的这次活动调用的各个过程的活动。按照这些活动被调用的顺序，自左向右地显示它们。一个子结点必须在其右兄弟结点的活动开始之前结束。</p><p><img src="https://s2.loli.net/2021/12/31/8R9sgVOM62UxQJh.png" alt="image-20211231140644866" style="zoom:50%;" /></p><p><strong>设计活动记录的一些原则</strong>：</p><ol><li>参数和返回值一般放在被调用这的开始位置，这样能尽可能地靠近调用者的活动记录。</li><li>固定长度的项如：控制链、访问链、机器状态字等都放在中间位置。</li><li>在早期，不知道大小的项一般放在活动记录的尾部。</li><li>栈顶指针一般指向活动记录中局部数据开始的位置，以此作为基地址</li></ol><p><img src="https://s2.loli.net/2021/12/31/1o8JPhDjI64uRak.png" alt="image-20211231141857920" style="zoom:33%;" /></p><p><strong>调用序列</strong>：</p><ol><li><strong>调用者</strong>将返回地址放到<strong>被调用者</strong>的机器状态字段中。</li><li><strong>调用者</strong>将栈顶指针的值存放到<strong>被调用者</strong>的控制链中，并增加栈顶指针的值，使其指向被调用者局部数据开始的位置。</li></ol><p><img src="https://s2.loli.net/2021/12/31/6COBXI1yLlcv5RT.png" alt="image-20211231142336143" style="zoom:33%;" /></p><p><strong>返回序列</strong>：</p><ol><li>被调用者将返回值放到与参数相邻的位置</li><li>使用机器状态字段中的信息，被调用者恢复top-sp和其它寄存器，然后跳转到由调用者放在机器状态字段中的返回地址。</li></ol><h3 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h3><hr><h2 id="第八章-代码优化"><a href="#第八章-代码优化" class="headerlink" title="第八章 代码优化"></a>第八章 代码优化</h2><p><strong>基本块</strong>：是满足如下条件的最大的连续的三地址指令序列</p><ol><li>控制流只能从基本块的第一个指令进入，不能跳转到基本块中间或末尾指令 的转移指令</li><li>除了基本块的最后一个指令，控制流在离开之前不会跳转或停机</li></ol><p><strong>划分方法</strong>：</p><p>首先，确定指令序列中哪些指令是首指令(leaders)，即某个基本块的第一个指令</p><ol><li><p>指令序列的第一个三地址指令是一个首指令</p></li><li><p>任意一个条件或无条件转移指令的目标指令是一个首指令</p></li><li><p>紧跟在一个条件或无条件转移指令之后的指令是一个首指令  </p><p><img src="https://s2.loli.net/2021/12/30/kOKIbpEB6syJfD2.png" alt="image-20211230164126539" style="zoom:33%;" /></p></li></ol><h3 id="常用的优化方法"><a href="#常用的优化方法" class="headerlink" title="常用的优化方法"></a>常用的优化方法</h3><h4 id="删除公共子表达式"><a href="#删除公共子表达式" class="headerlink" title="删除公共子表达式"></a>删除公共子表达式</h4><p>如果表达式x op y先前已被计算过，并且从先前的计算到现在，x op y中变量的值没有改变，那么x op y的这次出现就称为公共子表达式。</p><p><strong>局部公共子表达式</strong>：</p><p><img src="https://s2.loli.net/2022/01/01/subwqMeNORyGE8l.png" alt="image-20220101083021078" style="zoom:33%;" /></p><p><strong>全局公共子表达式</strong>：</p><p><img src="https://s2.loli.net/2022/01/01/4mNPr2oXQUWqRCO.png" alt="image-20220101083254808" style="zoom:33%;" /></p><h4 id="删除无用代码"><a href="#删除无用代码" class="headerlink" title="删除无用代码"></a>删除无用代码</h4><p>复制语句x = y之后尽可能地用y代替x</p><p><img src="https://s2.loli.net/2022/01/01/o743u1qHlSwcxhv.png" alt="image-20220101084008768" style="zoom:33%;" /></p><h4 id="常量合并"><a href="#常量合并" class="headerlink" title="常量合并"></a>常量合并</h4><p><img src="https://s2.loli.net/2022/01/01/JvlaE5nBz2SLOhi.png" alt="image-20220101084100604" style="zoom:33%;" /></p><h4 id="代码移动"><a href="#代码移动" class="headerlink" title="代码移动"></a>代码移动</h4><p>不管循环执行多少次都得到相同结果的表达式，在进入循环之前就对它们求值。</p><p><img src="https://s2.loli.net/2022/01/01/Q34CZGBbhs59LiU.png" alt="image-20220101084312529" style="zoom:33%;" /></p><h4 id="强度削弱"><a href="#强度削弱" class="headerlink" title="强度削弱"></a>强度削弱</h4><p>用较快的操作代替较慢的操作，如用加代替乘</p><p><strong>归纳变量</strong>：对于一个变量x，如果存在一个正的或负的常数c使得每次x被赋值时它的值总增加c，那么x就被称为归纳变量</p><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220101084625767.png" alt="image-20220101084625767" style="zoom:33%;" /></p><p><img src="https://s2.loli.net/2022/01/01/5TbMX8IDzeOCPJw.png" style="zoom:33%;" /></p><h3 id="基本块的DAG"><a href="#基本块的DAG" class="headerlink" title="基本块的DAG"></a>基本块的DAG</h3><p><img src="https://s2.loli.net/2022/01/01/Efjr4O973yRVgeu.png" alt="image-20220101085313755"></p><blockquote><p>在为语句x=y+z构造结点N的时候，如果x已经在某结点M的定值变量表中，则从M的定值变量表中删除变量x<br>如上图 在构造 b = a - d 时，已经有 a = b + c </p></blockquote><h4 id="优化DAG-删除无用代码"><a href="#优化DAG-删除无用代码" class="headerlink" title="优化DAG(删除无用代码)"></a>优化DAG(删除无用代码)</h4><p>重复删除不是活跃变量的根节点</p><p><img src="https://s2.loli.net/2022/01/01/DtBMFb8szd7CLlQ.png" alt="image-20220101085828063" style="zoom:33%;" /></p><h4 id="数组元素赋值指令的表示"><a href="#数组元素赋值指令的表示" class="headerlink" title="数组元素赋值指令的表示"></a>数组元素赋值指令的表示</h4><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220101090628301.png" alt="image-20220101090628301" style="zoom:33%;" /></p><blockquote><p>该数组结点的创建将杀死所有已经建立的、其值依赖于a的结点<br>一个被杀死的结点不能再获得任何定值变量，也就是说，它不可能成为一个公共子表达式</p></blockquote><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220101091135155.png" alt="image-20220101091135155" style="zoom:33%;" /></p><blockquote><p>常数赋值可以直接删去，直接使用常数<br>定制变量表中有多个，只使用第一个<br>不活跃的根节点也要删除</p></blockquote><h3 id="到达定值分析"><a href="#到达定值分析" class="headerlink" title="到达定值分析"></a>到达定值分析</h3><p><img src="C:\Users\Xdd\AppData\Roaming\Typora\typora-user-images\image-20220101092439966.png" alt="image-20220101092439966" style="zoom:33%;" /></p><blockquote><p>注意：只要存在一条路径不改变其值，就算可以到达定值</p></blockquote><h4 id="到达定值的传递函数"><a href="#到达定值的传递函数" class="headerlink" title="到达定值的传递函数"></a>到达定值的传递函数</h4><p><img src="https://s2.loli.net/2022/01/01/dJVWsGchrR75ECi.png" alt=""></p><p><img src="https://s2.loli.net/2022/01/01/CqI16H9fa3hitkX.png" alt=""></p><p><img src="https://s2.loli.net/2022/01/01/qP5vBJQaE3UoVTm.jpg" style="zoom : 25%;"></p><h3 id="活跃变量分析"><a href="#活跃变量分析" class="headerlink" title="活跃变量分析"></a>活跃变量分析</h3><p><img src="https://s2.loli.net/2022/01/01/SeiRH8OkcyrTWaL.png" alt=""></p><p><img src="https://s2.loli.net/2022/01/01/rSugVvmn2p7w6QB.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;以下为简答、判断、选择的概念部分&quot;&gt;&lt;a href=&quot;#以下为简答、判断、选择的概念部分&quot; class=&quot;headerlink&quot; title=&quot;以下为简答、判断、选择的概念部分&quot;&gt;&lt;/a&gt;以下为简答、判断、选择的概念部分&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;编译程序是对高级</summary>
      
    
    
    
    
    <category term="大三课程" scheme="https://michael-d-666.github.io/tags/%E5%A4%A7%E4%B8%89%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>人工智能课程复习</title>
    <link href="https://michael-d-666.github.io/2021/12/07/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E8%AF%BE%E7%A8%8B%E5%A4%8D%E4%B9%A0/"/>
    <id>https://michael-d-666.github.io/2021/12/07/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E8%AF%BE%E7%A8%8B%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-12-07T01:25:16.000Z</published>
    <updated>2021-12-23T09:03:11.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-人工智能概述"><a href="#第一章-人工智能概述" class="headerlink" title="第一章      人工智能概述"></a>第一章      人工智能概述</h2><ol><li><p>什么是智能？智能包含哪几种能力</p><p>智能是对自然智能的简称。从生理角度看，智能是中枢神经系统的信号加工过程及其产物；从心理角度看，智能是智力和能力的总称。<br>智能包含感知能力、记忆和思维能力、学习和自适应能力、行为能力等 。</p></li><li><p>什么是推理？</p><p>推理是按照某种策略，从已知事实触发，利用只是推出所需结论的过程。</p></li><li><p>什么是人工智能，它的研究目标是什么？</p><p>从能力的角度看，人工智能是指用人工的方法在机器上实现的智能。从学科的角度看，人工智能是一门研究如何构造智能机器或智能系统，使其能够模拟、延申和拓展人类智能的学科。</p><p>研究目标：①、对智能行为有效解释的理论分析    ②、解释人类智能    ③、构造具有智能的人工制品。</p></li><li><p>认知的概念？搜索的概念？规划的概念？</p><p>==认知==是为了一定的目的，在一定的心理结构中进行的信息加工过程。是一种与情感、动机、意志相对应的理智或认识过程。</p><p>==搜索==是依靠经验，利用已有知识，根据问题的实际情况，不断寻找可利用知识，从而构造一条代价最小的推理路线，使问题得以解决的过程称为搜索。</p><p>==规划==是指从某个特定问题状态出发，寻找并建立一个操作序列，直到求得目标状态为止的一个行动过程的描述。</p></li><li><p>大数据的特性？</p><p> 规模性（Volume）；多样性（Variety）；实时性（Velocity）；价值性（Value）。</p></li><li><p>什么是图灵实验？图灵实验说明了什么？</p><p>图灵实验：通过一系列智能问题，让超过30%的主持人认为和自己对话的是人而不是机器。</p><p>图灵实验用来衡量一个机器是否具有智能。</p></li><li><p>人工智能主要有哪几个学派，各自的特点是什么？</p><p>主要有：符号主义学派、连接主义学派、行为主义学派。</p></li></ol><p>   符号主义学派：人工智能的研究应该采用功能模拟的方法。通过研究人类认知系统的功能，再用计算机模拟，从而实现人工智能。</p><p>   连接主义学派：人工智能的研究应该采用结构模拟的方法。着重模拟人类神经网络的生理结构。</p><p>   行为主义学派：人工智能的研究应该采用行为模拟的方法。不同的行为表现出不同的功能和不同的控制结构。</p><ol><li><p>人工智能有哪些主要研究和应用领域？其中哪些是新的研究热点？</p><p>主要研究和应用领域：机器思维、机器学习、机器感知、机器行为、计算智能、分布智能、智能系统、人工心理和人工情感。</p></li></ol><hr><h2 id="第二章-确定性知识系统"><a href="#第二章-确定性知识系统" class="headerlink" title="第二章         确定性知识系统"></a>第二章         确定性知识系统</h2><ol><li><p>什么是知识？有哪几种主要的知识分类方法？</p><p>知识是经过消减、塑造、解释、选择、和转换的信息。</p><p>知识分类方法：按适用范围分类；按作用效果分类；按确定性分类</p></li><li><p>什么是知识表示？知识表示有哪些要求？</p><p>知识表示：用一组约定的符号把知识编码成一组可以被计算机直接识别，便于系统使用的数据结构。</p><p>知识表示要求：知识表示的表示能力、知识表示的可利用性、知识表示的可组织性和可维护性、知识表示的可理解性和可实现性。</p></li><li><p>什么是推理？它有哪些分类方法？</p><p>推理是由具体实例归纳出一般规律，或者是根据已有知识推出新的理论的思维过程。</p><p>分类方法：按推理的逻辑基础分类；按所用知识的确定性分类。</p></li><li><p>什么是演绎推理，什么又是归纳推理</p><p>演绎推理是一种由一般到个别的推理方法，即从已知的一般性知识出发，去推出蕴含在这些已知知识中的适合于某种个别情况的结论。</p><p>归纳推理是一种由个别到一般的推理方法。</p></li><li><p><img src="https://s2.loli.net/2021/12/08/KLenJjU7bQDwG1o.png" alt="image-20211208232849386"></p></li></ol><ol><li>用谓词表示法求解机器人摞积木问题。设机器人有一只机械手，要处理的世界有一张桌子，桌上可堆放若干相同的方积木块。机械手个操作积木的典型动作:从桌上拣起一块积木;将手中的积木放到桌之上;在积木上再摞上一块积木;从积木上面拣起一块积木。积木世界的布局如下图所示。</li></ol><p><img src="https://s2.loli.net/2021/12/07/d1HVTRc8bxqurjE.png" alt="image-20211207132651450" style="zoom:50%;" /></p><p>​        ①  定义状态谓词     CLEAR(x)：x上方为空       ON(x，y)：x在y的上面      ONTABLE(x)：x在桌上面       HOLDING(x):机械手抓住x                                               HANDEMPTY：机械手是空的<br>​            问题的初始状态：CLEAR(C)        CLEAR(B)        ON(C,A)        ONTABLE(A)        ONTABLE(B)                HANDEMPTY    </p><p>​            问题的目标状态：ONTABLE(C)        ON(B,C)        ON(A,B)        HANDEMPTY        CLEAR(A)    </p><p>​        ②   定义描述操作的谓词        PickUp(x)：从桌面上        PutDown(x)：把x放到桌面上        Stack(x,y)：把x放到y上<br>​                                                       UpStack(x,y)：把x从y上拿起来</p><p>​                                                       PutUp(x)：条件：ONTABLE(x)，HANDEMPTY，CLEAR(x)<br>​                                                                         动作：删除表    ONTABLE(x),    HANDEMPTY                                                                                    添加表    HANDHOLDING(x)<br>​                                                       PutDown(x)：条件：HOLDING(x)<br>​                                                                              动作：删除表    HOLDING(x)<br>​                                                                                         添加表    ONTABLE(x)，CLEAR(x)，HANDEMPTY</p><p>​                                                       Stack(x,y)：条件： CLEAR(y)，HANDHOLDING(x)，<br>​                                                                           动作：删除表    CLEAR(y)，HANDHOLDING(x）<br>​                                                                                      添加表    ON(x,y)，HANDEMPTY，CLEAR(x)<br>​                                                       UpStack(x,y)：条件：ON(x,y)    HANDEMPTY，CLEAR(x)<br>​                                                                                动作：删除表：ON(x,y)，HANDEMPTY<br>​                                                                                           添加表：HANDHOLDING(x)，CLEAR(y)</p><p>​        ③  问题的求解过程</p><p>​            <img src="https://s2.loli.net/2021/12/07/HkaYBfUzbdIiOKG.png" alt="image-20211207161537384" style="zoom: 50%;" /></p><ol><li><p>用谓词表示法求解农夫、狼、山羊、白菜问题。农夫、狼、山羊、白菜全部卜在一河的左岸，现在要把他们全部送到河的右岸去，农夫有一条船，过河时，除农夫外船上至多能载狼、山羊、白菜中的一种。狼要吃山羊，山羊要吃白菜，除非农夫在那里。似规划出一个确保全部安全过河的计划。请写出所用谓词的定义，并给出每个谓词的功能及变量的个体域。</p><p>①  定义状态谓词     AL(x)：x在左岸      AR(x)：x在右岸</p><p>​      问题的初始状态：AL(农夫)    AL(船)     AL(狼)      AL(羊)     AL(白菜)    </p><p>​      问题的目标状态：AR(农夫)    AR(船)    AR(狼)    AR(羊)    AR(白菜)</p><p>②   定义描述操作的谓词        L-R(x)：农夫带着x划船从左岸到右岸</p><pre><code>                                           R-L：农夫自己划船从左岸到右岸                                           R-L(x)：农夫带着x划船从左岸到右岸</code></pre><p>​                                               L-R(x)：条件：AL(x)</p></li><li><p>判断下列公式是否为可合一，若可合一，则求出其最一般合一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）P(a,b), P(x,y)</span><br><span class="line">（2）P(f(x),b)，P(y,z)</span><br><span class="line">（3）P(f(x),y)，P(y,f(b))</span><br><span class="line">（4）P(f(y),y,x)，P(x,f(a),f(b))</span><br><span class="line">（5）P(x,y)，P(y,x)</span><br></pre></td></tr></table></figure><p>(1)可合一，最一般合一为{a/x,b/y}</p><p>(2)</p></li><li><p>什么是谓词公式的可满足性？什么是谓词公式的不可满足性？</p><p>对于谓词公式P，如果至少存在D上的一个解释，使公式P在此解释下的真值为T，则公式P在D上是可满足的。<br>对于谓词公式P，如果对于D上的任意一解释都去真值F，则称P在D上不可满足。若在任何非空域上都是永假，则称P不可满足</p></li><li><p>什么是谓词公式的前束范式？什么是Skolem范式？</p><p>如果谓词公式的所有两次都非否定地出现在公式的最前面，且辖域都为整个公式，则这个公式是前束范式</p><p>若前束范式中的存在量词都在全称两次之前，则这种形式的谓词公式为Skolem范式</p></li><li><p>将下列谓词公式转化为子句集</p><p><img src="https://s2.loli.net/2021/12/07/f34tYKNMr9P7e6G.png" alt="image-20211207180237431" style="zoom:50%;"/></p><p>因为已经是前束范式，所以直接开始消去存在量词。但式子中没有存在量词，所以开始变为Skolem标准型，即：将母式变为子句的合取，本例中已经完成。接着，消去全称量词，之前删去。消去合取，每一个元素就是一个子句。最后更换变元：两个子句变元不能相同</p><p>答案：{P(x,y),Q(u,v)}</p></li></ol><script type="math/tex; mode=display">(\forall (x))(\forall (y))(P(x)\Rightarrow Q(x,y))</script><p>​       因为已经是前束范式且没有存在量词，所以化为Skolem标准型，</p><hr><h2 id="第三章-不确定性知识系统"><a href="#第三章-不确定性知识系统" class="headerlink" title="第三章      不确定性知识系统"></a>第三章      不确定性知识系统</h2><h3 id="贝叶斯网络简单示例"><a href="#贝叶斯网络简单示例" class="headerlink" title="贝叶斯网络简单示例"></a>贝叶斯网络简单示例</h3><p><img src="https://s2.loli.net/2021/12/14/SbxZsNATwPcjGW9.png" alt="image-20211214195036727" style="zoom:50%;" /></p><blockquote><p>求产生情绪焦虑，但并没有碰见难题，也没有遇到干扰，但认知迟缓并情绪波动的概率。</p></blockquote><p>令 产生情绪焦虑为 a、没有碰见难题为 $\neg$d 、没有遇到干扰为 $\neg$ i 、认知迟缓为 c 、情绪波动为 e。</p><p>则  P(a  $\wedge$  $\neg$d $\wedge$  $\neg$ i  $\wedge$ c  $\wedge$  e) =P(认知迟缓|产生焦虑) <em> P(情绪波动|产生焦虑) </em> P(产生焦虑|没有碰见难题、没有遇到干扰) <em> P(没有碰见难题) </em> P(没有遇到干扰)<br>                                                   =0.8 <em> 0.9 </em> 0.1 <em> 0.85 </em> 0.95=0.05814</p><p><img src="https://s2.loli.net/2021/12/14/2bhrak6uYFiDJWz.png" alt="image-20211214200916735" style="zoom:33%;" /></p><blockquote><p>求报警声响了但实际上没有盗贼入侵，也没有发生地震，而张和李都打来电话的概率</p></blockquote><p>令 报警声响为 a、没有盗贼入侵为 $\neg$b 、没有发生地震为 $\neg$e 、张没有打电话为z 、李没有打电话为 l 。</p><p>则 P(a  $\wedge$  $\neg$b  $\wedge$  $\neg$ e  $\wedge$ z  $\wedge$  l) =P(李来电话|报警声响) <em> P(张来电话|报警声响) </em> P(报警声响|盗贼没入侵、地震没发生) <em> P(盗贼没入侵) </em> P(地震没发生)<br>                                                   =0.9 <em> 0.7 </em> 0.001 <em> 0.999 </em>0.998=0.00063</p><hr><h2 id="第四章-智能搜索技术"><a href="#第四章-智能搜索技术" class="headerlink" title="第四章    智能搜索技术"></a>第四章    智能搜索技术</h2><h3 id="A-算法应用"><a href="#A-算法应用" class="headerlink" title="A*算法应用"></a>A*算法应用</h3><p><img src="https://s2.loli.net/2021/12/14/ApIozT9M7uhPyfe.png" alt="image-20211214202534801"></p><p><strong>记住数码移动方向</strong>：左上右下</p><p><img src="https://s2.loli.net/2021/12/14/DkWOXlun9vypcYC.png" alt="image-20211214210428286"></p><h3 id="α-β剪枝"><a href="#α-β剪枝" class="headerlink" title="α/β剪枝"></a>α/β剪枝</h3><hr><h2 id="第五章-机器学习"><a href="#第五章-机器学习" class="headerlink" title="第五章 机器学习"></a>第五章 机器学习</h2><ol><li><p>什么是机器学习？</p><p>机器学习是让机器模拟人类的学习功能。</p></li><li><p>什么是学习系统？包括哪几个基本部分？</p><p>学习系统：能够在一定程度上实现机器学习的系统。包括：环境、学习环节、知识库、执行环节。</p></li><li><p>机器学习经历了哪几个阶段</p><p>神经元模型研究、符号概念获取、知识强化学习、连接学习和混合学习、大规模学习与深度学习</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章-人工智能概述&quot;&gt;&lt;a href=&quot;#第一章-人工智能概述&quot; class=&quot;headerlink&quot; title=&quot;第一章      人工智能概述&quot;&gt;&lt;/a&gt;第一章      人工智能概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是智能？智能包含哪几种能力&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="大三课程" scheme="https://michael-d-666.github.io/tags/%E5%A4%A7%E4%B8%89%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言知识整理</title>
    <link href="https://michael-d-666.github.io/2021/12/06/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://michael-d-666.github.io/2021/12/06/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</id>
    <published>2021-12-06T02:10:57.000Z</published>
    <updated>2021-12-19T02:49:35.949Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol><li><p>通用寄存器：AX、BX、CX、DX<br>指针寄存器：SP、BP<br>变址寄存器：SI、DI<br>控制寄存器：IP、标志寄存器<br>段寄存器：CS、DS、SS、ES</p></li><li><p>AX的寄存器值若是0304，则AH是03，AL是04<br><img src="https://s2.loli.net/2021/12/06/ETUWopzN6V5IrhJ.png" alt="image-20211206101919971"></p></li><li><p>给某一地址存入字形数据<br>（在文本文件中写的时候，mov word ptr [bx],0405h和mov [bx],0405h两者等价，但在dos中无法mov [bx],0405）<br><img src="https://s2.loli.net/2021/12/06/BDkXSfFOb5TQmyu.png" alt="image-20211206102230606"></p></li><li><p>不能直接通过寄存器寻址来赋值立即数，要通过寄存器当中转<br><img src="https://s2.loli.net/2021/12/06/3NdjWp5SF8ugI1c.png" alt="image-20211206102654027"></p></li><li><p>在8086之中，只有四个寄存器可以在【】中进行内存单元的寻址：BX，BP，SI，DI。若中括号中出现AX，则会报错。并且这四个中间，BX和SI一起出现、BX和DI可一起出现，BP和SI可以一起出现，BP和DI一起出现。其余组合不能出现。且bp默认的段地址是SS，SI、DI的默认段地址是DS。<br><a href="https://blog.csdn.net/qq_42282258/article/details/82795286">中括号，寻址寄存器的使用</a></p></li><li><p>80*25彩色模式</p><p>DOS窗口一行可以显示80个字符，一行160个字节。总共有25行，这被当作一页。每个字符两个字节，总共4000B，近似4KB。</p><p>显存总共32KB，从B8000H—-BFFFFH。</p><p>显示器默认显示第0页。</p><p>每个字符占两个字节，高位字节表示颜色属性，低位字节表示字符的ASCII码。</p><p>颜色属性总共有8位</p><p><img src="https://s2.loli.net/2021/12/06/f7OjAnSswTyB3ie.png" alt="image-20211206110912459"></p></li><li><p>内中断 int 21h</p><p>| AH   | 功能         | 调用参数    |<br>| —— | —————— | —————- |<br>| 02   | 显示输出     | DL=输出字符 |<br>| 4C   | 带返回码结束 | AL=返回码   |</p><p><a href="https://www.cnblogs.com/ynwlgh/archive/2011/12/12/2285017.html">INT 21H 指令说明</a></p></li><li><p>汇编语言中的负数用==补码==表示</p></li><li><p>目的：获得当前==数值==的ASCLL码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or dl, 30h</span><br></pre></td></tr></table></figure></li><li><p>div 指令 ，对于16位被除数和8位除数来说，被除数在AX中，除数在寄存器或内存单元中，商存放在AL中，余数存放在AH中。</p></li><li><p>mul指令，，对于两个8位乘数来说，一个默认在AL中，另一个在寄存器或内存单元中。 </p></li><li><p>程序段前缀PSP是可执行程序前的256个字节。</p></li><li><p>若代码中data段在前，则CS&gt;DS,否则DS&gt;CS</p></li><li><p>将某一字符转化为大写：and al,11011111b（将2的5次方位置0，相当于减32）<br>将某一字符转化为小写：or al,00100000b</p></li><li><p>在debug中CX    默认显示当前指令的长度（总的字节数）</p></li><li><p>记住Push的时候是先减2，再放入内容；POP是先弹出内容，再加2。类似的：LOOP指令先CX-1，再判断是否等于0。</p></li><li><p>一个栈段最大可以设为64KB。</p></li><li><p>不能直接给段基址寄存器赋值，要通过通用寄存器中转</p></li><li><p>在汇编语言程序中，数据不能以字母开头，所以大于9FFH的数在前面要加个0。如：0b800h</p></li><li><p>DOS方式下，一般情况下，0：200~0：2ff空间中没有系统或其他程序的数据或代码。  </p></li><li><p>没有操作数的指令，指令长度为1个字节</p><p>操作数只涉及寄存器的的指令，指令长度为2个字节，如：mov bx,ax</p><p>操作数涉及内存地址的指令，指令长度为3个字节，如：mov ax,ds:[bx+si+idata]</p><p>操作数涉及立即数的指令，指令长度为：寄存器类型+1。 8位寄存器，寄存器类型=1，如：mov al,8；指令长度为2个字节。 16位寄存器，寄存器类型=2，如：mov ax,8；指令长度为3个字节</p></li></ol><hr><h2 id="第2章-寄存器"><a href="#第2章-寄存器" class="headerlink" title="第2章     寄存器"></a>第2章     寄存器</h2><h3 id="易错习题："><a href="#易错习题：" class="headerlink" title="易错习题："></a>易错习题：</h3><ol><li><p>若给定段地址为0001H，仅通过变化偏移地址寻址，CPU的寻址范围为<strong><strong>____</strong></strong>到<strong><strong><strong><strong>__</strong></strong></strong></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">假设段地址在ss中，则ss=00010H，sp的范围是0000H~FFFFH。所以CPU的寻址范围为0010H到1000FH。</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>有一数据存放在20000H单元中，现给定段地址为SA。若想用偏移地址寻找此单元，则应该满足的条件为：最小为<strong>__</strong>，最大H为<strong>__</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运用公式：ss*16+sp=20000H，sp的范围是0000H~FFFFH。所以ss的范围是1001H~2000H</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>下面的3条指令执行后，cpu几次修改IP？都是在什么时候？最后IP中的值是多少？ </p><p>mov ax,bx </p><p>sub ax,ax </p><p>jmp ax </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一次是读取mov ax,bx之后，</span><br><span class="line">第二次是读取sub ax,ax之后</span><br><span class="line">第三次是读取jmp ax之后</span><br><span class="line">第四次是执行jmp ax之后</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="第3章-寄存器（内存访问）"><a href="#第3章-寄存器（内存访问）" class="headerlink" title="第3章     寄存器（内存访问）"></a>第3章     寄存器（内存访问）</h2><h3 id="易错习题：-1"><a href="#易错习题：-1" class="headerlink" title="易错习题："></a>易错习题：</h3><ol><li><p>补全下面程序，使之可以将10000H~1000FH这一段中的8个字，逆序复制到20000H~2000FH中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1000H</span><br><span class="line">mov ds,ax</span><br><span class="line">_________   //最简单的方法，将某一段设置为栈，然后不断push</span><br><span class="line">_________   //注意ss和ds一样不能直接赋值，要通过寄存器中转</span><br><span class="line">_________</span><br><span class="line">push [0]</span><br><span class="line">push [2]</span><br><span class="line">push [4]</span><br><span class="line">push [6]</span><br><span class="line">push [8]</span><br><span class="line">push [A]</span><br><span class="line">push [C]</span><br><span class="line">push [E]</span><br></pre></td></tr></table></figure><p>答案：  mov ax,2000H      mov ss,ax     mov sp,10h</p></li></ol><h2 id="第9章-转移指令"><a href="#第9章-转移指令" class="headerlink" title="第9章     转移指令"></a>第9章     转移指令</h2><ol><li><p><strong>je  标号</strong>   ，根据标志位ZF（0标志位）跳转。若标志位为1，则跳转到标号位置。   </p></li><li><p><strong>jmp BX</strong> ， 相当于mov IP,BX</p><p><strong>jmp word ptr ds:[0]</strong> :内存单元中存放着一个字，是转移目的的偏移地址</p><p><strong>jmp dword ptr ds:[0]</strong>：内存单元中存放着两个字，高地址是段地址，低地址是偏移地址</p><p><strong>jcxz  标号</strong>：如果cx是0，则转移到标号处执行</p></li></ol><hr><h2 id="第10章-call指令和RET指令"><a href="#第10章-call指令和RET指令" class="headerlink" title="第10章         call指令和RET指令"></a>第10章         call指令和RET指令</h2><ol><li><p>作用：用来修改IP，或者同时修改CS和IP（下一条将要执行指令的地址）。</p></li><li><p>RET和RETF均用来修改CS和IP。<br>RET相当于pop IP(把栈中的内容赋值给IP)<br>RETF相当于pop IP  , pop CS(先把栈中的内容赋值给IP，再把栈中的内容给CS)。</p></li><li><p>call  标号 命令 相当于 push IP  jump near ptr 标号（先把当前指令地址入栈，再转移到标号位置）</p><p>call far ptr 标号 命令 相当于 push CS , push IP, jmp far ptr 标号（把当前指令入栈，先存CS，再是IP，最后转到标号处。）</p></li><li><p>call word ptr 内存地址相当于 push IP jump word ptr 内存单元地址。</p><p>call dword ptr 内存单元地址相当于  push CS, push IP, jump dword ptr 内存单元地址。</p></li></ol><hr><h2 id="第12章-标志寄存器"><a href="#第12章-标志寄存器" class="headerlink" title="第12章    标志寄存器"></a>第12章    标志寄存器</h2><ol><li><p><img src="https://s2.loli.net/2021/12/10/NdPGLUnVMxBcFoX.png" alt="img"></p></li><li><p>adc 指令是带进位的加法指令，它利用了CF位上记录的进位值。</p></li><li><p>cmp 指令，cmp ax,bx   若ax==bx，则ax-bx=0，则ZF（0标志位）置为1；若ax！=bx，则0标志位位0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmp ax,0     //如果ax是0，则跳转到next</span><br><span class="line">je next</span><br><span class="line">---</span><br><span class="line">cmp ax,0      //如果ax不是0，则跳转到next</span><br><span class="line">jne next</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通用寄存器：AX、BX、CX、DX&lt;br&gt;指针寄存器：SP、BP&lt;br&gt;变址寄存器：SI、DI&lt;br&gt;控制</summary>
      
    
    
    
    
    <category term="大三课程" scheme="https://michael-d-666.github.io/tags/%E5%A4%A7%E4%B8%89%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://michael-d-666.github.io/2021/12/05/hello-world/"/>
    <id>https://michael-d-666.github.io/2021/12/05/hello-world/</id>
    <published>2021-12-05T14:59:02.219Z</published>
    <updated>2021-12-06T08:52:44.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二次踩坑"><a href="#第二次踩坑" class="headerlink" title="第二次踩坑"></a>第二次踩坑</h3><p>网站的背景想要改成渐变的颜色，可是怎么该也仍然是纯白的背景，而且网站打开检查发现也是可以接收的。在本地浏览是可以成功看到的。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><img src="https://s2.loli.net/2021/12/06/QWTzrOiGNvSkyeb.png" alt="image-20211206165112039"></p><p>在hexo的config配置文件下将url修改成网页地址。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第二次踩坑&quot;&gt;&lt;a href=&quot;#第二次踩坑&quot; class=&quot;headerlink&quot; title=&quot;第二次踩坑&quot;&gt;&lt;/a&gt;第二次踩坑&lt;/h3&gt;&lt;p&gt;网站的背景想要改成渐变的颜色，可是怎么该也仍然是纯白的背景，而且网站打开检查发现也是可以接收的。在本地浏览是可以成功</summary>
      
    
    
    
    
  </entry>
  
</feed>
